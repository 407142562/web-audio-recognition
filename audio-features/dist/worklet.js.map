{"version":3,"sources":["webpack:///webpack/bootstrap fc8e6395504d27cca612","webpack:///./src/CircularAudioBuffer.ts","webpack:///./src/MelSpectrogram.ts","webpack:///./src/Resampler.ts","webpack:///./src/worklet/MelFeatureProcessor.ts","webpack:///./~/fft.js/lib/fft.js"],"names":[],"mappings":"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AED,iBAAiB,CAAC,uBAAuB,EAAE,mBAAmB,CAAC,CAAC;;;;;;;;ACzHhE;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,eAAe;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA,GAAG;AACH;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;;AAEA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA,GAAG;AACH;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,eAAe;AACnC,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"worklet.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fc8e6395504d27cca612","/**\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n/**\n * Save Float32Array in arbitrarily sized chunks.\n * Load Float32Array in arbitrarily sized chunks.\n * Determine if there's enough data to grab a certain amount.\n */\nexport default class CircularAudioBuffer {\n  buffer: Float32Array\n  // The index that we are currently full up to. New data is written from\n  // [currentIndex + 1, maxLength]. Data can be read from [0, currentIndex].\n  currentIndex: number\n\n  constructor(maxLength: number) {\n    this.buffer = new Float32Array(maxLength);\n    this.currentIndex = 0;\n  }\n\n  /**\n   * Add a new buffer of data. Called when we get new audio input samples.\n   */\n  addBuffer(newBuffer: Float32Array) {\n    // Do we have enough data in this buffer?\n    const remaining = this.buffer.length - this.currentIndex;\n    if (this.currentIndex + newBuffer.length > this.buffer.length) {\n      console.error(`Not enough space to write ${newBuffer.length}` +\n        ` to this circular buffer with ${remaining} left.`);\n      return;\n    }\n    this.buffer.set(newBuffer, this.currentIndex);\n    //console.log(`Wrote ${newBuffer.length} entries to index ${this.currentIndex}.`);\n    this.currentIndex += newBuffer.length;\n  }\n\n  /**\n   * How many samples are stored currently?\n   */\n  getLength() {\n    return this.currentIndex;\n  }\n\n  /**\n   * How much space remains?\n   */\n  getRemainingLength() {\n    return this.buffer.length - this.currentIndex;\n  }\n\n  /**\n   * Return the first N samples of the buffer, and remove them. Called when we\n   * want to get a buffer of audio data of a fixed size.\n   */\n  popBuffer(length: number) {\n    // Do we have enough data to read back?\n    if (this.currentIndex < length) {\n      console.error(`This circular buffer doesn't have ${length} entries in it.`);\n      return;\n    }\n    if (length == 0) {\n      console.warn(`Calling popBuffer(0) does nothing.`);\n      return;\n    }\n    const popped = this.buffer.slice(0, length);\n    const remaining = this.buffer.slice(length, this.buffer.length);\n    // Remove the popped entries from the buffer.\n    this.buffer.fill(0);\n    this.buffer.set(remaining, 0);\n    // Send the currentIndex back.\n    this.currentIndex -= length;\n    return popped;\n  }\n\n  /**\n   * Get the the first part of the buffer without mutating it.\n   */\n  getBuffer(length?: number) {\n    if (!length) {\n      length = this.getLength();\n    }\n    // Do we have enough data to read back?\n    if (this.currentIndex < length) {\n      console.error(`This circular buffer doesn't have ${length} entries in it.`);\n      return;\n    }\n    return this.buffer.slice(0, length);\n  }\n\n  clear() {\n    this.currentIndex = 0;\n    this.buffer.fill(0);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CircularAudioBuffer.ts","import * as FFT from 'fft.js';\n\ninterface SpecParams {\n  sampleRate: number;\n  hopLength?: number;\n  winLength?: number;\n  nFft?: number;\n  nMels?: number;\n  power?: number;\n  fMin?: number;\n  fMax?: number;\n}\n\ninterface MelParams {\n  sampleRate: number;\n  nFft?: number;\n  nMels?: number;\n  fMin?: number;\n  fMax?: number;\n}\n\n\nexport function magSpectrogram(stft: Float32Array[], power: number) : [Float32Array[], number] {\n  //console.log(`magSpectrogram on ${stft.length} x ${stft[0].length} power=${power}`);\n  const spec = stft.map(fft => pow(mag(fft), power));\n  const nFft = stft[0].length - 1;\n  return [spec, nFft];\n}\n\nexport function stft(y: Float32Array, params: SpecParams) : Float32Array[] {\n  const nFft = params.nFft || 2048;\n  const winLength = params.winLength || nFft;\n  const hopLength = params.hopLength || Math.floor(winLength / 4);\n\n  let fftWindow = hannWindow(winLength);\n\n  // Pad the window to be the size of nFft.\n  fftWindow = padCenterToLength(fftWindow, nFft);\n\n  // Pad the time series so that the frames are centered.\n  y = padReflect(y, Math.floor(nFft / 2));\n\n  // Window the time series.\n  const yFrames = frame(y, nFft, hopLength);\n  //console.log(`Split audio into ${yFrames.length} frames of ${yFrames[0].length} each.`);\n\n  // Pre-allocate the STFT matrix.\n  const stftMatrix = [];\n\n  const width = yFrames.length;\n  const height = nFft + 2;\n  //console.log(`Creating STFT matrix of size ${width} x ${height}.`);\n\n  for (let i = 0; i < width; i++) {\n    // Each column is a Float32Array of size height.\n    const col = new Float32Array(height);\n    stftMatrix[i] = col;\n  }\n\n  for (let i = 0; i < width; i++) {\n    // Populate the STFT matrix.\n    const winBuffer = applyWindow(yFrames[i], fftWindow);\n    const col = fft(winBuffer);\n    stftMatrix[i].set(col.slice(0, height));\n  }\n\n  return stftMatrix;\n}\n\nexport function spectrogram(y: Float32Array, params: SpecParams) : Float32Array[] {\n  if (!params.power) {\n    params.power = 1;\n  }\n  const stftMatrix = stft(y, params);\n  const [spec, nFft] = magSpectrogram(stftMatrix, params.power);\n  return spec;\n}\n\nexport function melSpectrogram(y: Float32Array, params: SpecParams) : Float32Array[] {\n  if (!params.power) {\n    params.power = 2.0;\n  }\n  const stftMatrix = stft(y, params);\n  const [spec, nFft] = magSpectrogram(stftMatrix, params.power);\n\n  params.nFft = nFft;\n  const melBasis = createMelFilterbank(params);\n  return applyWholeFilterbank(spec, melBasis);\n}\n\nexport function applyWholeFilterbank(spec: Float32Array[], filterbank: Float32Array[]) : Float32Array[]  {\n\n  // Apply a point-wise dot product between the array of arrays.\n  const out : Float32Array[] = [];\n  for (let i = 0; i < spec.length; i++) {\n    out[i] = applyFilterbank(spec[i], filterbank);\n  }\n  return out;\n}\n\nexport function applyFilterbank(mags: Float32Array, filterbank: Float32Array[]) : Float32Array {\n  if (mags.length != filterbank[0].length) {\n    throw new Error(`Each entry in filterbank should have dimensions ` +\n      `matching FFT. |mags| = ${mags.length}, ` +\n      `|filterbank[0]| = ${filterbank[0].length}.`);\n  }\n\n  // Apply each filter to the whole FFT signal to get one value.\n  let out = new Float32Array(filterbank.length);\n  for (let i = 0; i < filterbank.length; i++) {\n    // To calculate filterbank energies we multiply each filterbank with the\n    // power spectrum.\n    const win = applyWindow(mags, filterbank[i]);\n    // Then add up the coefficents.\n    out[i] = sum(win);\n  }\n  return out;\n}\n\nexport function applyWindow(buffer, win) {\n  if (buffer.length != win.length) {\n    console.error(`Buffer length ${buffer.length} != window length ${win.length}.`);\n    return;\n  }\n\n  let out = new Float32Array(buffer.length);\n  for (let i = 0; i < buffer.length; i++) {\n    out[i] = win[i] * buffer[i];\n  }\n  return out;\n}\n\nexport function padCenterToLength(data: Float32Array, length: number) {\n  // If data is longer than length, error!\n  if (data.length > length) {\n    throw new Error('Data is longer than length.');\n  }\n\n  const paddingLeft = Math.floor((length - data.length) / 2);\n  const paddingRight = length - data.length - paddingLeft;\n  return padConstant(data, [paddingLeft, paddingRight]);\n}\n\nexport function padConstant(data: Float32Array, padding: number | number[]) {\n  let padLeft, padRight;\n  if (typeof(padding) == 'object') {\n    [padLeft, padRight] = padding;\n  } else {\n    padLeft = padRight = padding;\n  }\n  const out = new Float32Array(data.length + padLeft + padRight);\n  out.set(data, padLeft);\n  return out;\n}\n\nexport function padReflect(data: Float32Array, padding: number) {\n  const out = padConstant(data, padding);\n  for (let i = 0; i < padding; i++) {\n    // Pad the beginning with reflected values.\n    out[i] = out[2*padding - i];\n    // Pad the end with reflected values.\n    out[out.length - i - 1] = out[out.length - 2*padding + i - 1];\n  }\n  return out;\n}\n\n/**\n * Given a timeseries, returns an array of timeseries that are windowed\n * according to the params specified.\n */\nexport function frame(data: Float32Array, frameLength: number, hopLength: number) : Float32Array[] {\n  const bufferCount = Math.floor((data.length - frameLength) / hopLength) + 1;\n  let buffers = range(bufferCount).map(x => new Float32Array(frameLength));\n  for (let i = 0; i < bufferCount; i++) {\n    const ind = i * hopLength;\n    const buffer = data.slice(ind, ind + frameLength);\n    buffers[i].set(buffer);\n    // In the end, we will likely have an incomplete buffer, which we should\n    // just ignore.\n    if (buffer.length != frameLength) {\n      continue;\n    }\n  }\n  return buffers;\n}\n\nexport function createMelFilterbank(params: MelParams) : Float32Array[] {\n  const fMin = params.fMin || 0;\n  const fMax = params.fMax || params.sampleRate / 2;\n  const nMels = params.nMels || 128;\n  const nFft = params.nFft || 2048;\n\n  // Center freqs of each FFT band.\n  const fftFreqs = calculateFftFreqs(params.sampleRate, nFft);\n  // (Pseudo) center freqs of each Mel band.\n  const melFreqs = calculateMelFreqs(nMels + 2, fMin, fMax);\n\n  const melDiff = internalDiff(melFreqs);\n  const ramps = outerSubtract(melFreqs, fftFreqs);\n  const filterSize = ramps[0].length;\n\n  const weights = [];\n  for (let i = 0; i < nMels; i++) {\n    weights[i] = new Float32Array(filterSize);\n    for (let j = 0; j < ramps[i].length; j++) {\n      const lower = -ramps[i][j] / melDiff[i];\n      const upper = ramps[i+2][j] / melDiff[i+1];\n      const weight = Math.max(0, Math.min(lower, upper));\n      weights[i][j] = weight;\n    }\n  }\n\n  // Slaney-style mel is scaled to be approx constant energy per channel.\n  for (let i = 0; i < weights.length; i++) {\n    // How much energy per channel.\n    const enorm = 2.0 / (melFreqs[2+i] - melFreqs[i]);\n    // Normalize by that amount.\n    weights[i] = weights[i].map(val => val * enorm);\n  }\n\n  return weights;\n}\n\nexport function fft(y: Float32Array) {\n  const fft = new FFT(y.length);\n  const out = fft.createComplexArray();\n  const data = fft.toComplexArray(y);\n  fft.transform(out, data);\n  return out;\n}\n\nexport function hannWindow(length: number) {\n  let win = new Float32Array(length);\n  for (let i = 0; i < length; i++) {\n    win[i] = 0.5 * (1 - Math.cos(2 * Math.PI * i / (length - 1)));\n  }\n  return win;\n}\n\nexport function array(arr: number[]) {\n  const out = new Float32Array(arr.length);\n  out.set(arr);\n  return out;\n}\n\nconst MIN_VAL = -10;\nexport function logGtZero(val) {\n  // Ensure that the log argument is nonnegative.\n  const offset = Math.exp(MIN_VAL);\n  return Math.log(val + offset);\n}\n\nexport function sum(array) {\n  return array.reduce(function(a, b) { return a + b; });\n}\n\nexport function range(count) : number[] {\n  let out = [];\n  for (let i = 0; i < count; i++) {\n    out.push(i);\n  }\n  return out;\n}\n\nexport function linearSpace(start, end, count) {\n  // Include start and endpoints.\n  const delta = (end - start) / (count - 1);\n  let out = new Float32Array(count);\n  for (let i = 0; i < count; i++) {\n    out[i] = start + delta * i;\n  }\n  return out;\n}\n\n/**\n * Given an interlaced complex array (y_i is real, y_(i+1) is imaginary),\n * calculates the energies. Output is half the size.\n */\nexport function mag(y: Float32Array) {\n  let out = new Float32Array(y.length / 2);\n  for (let i = 0; i < y.length / 2; i++) {\n    out[i] = Math.sqrt(y[i*2]*y[i*2] + y[i*2 + 1]*y[i*2 + 1]);\n  }\n  return out;\n}\n\nexport function powerToDb(spec: Float32Array[], amin=1e-10, refValue=1.0, topDb=80.0) {\n  const width = spec.length;\n  const height = spec[0].length;\n  const logSpec = [];\n  for (let i = 0; i < width; i++) {\n    logSpec[i] = new Float32Array(height);\n  }\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < height; j++) {\n      const val = spec[i][j];\n      let logVal = 10.0 * Math.log10(Math.max(amin, val));\n      logVal -= 10.0 * Math.log10(Math.max(amin, refValue));\n      logSpec[i][j] = logVal;\n    }\n  }\n  if (topDb) {\n    if (topDb < 0) {\n      throw new Error(`topDb must be non-negative.`);\n    }\n    for (let i = 0; i < width; i++) {\n      const maxVal = max(logSpec[i]);\n      for (let j = 0; j < height; j++) {\n        logSpec[i][j] = Math.max(logSpec[i][j], maxVal - topDb);\n      }\n    }\n  }\n  return logSpec;\n}\n\nexport function hzToMel(hz: number) : number {\n  return 1125.0 * Math.log(1 + hz/700.0);\n}\n\nexport function melToHz(mel: number) : number {\n  return 700.0 * (Math.exp(mel/1125.0) - 1);\n}\n\nfunction freqToBin(freq, nFft, sr) {\n  return Math.floor((nFft+1) * freq / (sr/2));\n}\n\nexport function flatten2D(spec: Float32Array[]) {\n  const length = spec[0].length * spec.length;\n  const out = new Float32Array(length);\n  const height = spec[0].length;\n  const width = spec.length;\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < height; j++) {\n      out[j * width + i] = spec[i][j];\n    }\n  }\n  return out;\n}\n\nexport function calculateFftFreqs(sampleRate: number, nFft: number) {\n  return linearSpace(0, sampleRate / 2, Math.floor(1 + nFft / 2));\n}\n\nexport function calculateMelFreqs(nMels: number, fMin: number, fMax: number) : Float32Array {\n  const melMin = hzToMel(fMin);\n  const melMax = hzToMel(fMax);\n\n  // Construct linearly spaced array of nMel intervals, between melMin and\n  // melMax.\n  const mels = linearSpace(melMin, melMax, nMels);\n  const hzs = mels.map(mel => melToHz(mel));\n  return hzs;\n}\n\nexport function internalDiff(arr: Float32Array) : Float32Array {\n  const out = new Float32Array(arr.length - 1);\n  for (let i = 0; i < arr.length; i++) {\n    out[i] = arr[i+1] - arr[i];\n  }\n  return out;\n}\n\nexport function outerSubtract(arr: Float32Array, arr2: Float32Array) : Float32Array[] {\n  const out = [];\n  for (let i = 0; i < arr.length; i++) {\n    out[i] = new Float32Array(arr2.length);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr2.length; j++) {\n      out[i][j] = arr[i] - arr2[j];\n    }\n  }\n  return out;\n}\n\nexport function pow(arr: Float32Array, power: number) {\n  return arr.map(v => Math.pow(v, power));\n}\n\nexport function max(arr) {\n  return arr.reduce((a, b) => Math.max(a, b));\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/MelSpectrogram.ts","// From https://github.com/taisel/XAudioJS/blob/master/resampler.js.\n// TODO: Maybe use one of these compiled to WASM: https://lastique.github.io/src_test/.\n\"use strict\";\n//JavaScript Audio Resampler\n//Copyright (C) 2011-2015 Grant Galitz\n//Released to Public Domain\nexport function Resampler(fromSampleRate, toSampleRate, channels, inputBuffer) {\n    //Input Sample Rate:\n    this.fromSampleRate = +fromSampleRate;\n    //Output Sample Rate:\n    this.toSampleRate = +toSampleRate;\n    //Number of channels:\n    this.channels = channels | 0;\n    //Type checking the input buffer:\n    if (typeof inputBuffer != \"object\") {\n        throw(new Error(\"inputBuffer is not an object.\"));\n    }\n    if (!(inputBuffer instanceof Array) && !(inputBuffer instanceof Float32Array) && !(inputBuffer instanceof Float64Array)) {\n        throw(new Error(\"inputBuffer is not an array or a float32 or a float64 array.\"));\n    }\n    this.inputBuffer = inputBuffer;\n    //Initialize the resampler:\n    this.initialize();\n}\nResampler.prototype.initialize = function () {\n\t//Perform some checks:\n\tif (this.fromSampleRate > 0 && this.toSampleRate > 0 && this.channels > 0) {\n\t\tif (this.fromSampleRate == this.toSampleRate) {\n\t\t\t//Setup a resampler bypass:\n\t\t\tthis.resampler = this.bypassResampler;\t\t//Resampler just returns what was passed through.\n            this.ratioWeight = 1;\n            this.outputBuffer = this.inputBuffer;\n\t\t}\n\t\telse {\n            this.ratioWeight = this.fromSampleRate / this.toSampleRate;\n\t\t\tif (this.fromSampleRate < this.toSampleRate) {\n\t\t\t\t/*\n\t\t\t\t\tUse generic linear interpolation if upsampling,\n\t\t\t\t\tas linear interpolation produces a gradient that we want\n\t\t\t\t\tand works fine with two input sample points per output in this case.\n\t\t\t\t*/\n\t\t\t\tthis.compileLinearInterpolationFunction();\n\t\t\t\tthis.lastWeight = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t/*\n\t\t\t\t\tCustom resampler I wrote that doesn't skip samples\n\t\t\t\t\tlike standard linear interpolation in high downsampling.\n\t\t\t\t\tThis is more accurate than linear interpolation on downsampling.\n\t\t\t\t*/\n\t\t\t\tthis.compileMultiTapFunction();\n\t\t\t\tthis.tailExists = false;\n\t\t\t\tthis.lastWeight = 0;\n\t\t\t}\n\t\t\tthis.initializeBuffers();\n\t\t}\n\t}\n\telse {\n\t\tthrow(new Error(\"Invalid settings specified for the resampler.\"));\n\t}\n}\nResampler.prototype.compileLinearInterpolationFunction = function () {\n\tvar toCompile = \"var outputOffset = 0;\\\n    if (bufferLength > 0) {\\\n        var buffer = this.inputBuffer;\\\n        var weight = this.lastWeight;\\\n        var firstWeight = 0;\\\n        var secondWeight = 0;\\\n        var sourceOffset = 0;\\\n        var outputOffset = 0;\\\n        var outputBuffer = this.outputBuffer;\\\n        for (; weight < 1; weight += \" + this.ratioWeight + \") {\\\n            secondWeight = weight % 1;\\\n            firstWeight = 1 - secondWeight;\";\n            for (var channel = 0; channel < this.channels; ++channel) {\n                toCompile += \"outputBuffer[outputOffset++] = (this.lastOutput[\" + channel + \"] * firstWeight) + (buffer[\" + channel + \"] * secondWeight);\";\n            }\n        toCompile += \"}\\\n        weight -= 1;\\\n        for (bufferLength -= \" + this.channels + \", sourceOffset = Math.floor(weight) * \" + this.channels + \"; sourceOffset < bufferLength;) {\\\n            secondWeight = weight % 1;\\\n            firstWeight = 1 - secondWeight;\";\n            for (var channel = 0; channel < this.channels; ++channel) {\n                toCompile += \"outputBuffer[outputOffset++] = (buffer[sourceOffset\" + ((channel > 0) ? (\" + \" + channel) : \"\") + \"] * firstWeight) + (buffer[sourceOffset + \" + (this.channels + channel) + \"] * secondWeight);\";\n            }\n            toCompile += \"weight += \" + this.ratioWeight + \";\\\n            sourceOffset = Math.floor(weight) * \" + this.channels + \";\\\n        }\";\n        for (var channel = 0; channel < this.channels; ++channel) {\n            toCompile += \"this.lastOutput[\" + channel + \"] = buffer[sourceOffset++];\";\n        }\n        toCompile += \"this.lastWeight = weight % 1;\\\n    }\\\n    return outputOffset;\";\n\tthis.resampler = Function(\"bufferLength\", toCompile);\n}\nResampler.prototype.compileMultiTapFunction = function () {\n\tvar toCompile = \"var outputOffset = 0;\\\n    if (bufferLength > 0) {\\\n        var buffer = this.inputBuffer;\\\n        var weight = 0;\";\n        for (var channel = 0; channel < this.channels; ++channel) {\n            toCompile += \"var output\" + channel + \" = 0;\"\n        }\n        toCompile += \"var actualPosition = 0;\\\n        var amountToNext = 0;\\\n        var alreadyProcessedTail = !this.tailExists;\\\n        this.tailExists = false;\\\n        var outputBuffer = this.outputBuffer;\\\n        var currentPosition = 0;\\\n        do {\\\n            if (alreadyProcessedTail) {\\\n                weight = \" + this.ratioWeight + \";\";\n                for (channel = 0; channel < this.channels; ++channel) {\n                    toCompile += \"output\" + channel + \" = 0;\"\n                }\n            toCompile += \"}\\\n            else {\\\n                weight = this.lastWeight;\";\n                for (channel = 0; channel < this.channels; ++channel) {\n                    toCompile += \"output\" + channel + \" = this.lastOutput[\" + channel + \"];\"\n                }\n                toCompile += \"alreadyProcessedTail = true;\\\n            }\\\n            while (weight > 0 && actualPosition < bufferLength) {\\\n                amountToNext = 1 + actualPosition - currentPosition;\\\n                if (weight >= amountToNext) {\";\n                    for (channel = 0; channel < this.channels; ++channel) {\n                        toCompile += \"output\" + channel + \" += buffer[actualPosition++] * amountToNext;\"\n                    }\n                    toCompile += \"currentPosition = actualPosition;\\\n                    weight -= amountToNext;\\\n                }\\\n                else {\";\n                    for (channel = 0; channel < this.channels; ++channel) {\n                        toCompile += \"output\" + channel + \" += buffer[actualPosition\" + ((channel > 0) ? (\" + \" + channel) : \"\") + \"] * weight;\"\n                    }\n                    toCompile += \"currentPosition += weight;\\\n                    weight = 0;\\\n                    break;\\\n                }\\\n            }\\\n            if (weight <= 0) {\";\n                for (channel = 0; channel < this.channels; ++channel) {\n                    toCompile += \"outputBuffer[outputOffset++] = output\" + channel + \" / \" + this.ratioWeight + \";\"\n                }\n            toCompile += \"}\\\n            else {\\\n                this.lastWeight = weight;\";\n                for (channel = 0; channel < this.channels; ++channel) {\n                    toCompile += \"this.lastOutput[\" + channel + \"] = output\" + channel + \";\"\n                }\n                toCompile += \"this.tailExists = true;\\\n                break;\\\n            }\\\n        } while (actualPosition < bufferLength);\\\n    }\\\n    return outputOffset;\";\n\tthis.resampler = Function(\"bufferLength\", toCompile);\n}\nResampler.prototype.bypassResampler = function (upTo) {\n    return upTo;\n}\nResampler.prototype.initializeBuffers = function () {\n\t//Initialize the internal buffer:\n    var outputBufferSize = (Math.ceil(this.inputBuffer.length * this.toSampleRate / this.fromSampleRate / this.channels * 1.000000476837158203125) * this.channels) + this.channels;\n\ttry {\n\t\tthis.outputBuffer = new Float32Array(outputBufferSize);\n\t\tthis.lastOutput = new Float32Array(this.channels);\n\t}\n\tcatch (error) {\n\t\tthis.outputBuffer = [];\n\t\tthis.lastOutput = [];\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Resampler.ts","import * as melspec from '../MelSpectrogram';\nimport CircularAudioBuffer from '../CircularAudioBuffer';\nimport {resample} from '../AudioUtils';\nimport {Resampler} from '../Resampler';\n\nexport class MelFeatureProcessor extends AudioWorkletProcessor {\n  // How many samples per buffer (in processed sample rate).\n  winLength = 2048;\n  // How many samples between buffers.\n  hopLength = 1024;\n  // Processing sample rate that we use for feature extraction.\n  processSampleRate = 16000.0;\n  // For storing multiple buffers of audio samples.\n  circularBuffer: CircularAudioBuffer;\n  // How many samples have we processed in total?\n  totalSamples = 0;\n\n  lastUpdate: number;\n\n  constructor() {\n    super();\n\n    this.timer = new Timer();\n    this.lastUpdate = currentTime;\n    this.port.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    if (event.data.config) {\n      this.configure(event.data.config);\n    }\n    console.log('[Processor:Received] \"' + event.data.message +\n      '\" (' + event.data.timeStamp + ')');\n  }\n\n  process(inputs, outputs, parameters) {\n    // Post a message to the node for every 1 second.\n    if (currentTime - this.lastUpdate > 1.0) {\n      this.port.postMessage({\n        message: 'Process is called.',\n        timeStamp: currentTime,\n      });\n      this.lastUpdate = currentTime;\n    }\n    const input = inputs[0];\n    const channel = input[0];\n\n    this.circularBuffer.addBuffer(channel);\n    this.totalSamples += channel.length;\n    //console.log(`Total samples: ${this.totalSamples}.`);\n\n    // If there's enough in the circular buffer, we should run the processing.\n    if (this.circularBuffer.getLength() > this.winLengthNative) {\n      const bufferNative = this.circularBuffer.getBuffer(this.winLengthNative);\n      this.processCompleteBuffer(bufferNative);\n\n      // Remove a hop's worth of data from the buffer.\n      this.circularBuffer.popBuffer(this.hopLengthNative);\n    }\n\n    return true;\n  }\n\n  private configure(params: melspec.SpecParams) {\n    console.log(`Received configuration params: ${params}.`);\n    this.winLength = params.winLength;\n    this.hopLength = params.hopLength;\n    this.nFft = params.nFft;\n\n    // Leave some room for extra samples there.\n    this.circularBuffer = new CircularAudioBuffer(this.winLengthNative * 2);\n    console.log(`Created CircularAudioBuffer.`);\n  }\n\n  private async processCompleteBuffer(buffer: Float32Array) {\n    this.timer.start();\n    //const bufferResampled = await resample(buffer, this.processSampleRate);\n    const resampler = new Resampler(sampleRate, this.processSampleRate, 1, buffer);\n    resampler.resampler(this.winLengthNative);\n    const bufferResampled = resampler.outputBuffer;\n    //console.log(`Resampled ${buffer.length} into ${bufferResampled.length} in ${this.timer.elapsed()} s.`);\n\n    this.timer.start();\n    const spec = melspec.melSpectrogram(bufferResampled, {\n      sampleRate: this.processSampleRate,\n    });\n    //console.log(`Calculated features in ${this.timer.elapsed()} s.`);\n    console.log(`Mel spec of size ${spec.length} x ${spec[0].length}.`);\n\n    this.port.postMessage({\n      spec: spec;\n    });\n  }\n\n  get winLengthNative() : number {\n    // How many samples do we need in the native sample rate?\n    return Math.floor(this.winLength * (sampleRate / this.processSampleRate));\n  }\n\n  get hopLengthNative() : number {\n    // How many samples do we need in the native sample rate?\n    return Math.floor(this.hopLength * (sampleRate / this.processSampleRate));\n  }\n}\n\nclass Timer {\n  startTime: number;\n\n  start() {\n    this.startTime = this.now();\n  }\n\n  elapsed() {\n    return this.now() - this.startTime;\n  }\n\n  private now() {\n    return new Date().valueOf() / 1000;\n  }\n}\n\nregisterProcessor('mel-feature-processor', MelFeatureProcessor);\n\n\n\n// WEBPACK FOOTER //\n// ./src/worklet/MelFeatureProcessor.ts","'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/fft.js/lib/fft.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}