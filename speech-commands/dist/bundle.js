!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=108)}([function(t,e,n){"use strict";n.r(e);var r={};n.d(r,"createWebGLRenderingContext",function(){return ot}),n.d(r,"createWebGLRenderingContextFromCanvas",function(){return st}),n.d(r,"callAndCheck",function(){return ut}),n.d(r,"enableDebugWebGLErrorChecking",function(){return ct}),n.d(r,"checkWebGLError",function(){return pt}),n.d(r,"getWebGLErrorMessage",function(){return ft}),n.d(r,"getExtensionOrThrow",function(){return ht}),n.d(r,"createVertexShader",function(){return dt}),n.d(r,"createFragmentShader",function(){return mt}),n.d(r,"createProgram",function(){return yt}),n.d(r,"linkProgram",function(){return vt}),n.d(r,"validateProgram",function(){return bt}),n.d(r,"createStaticVertexBuffer",function(){return wt}),n.d(r,"createStaticIndexBuffer",function(){return xt}),n.d(r,"queryMaxTextureSize",function(){return Ot}),n.d(r,"getChannelsPerTexture",function(){return Nt}),n.d(r,"createTexture",function(){return St}),n.d(r,"validateTextureSize",function(){return Et}),n.d(r,"createFramebuffer",function(){return At}),n.d(r,"bindVertexBufferToProgramAttribute",function(){return It}),n.d(r,"bindTextureUnit",function(){return Tt}),n.d(r,"unbindTextureUnit",function(){return kt}),n.d(r,"getProgramUniformLocationOrThrow",function(){return Pt}),n.d(r,"getProgramUniformLocation",function(){return Rt}),n.d(r,"bindTextureToProgramUniformSampler",function(){return Ct}),n.d(r,"bindCanvasToFramebuffer",function(){return Dt}),n.d(r,"bindColorTextureToFramebuffer",function(){return _t}),n.d(r,"unbindColorTextureFromFramebuffer",function(){return Mt}),n.d(r,"validateFramebuffer",function(){return zt}),n.d(r,"getFramebufferErrorMessage",function(){return jt}),n.d(r,"getTextureShapeFromLogicalShape",function(){return Vt});var a={};n.d(a,"getWebGLContextAttributes",function(){return Wt}),n.d(a,"createWebGLContext",function(){return qt}),n.d(a,"createVertexShader",function(){return Gt}),n.d(a,"createVertexBuffer",function(){return Ht}),n.d(a,"createIndexBuffer",function(){return Kt}),n.d(a,"createMatrixTexture",function(){return Qt}),n.d(a,"createColorMatrixTexture",function(){return Zt}),n.d(a,"createPackedMatrixTexture",function(){return $t}),n.d(a,"bindVertexProgramAttributeStreams",function(){return te}),n.d(a,"uploadPixelDataToTexture",function(){return ee}),n.d(a,"uploadMatrixToTexture",function(){return re}),n.d(a,"uploadMatrixToPackedTexture",function(){return ae}),n.d(a,"downloadMatrixFromOutputTextureAsync",function(){return se}),n.d(a,"downloadMatrixFromOutputTexture",function(){return ue}),n.d(a,"downloadMatrixFromRGBAColorTexture",function(){return le}),n.d(a,"downloadMatrixFromPackedOutputTexture",function(){return ce});var i={};n.d(i,"browserFiles",function(){return Xn}),n.d(i,"browserHTTPRequest",function(){return Zn}),n.d(i,"copyModel",function(){return gn}),n.d(i,"decodeWeights",function(){return nn}),n.d(i,"encodeWeights",function(){return en}),n.d(i,"getLoadHandlers",function(){return ir}),n.d(i,"getSaveHandlers",function(){return ar}),n.d(i,"listModels",function(){return hn}),n.d(i,"loadWeights",function(){return er}),n.d(i,"moveModel",function(){return yn}),n.d(i,"registerLoadRouter",function(){return rr}),n.d(i,"registerSaveRouter",function(){return nr}),n.d(i,"removeModel",function(){return dn});var o={};n.d(o,"Serializable",function(){return or}),n.d(o,"SerializationMap",function(){return sr});var s={};n.d(s,"WEBGL_ENVS",function(){return ur}),n.d(s,"CPU_ENVS",function(){return lr}),n.d(s,"ALL_ENVS",function(){return cr}),n.d(s,"TEST_EPSILON",function(){return pr}),n.d(s,"expectArraysClose",function(){return fr}),n.d(s,"expectPromiseToFail",function(){return hr}),n.d(s,"expectArraysEqual",function(){return dr}),n.d(s,"expectNumbersClose",function(){return mr}),n.d(s,"expectValuesInRange",function(){return yr});var u={};n.d(u,"MathBackendWebGL",function(){return qe}),n.d(u,"GPGPUContext",function(){return he}),n.d(u,"gpgpu_util",function(){return a}),n.d(u,"webgl_util",function(){return r});var l=n(4),c=n(8),p=n(2),f=30;function h(t){return t<=f?t:function(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}(t,Math.floor(Math.sqrt(t)))}var d=n(23),m=n(6),g=n(11),y=n(1),v=n(9);function b(t,e,n){if(!y.hasEncodingLoss(t.dtype,e))return m.a.make(t.shape,{dataId:t.dataId},e);if("int32"===e)return n.int(t);if("bool"===e)return n.notEqual(t,v.a.scalar(0,t.dtype));throw new Error("Error in Cast: unknown dtype argument ("+e+")")}function w(t,e){return m.a.make(e,{dataId:t.dataId},t.dtype)}var x,O=function(){return function(t,e,n){this.variableNames=["A"];var r=t.windowSize,a=t.batchSize,i=t.inSize,o=Math.ceil(i/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,o];var s="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = 0;\n        float bestValue = getA(batch, inOffset);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+u+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+s+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    "}}(),N=function(){return function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,a=t.strideWidth,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,s=1/(e*n);this.userCode="\n      const ivec2 pads = ivec2("+i+", "+o+");\n      const float avgMultiplier = float("+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+a+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "}}(),S=n(10),E=function(){return function(t,e,n,r,a,i){this.outputShape=[],this.supportsBroadcasting=!0,this.variableNames=["x","mean","variance"],S.a(t,e),S.a(t,n);var o="0.0";null!=r&&(S.a(t,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");var s="1.0";null!=a&&(S.a(t,a),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+o+";\n        float scale = "+s+";\n        float inv = scale * inversesqrt(variance + float("+i+"));\n        setOutput((x - mean) * inv + offset);\n      }\n    "}}(),A=function(){return function(t,e,n){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.outputShape=S.a(e,n),this.userCode="\n      float binaryOperation(float a, float b) {\n        "+t+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "}}(),I=function(){return function(t,e,n){this.variableNames=["A"],this.outputShape=t;var r=e.toFixed(20),a=n.toFixed(20);this.userCode="\n      void main() {\n        float value = getAAtOutCoords();\n        if (isNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, "+r+", "+a+"));\n      }\n    "}}(),T=n(17),k=function(){return function(t,e){this.variableNames=["A","B"],this.outputShape=[],this.outputShape=T.c(t,e,1),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        float value = 0.0;\n        if (yC < "+t[1]+") {\n          value = getA(yR, yC);\n        } else {\n          yC -= "+t[1]+";\n          value = getB(yR, yC);\n        }\n\n        setOutput(value);\n      }\n    "}}(),P=function(){return function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,a=t.padInfo.left;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+a+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "}}(),R=function(){return function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,a=t.strideWidth,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+o+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+a+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "}}(),C=function(){return function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.padInfo.top,n=t.padInfo.left,r=t.strideHeight,a=t.strideWidth,i=t.dilationHeight,o=t.dilationWidth,s=t.filterHeight,u=t.filterWidth,l=4*Math.floor(t.inChannels/4),c=t.inChannels%4;this.userCode="\n      const ivec2 strides = ivec2("+r+", "+a+");\n      const ivec2 pads = ivec2("+e+", "+n+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+s+"; wR++) {\n          int xR = xRCorner + wR * "+i+";\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+u+"; wC++) {\n            int xC = xCCorner + wC * "+o+";\n\n            if (xC < 0 || xC >= "+t.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+l+"; d1 += 4) {\n              vec4 xValues = vec4(\n                getX(batch, xR, xC, d1),\n                getX(batch, xR, xC, d1 + 1),\n                getX(batch, xR, xC, d1 + 2),\n                getX(batch, xR, xC, d1 + 3)\n              );\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              dotProd += dot(xValues, wValues);\n            }\n\n            if ("+(1===c)+") {\n              dotProd +=\n                getX(batch, xR, xC, "+l+") *\n                getW(wR, wC, "+l+", d2);\n            } else if ("+(2===c)+") {\n              vec2 xValues = vec2(\n                getX(batch, xR, xC, "+l+"),\n                getX(batch, xR, xC, "+l+" + 1)\n              );\n              vec2 wValues = vec2(\n                getW(wR, wC, "+l+", d2),\n                getW(wR, wC, "+l+" + 1, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            } else if ("+(3===c)+") {\n              vec3 xValues = vec3(\n                getX(batch, xR, xC, "+l+"),\n                getX(batch, xR, xC, "+l+" + 1),\n                getX(batch, xR, xC, "+l+" + 2)\n              );\n              vec3 wValues = vec3(\n                getW(wR, wC, "+l+", d2),\n                getW(wR, wC, "+l+" + 1, d2),\n                getW(wR, wC, "+l+" + 2, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "}}();function D(t,e){return[e,t]}function _(t,e){return t*e}!function(t){t[t.FLOAT=0]="FLOAT",t[t.UNSIGNED_BYTE=1]="UNSIGNED_BYTE"}(x||(x={}));var M=-2e4,z=(2e4-M)/255,j=[1,1/255,1/65025,1/16581375],L=[1,255,65025],F=0;function V(t,e,n){var r=function(t,e){if(t%e!=0)throw new Error("unpackedSize ("+t+") must be a multiple of "+e);return t/e}(t.length,n);if(e.length<r)throw new Error("matrix length ("+e.length+") must be >= "+r);for(var a=0,i=0;i<t.length;i+=n)e[a++]=t[i]}function B(t,e){return[Math.ceil(e/2),Math.ceil(t/2)]}function U(t,e){var n=B(t,e);return n[0]*n[1]*4}function W(t,e,n,r){var a=l.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")?K:G,i=l.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")?X:H,o=t.map(function(t){return"uniform sampler2D "+t.name+";"}).join("\n"),s=t.map(function(t){return function(t,e,n){var r=function(t){var e=t.name,n=t.shapeInfo.texShape,r="get"+e.charAt(0).toUpperCase()+e.slice(1)+"Flat",a=n[0],i=n[1];if(1===i&&1===a)return"\n      float "+r+"(int index) {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";if(1===i)return"\n      float "+r+"(int index) {\n        vec2 uv = vec2(0.5, (float(index) + 0.5) / "+a+".0);\n        return sampleTexture("+e+", uv);\n      }\n    ";if(1===a)return"\n      float "+r+"(int index) {\n        vec2 uv = vec2((float(index) + 0.5) / "+i+".0, 0.5);\n        return sampleTexture("+e+", uv);\n      }\n    ";return"\n    float "+r+"(int index) {\n      vec2 uv = UVfrom1D("+a+", "+i+", index);\n      return sampleTexture("+e+", uv);\n    }\n  "}(t);r+=q(t),(n||y.arraysEqual(t.shapeInfo.logicalShape,e.logicalShape))&&(r+=function(t,e,n){var r=t.shapeInfo.texShape,a=t.name,i=a.charAt(0).toUpperCase()+a.slice(1),o="get"+i+"AtOutCoords",s=S.c(t.shapeInfo.logicalShape,e.logicalShape),u=t.shapeInfo.logicalShape.length,l=e.logicalShape.length,c=n&&(l>u||s.length>0),p=S.b(s);if(c&&!p)return function(t,e,n,r){var a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o="int";2===i?o="ivec2":3===i?o="ivec3":4===i&&(o="ivec4");var s,u=S.c(t.shapeInfo.logicalShape,e.logicalShape),l=i-a;s=0===a?"":i<2&&u.length>=1?"coords = 0;":u.map(function(t){return"coords["+(t+l)+"] = 0;"}).join("\n");var c="";c=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map(function(t,e){return"coords["+(e+l)+"]"}).join(", ");return"\n    float "+r+"() {\n      "+o+" coords = getOutputCoords();\n      "+s+"\n      return get"+n+"("+c+");\n    }\n  "}(t,e,i,o);var f=e.texShape;if(y.arraysEqual(r,f))return"\n      float "+o+"() {\n        return sampleTexture("+a+", resultUV);\n      }\n    ";var h=y.sizeFromShape(r),d="";c&&p&&(d="\n        int mainPart = index / "+h+";\n        index -= mainPart * "+h+";\n      ");return"\n    float "+o+"() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+f[0]+", "+f[1]+"));\n      int index = resTexRC.x * "+f[1]+" + resTexRC.y;\n      "+d+"\n      int texR = index / "+r[1]+";\n      int texC = index - texR * "+r[1]+";\n      vec2 uv = (vec2(texC, texR) + halfCR) /\n                 vec2("+r[1]+".0, "+r[0]+".0);\n\n      return sampleTexture("+a+", uv);\n    }\n  "}(t,e,n));return r}(t,e,r)}).join("\n"),u=e.texShape,c=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){if(1===e[0])return"\n      int getOutputCoords() {\n        return int(resultUV.x * "+e[1]+".0);\n      }\n    ";if(1===e[1])return"\n      int getOutputCoords() {\n        return int(resultUV.y * "+e[0]+".0);\n      }\n    ";return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      return resTexRC.x * "+e[1]+" + resTexRC.y;\n    }\n  "}(0,e);case 2:return function(t,e){if(y.arraysEqual(t,e))return"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+e[0]+", "+e[1]+"));\n      }\n    ";if(1===t[1])return"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ";if(1===t[0])return"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ";return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      int r = index / "+t[1]+";\n      int c = index - r * "+t[1]+";\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return r=e,a=(n=t)[1]*n[2],i=n[2],"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+r[0]+", "+r[1]+"));\n      int index = resTexRC.x * "+r[1]+" + resTexRC.y;\n      int r = index / "+a+";\n      index -= r * "+a+";\n      int c = index / "+i+";\n      int d = index - c * "+i+";\n      return ivec3(r, c, d);\n    }\n  ";case 4:return function(t,e){var n=t[3],r=t[2]*n,a=t[1]*r;return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      int r = index / "+a+";\n      index -= r * "+a+";\n\n      int c = index / "+r+";\n      index -= c * "+r+";\n\n      int d = index / "+n+";\n      int d2 = index - d * "+n+";\n\n      return ivec4(r, c, d, d2);\n    }\n  "}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}var n,r,a,i}(e.logicalShape,u);return[Y,a,i,o,c,s,n].join("\n")}function q(t){var e,n=t.shapeInfo.logicalShape;switch(n.length){case 0:return"\n    float get"+(e=t.name).charAt(0).toUpperCase()+e.slice(1)+"() {\n      return sampleTexture("+e+", halfCR);\n    }\n  ";case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);return"\n    float "+n+"(int index) {\n      return "+n+"Flat(index);\n    }\n  "}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.shapeInfo.texShape,r=t.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[0],o=n[1];if(y.arraysEqual(e,n))return"\n    float "+a+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+o+".0, "+i+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ";var s=y.squeezeShape(e),u=s.newShape,l=s.keptDims,c=u;if(c.length<e.length){var p=Q(t,c);return"\n      "+q(p)+"\n      float "+a+"(int row, int col) {\n        return "+a+"("+Z(["row","col"],l)+");\n      }\n    "}if(1===o)return"\n    float "+a+"(int row, int col) {\n      int index = row * "+e[1]+" + col;\n      vec2 uv = vec2(0.5, (float(index) + 0.5) / "+i+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ";if(1===i)return"\n    float "+a+"(int row, int col) {\n      int index = row * "+e[1]+" + col;\n      vec2 uv = vec2((float(index) + 0.5) / "+o+".0, 0.5);\n      return sampleTexture("+r+", uv);\n    }\n  ";return"\n  float "+a+"(int row, int col) {\n    vec2 uv = UVfrom2D("+i+", "+o+", "+e[1]+", row, col);\n    return sampleTexture("+r+", uv);\n  }\n"}(t);case 3:return function(t){var e=t.shapeInfo.texShape,n=t.shapeInfo.logicalShape,r=t.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e[0],o=e[1],s=n[1]*n[2],u=n[2],l=y.squeezeShape(n),c=l.newShape,p=l.keptDims,f=c;if(f.length<n.length){var h=Q(t,f);return"\n        "+q(h)+"\n        float "+a+"(int row, int col, int depth) {\n          return "+a+"("+Z(["row","col","depth"],p)+");\n        }\n      "}if(o===s)return"\n        float "+a+"(int row, int col, int depth) {\n          int texR = row;\n          int texC = col * "+u+" + depth;\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+o+".0, "+i+".0);\n          return sampleTexture("+r+", uv);\n        }\n      ";if(o===u)return"\n    float "+a+"(int row, int col, int depth) {\n      int texR = row * "+n[1]+" + col;\n      int texC = depth;\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+o+".0, "+i+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ";return"\n      float "+a+"(int row, int col, int depth) {\n        vec2 uv = UVfrom3D(\n            "+i+", "+o+", "+s+", "+u+", row, col, depth);\n        return sampleTexture("+r+", uv);\n      }\n  "}(t);case 4:return function(t){var e=t.shapeInfo.logicalShape,n=t.shapeInfo.texShape,r=t.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[0],o=n[1],s=e[3],u=e[2]*s,l=e[1]*u,c=y.squeezeShape(e),p=c.newShape,f=c.keptDims;if(p.length<e.length){var h=Q(t,p);return"\n      "+q(h)+"\n      float "+a+"(int row, int col, int depth, int depth2) {\n        return "+a+"("+Z(["row","col","depth","depth2"],f)+");\n      }\n    "}if(o===l)return"\n      float "+a+"(int row, int col, int depth, int depth2) {\n        int texR = row;\n        int texC = col * "+u+" + depth * "+s+" + depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+o+".0, "+i+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ";if(o===s)return"\n      float "+a+"(int row, int col, int depth, int depth2) {\n        int texR = row * "+e[1]*e[2]+" + col * "+e[2]+" + depth;\n        int texC = depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+o+".0, "+i+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ";return"\n    float "+a+"(int row, int col, int depth, int depth2) {\n      vec2 uv = UVfrom4D("+i+", "+o+", "+l+", "+u+",\n          "+s+", row, col, depth, depth2);\n      return sampleTexture("+r+", uv);\n    }\n  "}(t);default:throw new Error(n.length+"-D input sampling is not yet supported")}}var G="\n  uniform float NaN;\n\n  const vec4 floatDeltas = vec4(\n      1.0,\n      1.0 / 255.0,\n      1.0 / (255.0 * 255.0),\n      1.0 / (255.0 * 255.0 * 255.0)\n  );\n  const float minValue = "+M+".0;\n  const float maxValue = 20000.0;\n  const float range = (maxValue - minValue) / 255.0;\n  const vec2 dotRange = vec2(1.0, range);\n\n  float sampleTexture(sampler2D textureSampler, vec2 uv) {\n    vec4 sampleValue = texture2D(textureSampler, uv);\n    if (all(equal(sampleValue, vec4("+F+")))) {\n      return NaN;\n    }\n\n    vec4 encValue = floor(sampleValue * 255.0 + 0.5);\n    float decodedValue = dot(encValue, floatDeltas);\n    return dot(vec2(minValue, decodedValue), dotRange);\n  }\n",H="\n  const vec4 floatPowers = vec4(\n    1.0,\n    255.0,\n    255.0 * 255.0,\n    255.0 * 255.0 * 255.0\n  );\n  const vec2 recipRange = vec2(1.0/range);\n  const vec2 recipRange255 = vec2(1.0/(maxValue - minValue));\n\n  void setOutput(float decodedValue) {\n    if (isNaN(decodedValue)) {\n      gl_FragColor = vec4("+F+");\n      return;\n    }\n\n    float a = dot(vec2(decodedValue, -minValue), recipRange);\n    float b = fract(a) * 255.0;\n    float c = fract(b) * 255.0;\n    float d = fract(c) * 255.0;\n    gl_FragColor = floor(vec4(a, b, c, d)) / 255.0;\n\n    // TODO(dsmilkov): Version above gets better accuracy but probably slower\n    // than the version below. Benchmark to determine if the accuracy is worth\n    // the cost.\n\n    // float normValue = dot(vec2(decodedValue, -minValue), recipRange255);\n    // vec4 f = normValue * floatPowers;\n    // gl_FragColor = floor(fract(f) * 255.0) / 255.0;\n  }\n",K="\n  float sampleTexture(sampler2D textureSampler, vec2 uv) {\n    return texture2D(textureSampler, uv).r;\n  }\n",X="\n  void setOutput(float val) {\n    gl_FragColor = vec4(val, 0, 0, 0);\n  }\n",Y="\n  precision highp float;\n  precision highp int;\n  varying vec2 resultUV;\n  const vec2 halfCR = vec2(0.5, 0.5);\n\n  bool isNaN(float val) {\n    float v1 = val * val;\n    float v2 = val * val;\n    return v1 == v2 ? false : true;\n  }\n\n  bool hasNaN(vec4 values) {\n    vec4 v1 = values * values;\n    vec4 v2 = values * values;\n    return any(notEqual(v1, v2));\n  }\n\n  float getNaN(vec4 values) {\n    return dot(vec4(1), values);\n  }\n\n  int round(float value) {\n    return int(floor(value + 0.5));\n  }\n\n  int imod(int x, int y) {\n    return x - y * (x / y);\n  }\n\n  //Based on the work of Dave Hoskins\n  //https://www.shadertoy.com/view/4djSRW\n  #define HASHSCALE1 443.8975\n  float random(float seed){\n    vec2 p = resultUV * seed;\n    vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n  }\n\n  \nvec2 UVfrom1D(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n\n  \nvec2 UVfrom2D(int texNumR, int texNumC, int numC, int row, int col) {\n  int index = row * numC + col;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n\n  \nvec2 UVfrom3D(int texNumR, int texNumC, int stride0,\n    int stride1, int row, int col, int depth) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n\n  \nvec2 UVfrom4D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int row, int col, int depth,\n    int depth2) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n\n";function J(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";throw Error("GPU for rank "+t+" is not yet supported")}function Q(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function Z(t,e){return e.map(function(e){return t[e]}).join(", ")}var $=function(){return function(t,e,n){this.variableNames=["x"],this.outputShape=t;var r=t.length,a=t[t.length-1],i=J(r),o=tt(r,"coords"),s=tt(r,"adjustableCoords"),u=et(r,"coords"),l=et(r,"adjustableCoords"),c=n?"return "+a+" -i - 1;":"return i;",p=n?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+c+"\n      }\n\n      void main() {\n        "+i+" coords = getOutputCoords();\n        "+i+" adjustableCoords = "+i+"("+o+");\n        int finalCoord = int("+u+");\n        float val = 0.0;\n        for (int i = "+a+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+p+" finalCoord) {\n            continue;\n          }\n          if (idx == finalCoord && "+e+") {\n            continue;\n          }\n          "+l+" = idx;\n          val += getX("+s+");\n        }\n        setOutput(val);\n      }\n    "}}();function tt(t,e){if(1===t)return""+e;if(2===t)return e+".x, "+e+".y";if(3===t)return e+".x, "+e+".y, "+e+".z";if(4===t)return e+".x, "+e+".y, "+e+".z, "+e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}function et(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}var nt=function(){return function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.inHeight,n=t.inWidth,r=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,s=t.dilationHeight,u=t.dilationWidth,l=t.filterHeight,c=t.filterWidth,p=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 strides = ivec2("+i+", "+o+");\n      const ivec2 pads = ivec2("+r+", "+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+p+";\n        int q = d2 - d1 * "+p+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TODO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+l+"; wR++) {\n          int xR = xRCorner + wR * "+s+";\n\n          if (xR < 0 || xR >= "+e+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+c+"; wC++) {\n            int xC = xCCorner + wC * "+u+";\n\n            if (xC < 0 || xC >= "+n+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "}}(),rt=function(){return function(t){this.variableNames=["A"];var e=t[0],n=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+n+".0, "+e+".0);\n\n        vec4 values = texture2D(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    "}}(),at=function(){return function(t,e,n){this.variableNames=["A","indices"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var a=J(this.rank),i=function(t,e){var n=t.length;if(n>4)throw Error("Gather for rank "+n+" is not yet supported");if(1===n)return"int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=0;i<t.length;i++)i===e?a.push("int(getIndices("+r[i]+"))"):a.push(""+r[i]);return a.join()}(t,n);this.userCode="\n      void main() {\n        "+a+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "}}();var it=null;function ot(t){var e=document.createElement("canvas");return e.width=1,e.height=1,st(e,t)}function st(t,e){var n,r=l.ENV.get("WEBGL_VERSION");if(2===r?n=t.getContext("webgl2",e):1===r&&(n=t.getContext("webgl",e)||t.getContext("experimental-webgl",e)),0===r||null==n)throw new Error("This browser does not support WebGL.");return n}function ut(t,e){var n=e();return pt(t),n}var lt=!1;function ct(t){lt=t}function pt(t){if(lt){var e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+ft(t,e))}}function ft(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}function ht(t,e){return Lt(t,function(){return t.getExtension(e)},'Extension "'+e+'" not supported on this browser.')}function dt(t,e){var n=Lt(t,function(){return t.createShader(t.VERTEX_SHADER)},"Unable to create vertex WebGLShader.");if(ut(t,function(){return t.shaderSource(n,e)}),ut(t,function(){return t.compileShader(n)}),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function mt(t,e){var n=Lt(t,function(){return t.createShader(t.FRAGMENT_SHADER)},"Unable to create fragment WebGLShader.");if(ut(t,function(){return t.shaderSource(n,e)}),ut(t,function(){return t.compileShader(n)}),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){var n=gt.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);for(var r=+n[1],a=t.split("\n"),i=a.length.toString().length+2,o=a.map(function(t,e){return y.rightPad((e+1).toString(),i)+t}),s=0,u=0;u<o.length;u++)s=Math.max(o[u].length,s);var l=o.slice(0,r-1),c=o.slice(r-1,r),p=o.slice(r);console.log(l.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+y.rightPad(c[0],s),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(p.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}var gt=/ERROR: [0-9]+:([0-9]+):/g;function yt(t){return Lt(t,function(){return t.createProgram()},"Unable to create WebGLProgram.")}function vt(t,e){if(ut(t,function(){return t.linkProgram(e)}),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}function bt(t,e){if(ut(t,function(){return t.validateProgram(e)}),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function wt(t,e){var n=Lt(t,function(){return t.createBuffer()},"Unable to create WebGLBuffer");return ut(t,function(){return t.bindBuffer(t.ARRAY_BUFFER,n)}),ut(t,function(){return t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)}),n}function xt(t,e){var n=Lt(t,function(){return t.createBuffer()},"Unable to create WebGLBuffer");return ut(t,function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n)}),ut(t,function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)}),n}function Ot(t){return null!=it?it:it=ut(t,function(){return t.getParameter(t.MAX_TEXTURE_SIZE)})}function Nt(){return l.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")&&2===l.ENV.get("WEBGL_VERSION")?1:4}function St(t){return Lt(t,function(){return t.createTexture()},"Unable to create WebGLTexture.")}function Et(t,e,n){var r=Ot(t);if(e<=0||n<=0){var a="["+e+"x"+n+"]";throw new Error("Requested texture size "+a+" is invalid.")}if(e>r||n>r){a="["+e+"x"+n+"]";throw new Error("Requested texture size "+a+" greater than WebGL maximum on this browser / GPU "+("["+r+"x"+r+"]")+".")}}function At(t){return Lt(t,function(){return t.createFramebuffer()},"Unable to create WebGLFramebuffer.")}function It(t,e,n,r,a,i,o){var s=t.getAttribLocation(e,n);return-1!==s&&(ut(t,function(){return t.bindBuffer(t.ARRAY_BUFFER,r)}),ut(t,function(){return t.vertexAttribPointer(s,a,t.FLOAT,!1,i,o)}),ut(t,function(){return t.enableVertexAttribArray(s)}),!0)}function Tt(t,e,n){Ft(t,n),ut(t,function(){return t.activeTexture(t.TEXTURE0+n)}),ut(t,function(){return t.bindTexture(t.TEXTURE_2D,e)})}function kt(t,e){Ft(t,e),ut(t,function(){return t.activeTexture(t.TEXTURE0+e)}),ut(t,function(){return t.bindTexture(t.TEXTURE_2D,null)})}function Pt(t,e,n){return Lt(t,function(){return t.getUniformLocation(e,n)},'uniform "'+n+'" not present in program.')}function Rt(t,e,n){return t.getUniformLocation(e,n)}function Ct(t,e,n,r,a){ut(t,function(){return Tt(t,n,a)}),ut(t,function(){return t.uniform1i(r,a)})}function Dt(t){ut(t,function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)}),ut(t,function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)}),ut(t,function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)})}function _t(t,e,n){ut(t,function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)}),ut(t,function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)})}function Mt(t,e){ut(t,function(){return t.bindFramebuffer(t.FRAMEBUFFER,e)}),ut(t,function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)})}function zt(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+jt(t,e))}function jt(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}function Lt(t,e,n){var r=ut(t,function(){return e()});if(null==r)throw new Error(n);return r}function Ft(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error("textureUnit must be in "+("[gl.TEXTURE0, gl.TEXTURE"+n+"]")+".")}function Vt(t,e){2!==e.length&&(e=y.squeezeShape(e).newShape);var n=Ot(t),r=y.sizeFromShape(e);return e.length<=1&&r<=n?[r,1]:2===e.length&&e[0]<=n&&e[1]<=n?e:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?[e[0],e[1]*e[2]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n?[e[0],e[1]*e[2]*e[3]]:y.sizeToSquarishShape(r)}var Bt=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},Ut=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};function Wt(){return{alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0}}function qt(t){var e,n={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};return ut(e=null!=t?st(t,n):ot(n),function(){return e.disable(e.DEPTH_TEST)}),ut(e,function(){return e.disable(e.STENCIL_TEST)}),ut(e,function(){return e.disable(e.BLEND)}),ut(e,function(){return e.disable(e.DITHER)}),ut(e,function(){return e.disable(e.POLYGON_OFFSET_FILL)}),ut(e,function(){return e.disable(e.SAMPLE_COVERAGE)}),ut(e,function(){return e.enable(e.SCISSOR_TEST)}),ut(e,function(){return e.enable(e.CULL_FACE)}),ut(e,function(){return e.cullFace(e.BACK)}),e}function Gt(t){return dt(t,"\n    precision highp float;\n    attribute vec3 clipSpacePos;\n    attribute vec2 uv;\n    varying vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function Ht(t){return wt(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Kt(t){return xt(t,new Uint16Array([0,1,2,2,1,3]))}function Xt(t,e){return l.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")&&2===l.ENV.get("WEBGL_VERSION")?4===e?t.RGBA:t.RED:t.RGBA}function Yt(t){return l.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")?t.FLOAT:t.UNSIGNED_BYTE}function Jt(t,e,n,r){Et(t,e,n);var a=St(t),i=t.TEXTURE_2D,o=function(t,e){return l.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")&&2===l.ENV.get("WEBGL_VERSION")?4===e?t.RGBA32F:t.R32F:t.RGBA}(t,r),s=Xt(t,r);return ut(t,function(){return t.bindTexture(i,a)}),ut(t,function(){return t.texParameteri(i,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)}),ut(t,function(){return t.texParameteri(i,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)}),ut(t,function(){return t.texParameteri(i,t.TEXTURE_MIN_FILTER,t.NEAREST)}),ut(t,function(){return t.texParameteri(i,t.TEXTURE_MAG_FILTER,t.NEAREST)}),ut(t,function(){return t.texImage2D(i,0,o,e,n,0,s,Yt(t),null)}),ut(t,function(){return t.bindTexture(t.TEXTURE_2D,null)}),a}function Qt(t,e,n){var r=D(e,n);return Jt(t,r[0],r[1],1)}function Zt(t,e,n){var r=function(t,e){return[4*e,t]}(e,n);return Jt(t,r[0],r[1],4)}function $t(t,e,n){var r=B(e,n);return Jt(t,r[0],r[1],4)}function te(t,e,n){return ut(t,function(){return t.bindBuffer(t.ARRAY_BUFFER,n)}),It(t,e,"clipSpacePos",n,3,20,0)&&It(t,e,"uv",n,2,20,12)}function ee(t,e,n){ut(t,function(){return t.bindTexture(t.TEXTURE_2D,e)}),ut(t,function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)}),ut(t,function(){return t.bindTexture(t.TEXTURE_2D,null)})}function ne(t,e,n,r,a,i){var o=Xt(t,i);Et(t,n,r),ut(t,function(){return t.bindTexture(t.TEXTURE_2D,e)}),ut(t,function(){return t.texSubImage2D(t.TEXTURE_2D,0,0,0,n,r,o,Yt(t),a)}),ut(t,function(){return t.bindTexture(t.TEXTURE_2D,null)})}function re(t,e,n,r,a,i){var o,s=D(n,r),u=s[0],c=s[1];if(l.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")){var p=1===i?Nt():i;1===p?o=a:function(t,e,n){var r=_(t.length,n);if(e.length<r)throw new Error("unpackedArray length ("+e.length+") must be >= "+r);for(var a=0,i=0;i<t.length;++i)e[a]=t[i],a+=n}(a,o=new Float32Array(_(a.length,p)),p)}else o=function(t){for(var e=new Uint8Array(4*t.length),n=function(n){var r=t[n/4];if(isNaN(r))return e[n]=F,e[n+1]=F,e[n+2]=F,e[n+3]=F,"continue";var a=(r-M)/z,i=L.map(function(t){return t*a}).map(function(t){return Math.floor(t%1*255)});e[n]=Math.floor(a),e[n+1]=i[0],e[n+2]=i[1],e[n+3]=i[2]},r=0;r<e.length;r+=4)n(r);return e}(a);ne(t,e,u,c,o,i)}function ae(t,e,n,r,a){var i=B(n,r),o=i[0],s=i[1],u=new Float32Array(U(n,r));!function(t,e,n,r){var a=U(e,n);if(r.length<a)throw new Error("packedRGBA length ("+r.length+") must be >= "+a);for(var i=B(e,n),o=i[0],s=i[1],u=n%2==1,l=e%2==1,c=Math.floor(n/2),p=Math.floor(e/2),f=u?4:0,h=n,d=0,m=0;m<p;++m){for(var g=2*m*n,y=0;y<c;++y){var v=g+2*y;r[d]=t[v],r[d+1]=t[v+1],r[d+2]=t[v+h],r[d+3]=t[v+h+1],d+=4}d+=f}if(u){v=n-1,d=4*(o-1);var b=2*n;for(f=4*o,m=0;m<p;++m)r[d]=t[v],r[d+2]=t[v+n],v+=b,d+=f}if(l)for(v=(e-1)*n,d=(s-1)*o*4,y=0;y<c;++y)r[d++]=t[v++],r[d++]=t[v++],d+=2;u&&l&&(r[r.length-4]=t[t.length-1])}(a,n,r,u);ne(t,e,o,s,u,4)}function ie(t,e,n){return l.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")?new Float32Array(_(t*e,n)):new Uint8Array(t*e*n)}function oe(t,e,n,r){if(l.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")){var a=new Float32Array(e*n);return V(t,a,r),a}return function(t){for(var e=new Float32Array(t.length/4),n=function(n){if(t[n]===F&&t[n+1]===F&&t[n+2]===F&&t[n+3]===F)return e[n/4]=NaN,"continue";var r=0;j.forEach(function(e,a){r+=e*t[n+a]});var a=r*z+M;e[n/4]=a},r=0;r<t.length;r+=4)n(r);return e}(t)}function se(t,e,n,r){return Bt(this,void 0,void 0,function(){var a,i,o,s,u;return Ut(this,function(l){switch(l.label){case 0:return a=t,o=ie(n,r,i=4),s=o instanceof Float32Array?4*o.length:o,u=t.createBuffer(),ut(t,function(){return t.bindBuffer(a.PIXEL_PACK_BUFFER,u)}),ut(t,function(){return t.bufferData(a.PIXEL_PACK_BUFFER,s,t.STATIC_DRAW)}),ut(t,function(){return a.readPixels(0,0,r,n,t.RGBA,Yt(t),0)}),[4,e.getBufferSubDataAsync(a.PIXEL_PACK_BUFFER,0,o)];case 1:return l.sent(),[2,oe(o,n,r,i)]}})})}function ue(t,e,n){var r=D(e,n),a=r[0],i=r[1],o=ie(e,n,4);return ut(t,function(){return t.readPixels(0,0,a,i,t.RGBA,Yt(t),o)}),oe(o,e,n,4)}function le(t,e,n,r){var a=e*n*4,i=new Uint8Array(a);ut(t,function(){return t.readPixels(0,0,n,e,t.RGBA,t.UNSIGNED_BYTE,i)});for(var o=new Float32Array(a),s=0;s<i.length;s++)o[s]=i[s];var u=new Float32Array(e*n*r);return function(t,e,n){var r=t.length*n/4;if(e.length<r)throw new Error("matrix length ("+e.length+") must be >= "+r);for(var a=0,i=0;i<t.length;i+=4)for(var o=0;o<n;o++)e[a++]=t[i+o]}(o,u,r),u}function ce(t,e,n){var r=B(e,n),a=r[0],i=r[1],o=new Float32Array(U(e,n));ut(t,function(){return t.readPixels(0,0,a,i,t.RGBA,Yt(t),o)});var s=new Float32Array(e*n);return function(t,e,n,r){var a=e*n;if(a<r.length)throw new Error("matrix length ("+r.length+") must be >= "+a);for(var i=n%2==1,o=e%2==1,s=Math.floor(n/2),u=Math.floor(e/2),l=B(e,n),c=l[0],p=l[1],f=i?4:0,h=n+(i?1:0),d=0,m=0,g=n,y=0;y<u;++y){for(var v=0;v<s;++v)r[m++]=t[d++],r[m++]=t[d++],r[g++]=t[d++],r[g++]=t[d++];d+=f,m+=h,g+=h}if(i){d=4*(c-1);var b=n-1;for(f=4*c,h=2*n,y=0;y<u;++y)r[b]=t[d],r[b+n]=t[d+2],d+=f,b+=h}if(o)for(d=(p-1)*c*4,b=(e-1)*n,v=0;v<s;++v)r[b++]=t[d++],r[b++]=t[d++],d+=2;return i&&o&&(r[r.length-1]=t[t.length-4]),r}(o,e,n,s)}var pe=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},fe=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},he=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.autoDebugValidate=!1,this.vertexAttrsAreBound=!1,this.gl=null!=t?t:qt(),1===l.ENV.get("WEBGL_VERSION")?(this.textureFloatExtension=ht(this.gl,"OES_texture_float"),this.colorBufferFloatExtension=this.gl.getExtension("WEBGL_color_buffer_float")):this.colorBufferFloatExtension=ht(this.gl,"EXT_color_buffer_float"),this.loseContextExtension=ht(this.gl,"WEBGL_lose_context"),l.ENV.get("WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED")&&(this.getBufferSubDataAsyncExtension=this.gl.getExtension("WEBGL_get_buffer_sub_data_async")),this.vertexBuffer=Ht(this.gl),this.indexBuffer=Kt(this.gl),this.framebuffer=At(this.gl)}return t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var e=this.gl;ut(e,function(){return e.finish()}),ut(e,function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)}),ut(e,function(){return e.deleteFramebuffer(t.framebuffer)}),ut(e,function(){return e.bindBuffer(e.ARRAY_BUFFER,null)}),ut(e,function(){return e.deleteBuffer(t.vertexBuffer)}),ut(e,function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)}),ut(e,function(){return e.deleteBuffer(t.indexBuffer)}),this.loseContextExtension.loseContext(),this.disposed=!0}},t.prototype.enableAutomaticDebugValidation=function(t){this.autoDebugValidate=t,ct(t)},t.prototype.createMatrixTexture=function(t,e){return this.throwIfDisposed(),Qt(this.gl,t,e)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),ee(this.gl,t,e)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),$t(this.gl,t,e)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(Mt(this.gl,this.framebuffer),this.outputTexture=null),ut(this.gl,function(){return e.gl.deleteTexture(t)})},t.prototype.uploadMatrixToTexture=function(t,e,n,r){this.throwIfDisposed();return re(this.gl,t,e,n,r,1)},t.prototype.uploadMatrixToPackedTexture=function(t,e,n,r){return this.throwIfDisposed(),ae(this.gl,t,e,n,r)},t.prototype.downloadMatrixFromTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,function(){return ue(r.gl,e,n)})},t.prototype.downloadMatrixFromTextureAsync=function(t,e,n){return pe(this,void 0,void 0,function(){var r=this;return fe(this,function(a){if(null==this.getBufferSubDataAsyncExtension)throw new Error("Cannot download matrix from output texture asynchronously, WEBGL_get_buffer_sub_data_async is not enabled.");return[2,this.downloadMatrixDriverAsync(t,function(){return se(r.gl,r.getBufferSubDataAsyncExtension,e,n)})]})})},t.prototype.downloadMatrixFromRGBAColorTexture=function(t,e,n,r){var a=this;return this.downloadMatrixDriver(t,function(){return le(a.gl,e,n,r)})},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,function(){return ce(r.gl,e,n)})},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=mt(e,t),r=Gt(e),a=yt(e);return ut(e,function(){return e.attachShader(a,r)}),ut(e,function(){return e.attachShader(a,n)}),vt(e,a),this.autoDebugValidate&&bt(e,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=te(e,this.program,this.vertexBuffer)),a},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&ut(this.gl,function(){return e.gl.deleteProgram(t)})},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.autoDebugValidate&&bt(this.gl,this.program),ut(this.gl,function(){return e.gl.useProgram(t)})},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?Pt(this.gl,t,e):Rt(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),ut(this.gl,function(){return n.gl.getAttribLocation(t,e)})},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),Ct(this.gl,this.program,t,e,n)},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=B(e,n),a=r[0],i=r[1];this.setOutputMatrixTextureDriver(t,a,i)},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},t.prototype.debugValidate=function(){null!=this.program&&bt(this.gl,this.program),zt(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.autoDebugValidate&&this.debugValidate(),ut(t,function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)})},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),ut(this.gl,function(){return t.gl.finish()})},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=ht(this.gl,2===l.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.runQuery=function(t){var e=this.beginQuery();return t(),this.endQuery(),this.pollQueryTime(e)},t.prototype.beginQuery=function(){if(2===l.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),a=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,a),a},t.prototype.endQuery=function(){if(2!==l.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT)}},t.prototype.isQueryAvailable=function(t,e){if(0===e)return!0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),a=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE),i=this.gl.getParameter(r.GPU_DISJOINT_EXT);return a&&!i}a=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT),i=this.gl.getParameter(r.GPU_DISJOINT_EXT);return a&&!i},t.prototype.pollQueryTime=function(t){var e=this;return new Promise(function(n,r){var a=l.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION");y.repeatedTry(function(){return e.isQueryAvailable(t,a)}).then(function(){return n(e.getQueryTime(t,a))}).catch(function(){console.warn("Disjoint query timer never available."),n(-1)})})},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.downloadMatrixDriverSetup=function(t){this.throwIfDisposed(),_t(this.gl,t,this.framebuffer),this.autoDebugValidate&&zt(this.gl)},t.prototype.downloadMatrixDriverTeardown=function(){null!=this.outputTexture?(_t(this.gl,this.outputTexture,this.framebuffer),this.autoDebugValidate&&zt(this.gl)):Mt(this.gl,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,e){this.downloadMatrixDriverSetup(t);var n=e();return this.downloadMatrixDriverTeardown(),n},t.prototype.downloadMatrixDriverAsync=function(t,e){return pe(this,void 0,void 0,function(){var n;return fe(this,function(r){switch(r.label){case 0:return this.downloadMatrixDriverSetup(t),[4,e()];case 1:return n=r.sent(),this.downloadMatrixDriverTeardown(),[2,n]}})})},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;_t(r,t,this.framebuffer),this.autoDebugValidate&&zt(r),this.outputTexture=t,ut(r,function(){return r.viewport(0,0,e,n)}),ut(r,function(){return r.scissor(0,0,e,n)})},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var a=this;this.throwIfDisposed(),ut(this.gl,function(){return a.gl.scissor(t,e,n,r)})},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},t}(),de="NaN";function me(){return!l.ENV.get("WEBGL_FLOAT_TEXTURE_ENABLED")}function ge(t,e){if(t.length!==e.length)throw Error("Binary was compiled with "+t.length+" inputs, but was executed with "+e.length+" inputs");t.forEach(function(t,n){var r=t.logicalShape,a=t.texShape,i=e[n].tensor.shape,o=e[n].texData.texShape;if(!y.arraysEqual(r,i))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+i+" must match");if(!y.arraysEqual(a,o))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+a+" and "+o+" must match")})}var ye=function(){return function(t,e,n){var r,a;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error("Where for rank "+n+" is not yet supported");if(1===n)a="resRC",r="resRC";else{for(var i=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],s=[],u=0;u<e.length;u++)s.push(""+i[u]),u<t&&o.push(""+i[u]);r=o.join(),a=s.join()}var l=J(n);this.userCode="\n      void main() {\n        "+l+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+a+"));\n        } else {\n          setOutput(getB("+a+"));\n        }\n      }\n    "}}(),ve=function(){return function(t,e,n,r,a){this.variableNames=["x"],this.outputShape=[];var i,o=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";i=.5===a?"inversesqrt("+u+")":1===a?"1.0/("+u+")":"exp(log("+u+") * float(-"+a+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+o+"; j <= "+o+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+s+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+i+";\n        setOutput(val);\n      }\n    "}}(),be=function(){return function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,a=t.strideWidth,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,s=e*n-1;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+o+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+a+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+s+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+n+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "}}(),we=function(){return function(t,e,n,r){void 0===n&&(n=!1),void 0===r&&(r=!1),this.variableNames=["matrixA","matrixB"];var a=n?t[1]:t[0],i=r?e[0]:e[1],o=n?t[0]:t[1];this.outputShape=[a,i];var s=function(t,e){return n?e+" + "+t+", aRow":"aRow, "+e+" + "+t},u=function(t,e){return r?"bCol, "+e+" + "+t:e+" + "+t+", bCol"},l=4*Math.floor(o/4),c=o%4;this.userCode=" float dotARowBCol(int aRow, int bCol) {\n      float result = 0.0;\n      for (int i = 0; i < "+l+"; i += 4) {\n        vec4 a = vec4(\n          getMatrixA("+s(0,"i")+"),\n          getMatrixA("+s(1,"i")+"),\n          getMatrixA("+s(2,"i")+"),\n          getMatrixA("+s(3,"i")+")\n        );\n        vec4 b = vec4(\n          getMatrixB("+u(0,"i")+"),\n          getMatrixB("+u(1,"i")+"),\n          getMatrixB("+u(2,"i")+"),\n          getMatrixB("+u(3,"i")+")\n        );\n\n        result += dot(a, b);\n      }\n\n      if ("+(1===c)+") {\n        result += getMatrixA("+s(0,l)+") *\n          getMatrixB("+u(0,l)+");\n      } else if ("+(2===c)+") {\n        vec2 a = vec2(\n          getMatrixA("+s(0,l)+"),\n          getMatrixA("+s(1,l)+")\n        );\n        vec2 b = vec2(\n          getMatrixB("+u(0,l)+"),\n          getMatrixB("+u(1,l)+")\n        );\n        result += dot(a, b);\n      } else if ("+(3===c)+") {\n        vec3 a = vec3(\n          getMatrixA("+s(0,l)+"),\n          getMatrixA("+s(1,l)+"),\n          getMatrixA("+s(2,l)+")\n        );\n        vec3 b = vec3(\n          getMatrixB("+u(0,l)+"),\n          getMatrixB("+u(1,l)+"),\n          getMatrixB("+u(2,l)+")\n        );\n        result += dot(a, b);\n      }\n\n      return result;\n    }\n\n    void main() {\n      ivec2 resRC = getOutputCoords();\n      setOutput(dotARowBCol(resRC.x, resRC.y));\n    }\n    "}}(),xe=function(){function t(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(e-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(e-1)+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,"seed")),n.gl.uniform1f(e.seedLoc,t)}},t}(),Oe=function(){return function(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+n+"),\n                      float(index == coords.y)));\n      }\n    "}}(),Ne=function(){return function(t,e,n){this.variableNames=["x"],this.outputShape=e.map(function(e,n){return e[0]+t[n]+e[1]});var r=t.length,a=J(r),i=e.map(function(t){return t[0]}).join(","),o=e.map(function(e,n){return e[0]+t[n]}).join(","),s=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+a+" start = "+a+"("+i+");\n      "+a+" end = "+a+"("+o+");\n\n      void main() {\n        "+a+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+n+"));\n        } else {\n          "+a+" coords = outC - start;\n          setOutput(getX("+s+"));\n        }\n      }\n    ":"\n        int start = "+i+";\n        int end = "+o+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+n+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      "}}(),Se=function(){return function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterHeight,a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,s=t.padInfo.top,u=t.padInfo.left;this.outputShape=t.outShape;var l="avg"===e,c="0.0";if(l||(c="-1.0 / 0.0"),n)this.userCode="\n        const ivec2 strides = ivec2("+i+", "+o+");\n        const ivec2 pads = ivec2("+s+", "+u+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+r+"; wR++) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+a+"; wC++) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * "+a+" + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var p=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(p="avgValue / count");var f=4*Math.floor(a/4),h=a%4,d="\n      if ("+l+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+i+", "+o+");\n      const ivec2 pads = ivec2("+s+", "+u+");\n      const float initializationValue = "+c+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+c+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+r+"; wR++) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+f+"; wC += 4) {\n            int xC = xCCorner + wC;\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              getValue(batch, xR, xC + 2, d),\n              getValue(batch, xR, xC + 3, d)\n            );\n\n            "+d+"\n          }\n\n          int xC = xCCorner + "+f+";\n          if ("+(1===h)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+d+"\n          } else if ("+(2===h)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+d+"\n          } else if ("+(3===h)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              getValue(batch, xR, xC + 2, d),\n              initializationValue\n            );\n\n            "+d+"\n          }\n        }\n        setOutput("+p+");\n      }\n    "}}}(),Ee=function(){return function(t,e){this.variableNames=["x"];var n=t.windowSize,r=t.batchSize,a=t.inSize,i=Math.ceil(a/n);this.outputShape=[r,i];var o="sum"===e,s="0.0";o||(s="min"===e?"1.0 / 0.0":"-1.0 / 0.0");var u="min"===e?"min":"max",l=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===e&&(l="sumValue");var c=4*Math.floor(n/4),p=n%4,f="\n      if ("+o+") {\n        sumValue += dot(values, ones);\n      } else {\n        minMaxValue = "+u+"(values, minMaxValue);\n      }\n    ",h="";a%n>0&&(h="\n        if (inIdx < 0 || inIdx >= "+a+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+s+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+h+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+n+";\n\n        vec4 minMaxValue = vec4("+s+");\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+c+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+f+"\n        }\n\n        int inIdx = inOffset + "+c+";\n        if ("+(1===p)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n          "+f+"\n        } else if ("+(2===p)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n          "+f+"\n        } else if ("+(3===p)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n          "+f+"\n        }\n        setOutput("+l+");\n      }\n    "}}(),Ae=function(){return function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,a=r[1],i=r[2],o=t.shape,s=o[1],u=o[2],l=[n&&s>1?a-1:a,n&&u>1?i-1:i],c=[n&&s>1?s-1:s,n&&u>1?u-1:u],p=l[0]/c[0],f=l[1]/c[1],h=1/p,d=1/f,m=2*Math.ceil(h)+2,g=2*Math.ceil(d)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+p+");\n        const float widthScale = float("+f+");\n\n        const float invHeightScale = float("+h+");\n        const float invWidthScale = float("+d+");\n\n        const int winHeight = int("+m+");\n        const int winWidth = int("+g+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(a-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(i-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "}}(),Ie=function(){return function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var a=t[0],i=t[1],o=t[2],s=t[3];this.outputShape=[a,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?o-1:o],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/l[0]+",\n          "+u[1]/l[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+o+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "}}(),Te=function(){return function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var a=t[0],i=t[1],o=t[2],s=t[3];this.outputShape=[a,e,n,s];var u=r?[i-1,o-1]:[i,o],l=r?[e-1,n-1]:[e,n],c=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/l[0]+",\n          "+u[1]/l[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+o+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+c+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    "}}(),ke=function(){return function(t,e){this.variableNames=["x"];var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");if(this.outputShape=t,1!==n){var r=t.map(function(n,r){return function(n){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - coords["+n+"] - 1":"coords["+n+"]"}(r)}).join(","),a=J(n);this.userCode="\n      void main() {\n        "+a+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    "}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+t[0]+" - coord - 1));\n        }\n      "}}(),Pe=function(){function t(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var e=J(this.rank),n=function(t){if(1===t)return"sourceLoc";if(2===t)return"sourceLoc.x, sourceLoc.y";if(3===t)return"sourceLoc.x, sourceLoc.y, sourceLoc.z";if(4===t)return"sourceLoc.x, sourceLoc.y, sourceLoc.z, sourceLoc.w";throw Error("Slicing for rank "+t+" is not yet supported")}(this.rank);this.userCode="\n      uniform "+e+" start;\n\n      void main() {\n        "+e+" sourceLoc = start + getOutputCoords();\n        setOutput(getSource("+n+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){if(null!=e.startLoc||(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null!=e.startLoc))if(1===e.rank)n.gl.uniform1i(e.startLoc,t[0]);else if(2===e.rank)n.gl.uniform2i(e.startLoc,t[0],t[1]);else if(3===e.rank)n.gl.uniform3i(e.startLoc,t[0],t[1],t[2]);else{if(4!==e.rank)throw Error("Slicing for rank "+e.rank+" is not yet supported");n.gl.uniform4i(e.startLoc,t[0],t[1],t[2],t[3])}}},t}();var Re=function(){return function(t,e,n){this.variableNames=["x"],this.outputShape=n,this.rank=n.length;var r=J(this.rank),a="";a=1===this.rank?"coords * strides + begin":n.map(function(t,e){return"coords["+e+"] * strides["+e+"] + begin["+e+"]"}).join(","),this.userCode="\n      "+r+" begin = "+r+"("+t+");\n      "+r+" strides = "+r+"("+e+");\n\n      void main() {\n        "+r+" coords = getOutputCoords();\n        setOutput(getX("+a+"));\n      }\n    "}}(),Ce=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.allocatedTextures=[],this.usedTextureCount={}}return t.prototype.acquireTexture=function(t,e){void 0===e&&(e=x.FLOAT);var n=De(t,e);if(n in this.freeTextures||(this.freeTextures[n]=[]),n in this.usedTextureCount||(this.usedTextureCount[n]=0),this.usedTextureCount[n]++,this.freeTextures[n].length>0)return this.numFreeTextures--,this.numUsedTextures++,this.log(),this.freeTextures[n].shift();this.numUsedTextures++,this.log();var r=this.gpgpu.createMatrixTexture(t[0],t[1]);return this.allocatedTextures.push(r),r},t.prototype.releaseTexture=function(t,e,n){void 0===n&&(n=x.FLOAT);var r=De(e,n);r in this.freeTextures||(this.freeTextures[r]=[]),this.freeTextures[r].push(t),this.numFreeTextures++,this.numUsedTextures--,this.usedTextureCount[r]--,this.log()},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+t+")")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;null!=this.allocatedTextures&&(this.allocatedTextures.forEach(function(e){t.gpgpu.deleteMatrixTexture(e)}),this.freeTextures=null,this.allocatedTextures=null,this.usedTextureCount=null,this.numUsedTextures=0,this.numFreeTextures=0)},t}();function De(t,e){return t[0]+"_"+t[1]+"_"+e}var _e=function(){return function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var a=J(this.rank),i=function(t){var e=t.length;if(e>4)throw Error("Tile for rank "+e+" is not yet supported");if(1===e)return"imod(resRC, "+t[0]+")";for(var n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],a=0;a<t.length;a++)r.push("imod("+n[a]+", "+t[a]+")");return r.join()}(t);this.userCode="\n      void main() {\n        "+a+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "}}();var Me=function(){return function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var a=J(this.rank),i=function(t){var e=t.length;if(e>4)throw Error("Transpose for rank "+e+" is not yet supported");for(var n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=new Array(e),a=0;a<t.length;a++)r[t[a]]=n[a];return r.join()}(e);this.userCode="\n    void main() {\n      "+a+" resRC = getOutputCoords();\n      setOutput(getA("+i+"));\n    }\n    "}}();var ze=n(16),je=function(){return function(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      float unaryOperation(float x) {\n        "+e+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "}}(),Le="if (isNaN(x)) return x;",Fe=Le+"\n  return (x < 0.0) ? 0.0 : x;\n",Ve="\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = "+ze.b+";\n  float scale = "+ze.a+";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";var Be=Le+"\n  return atan(x);\n",Ue=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},We=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},qe=function(){function t(t,e){if(void 0===e&&(e=!0),this.gpgpu=t,this.delayedStorage=e,this.texData=new WeakMap,this.uploadWaitMs=0,this.downloadWaitMs=0,this.binaryCache={},this.disposed=!1,l.ENV.get("WEBGL_VERSION")<1)throw new Error("WebGL is not supported on this device");"undefined"!=typeof document&&(this.canvas=document.createElement("canvas")),null==t?(this.gpgpu=new he(qt(this.canvas)),this.gpgpuCreatedLocally=!0):this.gpgpuCreatedLocally=!1,this.textureManager=new Ce(this.gpgpu)}return t.prototype.register=function(t,e,n){if(this.texData.has(t))throw new Error("Data buffer is already registered");this.texData.set(t,{shape:e,dtype:n,values:null,texture:null,texShape:null,texType:x.FLOAT})},t.prototype.fromPixels=function(t,e){if(null==t)throw new Error("MathBackendWebGL.writePixels(): pixels can not be null");var n=[t.height,t.width],r=[t.height,t.width,e];if(t instanceof HTMLVideoElement){if(null==this.canvas)throw new Error("Can't read pixels from HTMLImageElement outside the browser.");this.canvas.width=t.width,this.canvas.height=t.height,this.canvas.getContext("2d").drawImage(t,0,0,t.width,t.height),t=this.canvas}var a=m.a.make(n,{},"int32");this.texData.get(a.dataId).texType=x.UNSIGNED_BYTE,this.gpgpu.uploadPixelDataToTexture(this.getTexture(a.dataId),t);var i=new rt(r),o=this.compileAndRun(i,[a]);return a.dispose(),o},t.prototype.write=function(t,e){if(null==e)throw new Error("MathBackendWebGL.write(): values can not be null");this.throwIfNoData(t);var n=this.texData.get(t),r=n.texture,a=n.texShape,i=n.texType;null!=r&&(this.textureManager.releaseTexture(r,a,i),n.texture=null,n.texShape=null),n.values=e,this.delayedStorage||this.uploadToGPU(t)},t.prototype.readSync=function(t){this.throwIfNoData(t);var e=this.texData.get(t),n=e.texture,r=e.values,a=e.texShape;if(null!=r)return this.cacheOnCPU(t),r;var i,o=null!=this.activeTimers;o&&(i=performance.now());var s=this.gpgpu.downloadMatrixFromTexture(n,a[0],a[1]);return o&&(this.downloadWaitMs+=performance.now()-i),this.cacheOnCPU(t,s),e.values},t.prototype.read=function(t){return Ue(this,void 0,void 0,function(){var e,n,r,a,i;return We(this,function(o){switch(o.label){case 0:return this.throwIfNoData(t),e=this.texData.get(t),n=e.texture,r=e.values,a=e.texShape,null!=r?(this.cacheOnCPU(t),[2,r]):l.ENV.get("WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED")?[4,this.gpgpu.downloadMatrixFromTextureAsync(n,a[0],a[1])]:[3,2];case 1:return i=o.sent(),this.cacheOnCPU(t,i),[2,e.values];case 2:return 0===l.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?[2,this.readSync(t)]:[4,this.gpgpu.runQuery(function(){})];case 3:return o.sent(),[2,this.readSync(t)]}})})},t.prototype.time=function(t){return Ue(this,void 0,void 0,function(){var e,n,r,a,i,o;return We(this,function(s){switch(s.label){case 0:return e=this.activeTimers,n=[],r=!1,null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t(),a=y.flatten(this.activeTimers),this.activeTimers=e,r&&(this.programTimersStack=null),[4,Promise.all(a).then(function(t){var e=0;return t.forEach(function(t){return e+=t}),e})];case 1:return i=s.sent(),o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:i,wallMs:null},this.uploadWaitMs=0,this.downloadWaitMs=0,[2,o]}})})},t.prototype.memory=function(){return{unreliable:!1}},t.prototype.startTimer=function(){return l.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?this.gpgpu.beginQuery():{startMs:performance.now(),endMs:null}},t.prototype.endTimer=function(t){return l.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(this.gpgpu.endQuery(),t):(t.endMs=performance.now(),t)},t.prototype.getQueryTime=function(t){return Ue(this,void 0,void 0,function(){var e;return We(this,function(n){return l.ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?[2,this.gpgpu.pollQueryTime(t)]:[2,(e=t).endMs-e.startMs]})})},t.prototype.disposeData=function(t){if(this.texData.has(t)){var e=this.texData.get(t),n=e.texture,r=e.texShape,a=e.texType;null!=n&&this.textureManager.releaseTexture(n,r,a),this.texData.delete(t)}},t.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},t.prototype.getTextureData=function(t){return this.uploadToGPU(t),this.texData.get(t)},t.prototype.getGPGPUContext=function(){return this.gpgpu},t.prototype.getCanvas=function(){return this.canvas},t.prototype.slice=function(t,e,n){var r=new Pe(n),a=r.getCustomSetupFunc(e);return this.compileAndRun(r,[t],null,a)},t.prototype.stridedSlice=function(t,e,n,r,a,i){var o=Object(d.b)(t.shape,e,n,r,a,i),s=o[0],u=o[1];if(u.some(function(t){return 0===t}))return p.tc([],u);var l=new Re(s,r,u);return this.compileAndRun(l,[t])},t.prototype.reverse=function(t,e){var n=new ke(t.shape,e);return this.compileAndRun(n,[t])},t.prototype.concat=function(t,e){var n=new k(t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.neg=function(t){var e=new je(t.shape,"return -x;");return this.compileAndRun(e,[t])},t.prototype.matMul=function(t,e,n,r){var a=new we(t.shape,e.shape,n,r);return this.compileAndRun(a,[t,e])},t.prototype.multiply=function(t,e){var n=new A("return a * b;",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,g.c(t.dtype,e.dtype));return this.compileAndRun(n,[t,e],r)},t.prototype.batchNormalization=function(t,e,n,r,a,i){var o=[t,e,n],s=null;null!=i&&(s=i.shape,o.push(i));var u=null;null!=a&&(u=a.shape,o.push(a));var l=new E(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(l,o)},t.prototype.localResponseNormalization4D=function(t,e,n,r,a){var i=new ve(t.shape,e,n,r,a);return this.compileAndRun(i,[t])},t.prototype.tile=function(t,e){var n=new _e(t.shape,e);return this.compileAndRun(n,[t])},t.prototype.pad=function(t,e,n){var r=new Ne(t.shape,e,n);return this.compileAndRun(r,[t])},t.prototype.transpose=function(t,e){var n=new Me(t.shape,e);return this.compileAndRun(n,[t])},t.prototype.gather=function(t,e,n){var r=new at(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},t.prototype.reduce=function(t,e,n){var r=t.shape[0],a=t.shape[1],i=h(a),o=new Ee({windowSize:i,inSize:a,batchSize:r},e),s=o.outputShape,u=s[0],l=s[1],c=this.makeOutputArray([u,l],n);return this.compileAndRun(o,[t],c),1===c.shape[1]?c:this.reduce(c,e,n)},t.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],a=t.shape[1];null!=n&&(r=n.shape[0],a=n.shape[1]);var i=h(a),o=new O({windowSize:i,inSize:a,batchSize:r},e,null==n),s=o.outputShape,u=s[0],l=s[1],c=this.makeOutputArray([u,l],"int32"),p=[t];return null!=n&&p.push(n),this.compileAndRun(o,p,c),1===c.shape[1]?c:this.argReduce(t,e,c)},t.prototype.sum=function(t,e){c.a("sum",e,t.rank);var n=c.b(t.shape,e),r=n[0],a=n[1],i=y.sizeFromShape(a),o=t.as2D(-1,i),s=g.b(t.dtype);return this.reduce(o,"sum",s).reshape(r)},t.prototype.argMin=function(t,e){var n=[e];c.a("argMin",n,t.rank);var r=c.b(t.shape,n),a=r[0],i=r[1],o=y.sizeFromShape(i),s=t.as2D(-1,o);return this.argReduce(s,"min").reshape(a)},t.prototype.argMax=function(t,e){var n=[e];c.a("argMax",n,t.rank);var r=c.b(t.shape,n),a=r[0],i=r[1],o=y.sizeFromShape(i),s=t.as2D(-1,o);return this.argReduce(s,"max").reshape(a)},t.prototype.cumsum=function(t,e,n,r){var a=new $(t.shape,n,r);return this.compileAndRun(a,[t])},t.prototype.equal=function(t,e){var n=new A("return float(a == b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.notEqual=function(t,e){var n=new A("return float(a != b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.less=function(t,e){var n=new A("return float(a < b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.lessEqual=function(t,e){var n=new A("return float(a <= b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.greater=function(t,e){var n=new A("return float(a > b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.greaterEqual=function(t,e){var n=new A("return float(a >= b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.logicalNot=function(t){var e=new je(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])},t.prototype.logicalAnd=function(t,e){var n=new A("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.logicalOr=function(t,e){var n=new A("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.where=function(t,e,n,r){var a=new ye(t.rank,e.shape,e.rank),i=this.makeOutputArray(a.outputShape,r);return this.compileAndRun(a,[t,e,n],i)},t.prototype.topKValues=function(t,e){throw new Error("topKValues GPU not yet implemented!")},t.prototype.topKIndices=function(t,e){throw new Error("topKIndices GPU not yet implemented!")},t.prototype.min=function(t,e){c.a("min",e,t.rank);var n=c.b(t.shape,e),r=n[0],a=n[1],i=y.sizeFromShape(a),o=t.as2D(-1,i);return this.reduce(o,"min",o.dtype).reshape(r)},t.prototype.minimum=function(t,e){var n=new A("\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.mod=function(t,e){var n=new A("return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.max=function(t,e){c.a("max",e,t.rank);var n=c.b(t.shape,e),r=n[0],a=n[1],i=y.sizeFromShape(a),o=t.as2D(-1,i);return this.reduce(o,"max",o.dtype).reshape(r)},t.prototype.maximum=function(t,e){var n=new A("\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.squaredDifference=function(t,e){var n=new A("return (a - b) * (a - b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.divide=function(t,e){var n,r;"int32"===t.dtype&&"int32"===e.dtype?(n="\n  float resultSign = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  int result = ia / ib;\n  int amodb = ia - ib * result;\n\n  if (resultSign < 0.0 && amodb != 0) {\n    result -= 1;\n  }\n  return float(result);\n",r="int32"):(n="return a / b;",r="float32");var a=new A(n,t.shape,e.shape),i=this.makeOutputArray(a.outputShape,r);return this.compileAndRun(a,[t,e],i)},t.prototype.add=function(t,e){var n=new A("return a + b;",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,g.c(t.dtype,e.dtype));return this.compileAndRun(n,[t,e],r)},t.prototype.subtract=function(t,e){var n=new A("return a - b;",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,g.c(t.dtype,e.dtype));return this.compileAndRun(n,[t,e],r)},t.prototype.pow=function(t,e){var n=new A("\n  return (round(mod(b, 2.0)) == 0 || round(mod(b, 2.0)) == 2) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,g.c(t.dtype,e.dtype));return this.compileAndRun(n,[t,e],r)},t.prototype.ceil=function(t){var e=new je(t.shape,"return ceil(x);");return this.compileAndRun(e,[t])},t.prototype.floor=function(t){var e=new je(t.shape,"return floor(x);");return this.compileAndRun(e,[t])},t.prototype.sign=function(t){var e=new je(t.shape,"\n  if (isNaN(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])},t.prototype.round=function(t){var e=new je(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])},t.prototype.exp=function(t){var e=new je(t.shape,"return exp(x);");return this.compileAndRun(e,[t])},t.prototype.expm1=function(t){var e=new je(t.shape,"return exp(x) - 1.0;");return this.compileAndRun(e,[t])},t.prototype.log=function(t){var e=new je(t.shape,"return log(x);");return this.compileAndRun(e,[t])},t.prototype.log1p=function(t){var e=new je(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])},t.prototype.sqrt=function(t){var e=new je(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])},t.prototype.rsqrt=function(t){var e=new je(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])},t.prototype.square=function(t){var e=new je(t.shape,"return x * x;");return this.compileAndRun(e,[t])},t.prototype.reciprocal=function(t){var e=new je(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])},t.prototype.relu=function(t){var e=new je(t.shape,Fe);return this.compileAndRun(e,[t])},t.prototype.elu=function(t){var e=new je(t.shape,"return (x >= 0.0) ? x : (exp(x) - 1.0);");return this.compileAndRun(e,[t])},t.prototype.eluDer=function(t,e){var n=new A("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.selu=function(t){var e=new je(t.shape,Ve);return this.compileAndRun(e,[t])},t.prototype.int=function(t){var e=new je(t.shape,"return float(int(x));"),n=this.makeOutputArray(e.outputShape,"int32");return this.compileAndRun(e,[t],n)},t.prototype.clip=function(t,e,n){var r=new I(t.shape,e,n);return this.compileAndRun(r,[t])},t.prototype.abs=function(t){var e=new je(t.shape,"return abs(x);");return this.compileAndRun(e,[t])},t.prototype.sigmoid=function(t){var e=new je(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])},t.prototype.softplus=function(t){var e=new je(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])},t.prototype.sin=function(t){var e=new je(t.shape,"return sin(x);");return this.compileAndRun(e,[t])},t.prototype.cos=function(t){var e=new je(t.shape,"return cos(x);");return this.compileAndRun(e,[t])},t.prototype.tan=function(t){var e=new je(t.shape,"return tan(x);");return this.compileAndRun(e,[t])},t.prototype.asin=function(t){var e=new je(t.shape,"return asin(x);");return this.compileAndRun(e,[t])},t.prototype.acos=function(t){var e=new je(t.shape,"return acos(x);");return this.compileAndRun(e,[t])},t.prototype.atan=function(t){var e=new je(t.shape,Be);return this.compileAndRun(e,[t])},t.prototype.atan2=function(t,e){var n=new A("\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.sinh=function(t){var e=new je(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},t.prototype.cosh=function(t){var e=new je(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},t.prototype.tanh=function(t){var e=new je(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])},t.prototype.asinh=function(t){var e=new je(t.shape,"return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])},t.prototype.acosh=function(t){var e=new je(t.shape,"return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])},t.prototype.atanh=function(t){var e=new je(t.shape,"return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])},t.prototype.erf=function(t){var e=new je(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n');return this.compileAndRun(e,[t])},t.prototype.step=function(t,e){var n=new je(t.shape,function(t){return void 0===t&&(t=0),Le+"\n    return x > 0.0 ? 1.0 : float("+t+");\n  "}(e));return this.compileAndRun(n,[t])},t.prototype.conv2d=function(t,e,n){var r=new C(n);return this.compileAndRun(r,[t,e])},t.prototype.conv2dDerInput=function(t,e,n){var r=new R(n);return this.compileAndRun(r,[t,e])},t.prototype.conv2dDerFilter=function(t,e,n){var r=new P(n);return this.compileAndRun(r,[t,e])},t.prototype.depthwiseConv2D=function(t,e,n){var r=new nt(n);return this.compileAndRun(r,[t,e])},t.prototype.maxPool=function(t,e){var n=new Se(e,"max",!1),r=this.makeOutputArray(n.outputShape,t.dtype);return this.compileAndRun(n,[t],r)},t.prototype.avgPool=function(t,e){var n=new Se(e,"avg",!1),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t],r)},t.prototype.maxPoolBackprop=function(t,e,n,r){var a=new Se(r,"max",!0),i=this.compileAndRun(a,[e]),o=new be(r),s=this.makeOutputArray(o.outputShape,e.dtype),u=this.compileAndRun(o,[t,i],s);return i.dispose(),u},t.prototype.avgPoolBackprop=function(t,e,n){var r=new N(n),a=this.makeOutputArray(r.outputShape,e.dtype);return this.compileAndRun(r,[t],a)},t.prototype.cast=function(t,e){return b(t,e,this)},t.prototype.reshape=function(t,e){return w(t,e)},t.prototype.resizeBilinear=function(t,e,n,r){var a=new Ie(t.shape,e,n,r);return this.compileAndRun(a,[t])},t.prototype.resizeBilinearBackprop=function(t,e,n){var r=new Ae(t,e,n);return this.compileAndRun(r,[t])},t.prototype.resizeNearestNeighbor=function(t,e,n,r){var a=new Te(t.shape,e,n,r);return this.compileAndRun(a,[t])},t.prototype.multinomial=function(t,e,n,r){var a=e?t:p.dc(t),i=a.shape[0],o=a.shape[1],s=new xe(i,o,n),u=this.makeOutputArray(s.outputShape,"int32"),l=s.getCustomSetupFunc(r);return this.compileAndRun(s,[a],u,l)},t.prototype.oneHot=function(t,e,n,r){var a=new Oe(t.size,e,n,r);return this.compileAndRun(a,[t])},t.prototype.makeOutputArray=function(t,e){return m.a.make(t,{},e)},t.prototype.compileAndRun=function(t,e,n,r){var a=this;null==n&&(n=this.makeOutputArray(t.outputShape,e[0].dtype));var i=e.map(function(t){return a.uploadToGPU(t.dataId),{tensor:t,texData:a.texData.get(t.dataId)}});this.uploadToGPU(n.dataId);var o,s={tensor:n,texData:this.texData.get(n.dataId)},u=function(t,e,n){var r="";e.concat(n).forEach(function(t){r+=t.tensor.shape+"_"+t.texData.texShape});var a=t.userCode,i=(!0===t.supportsBroadcasting).toString(),o=t.constructor.name;return o+="_"+i+"_"+r+"_"+a}(t,i,s),l=this.getAndSaveBinary(u,function(){return function(t,e,n,r){for(var a=e.userCode,i=n.map(function(t,n){var r={logicalShape:t.tensor.shape,texShape:t.texData.texShape};return{name:e.variableNames[n],shapeInfo:r}}),o=i.map(function(t){return t.shapeInfo}),s={logicalShape:r.tensor.shape,texShape:r.texData.texShape},u=W(i,s,a,!0===e.supportsBroadcasting),l=t.createProgram(u),c={},p=0;p<e.variableNames.length;p++){var f=e.variableNames[p];c[f]=t.getUniformLocation(l,f)}me()&&(c[de]=t.getUniformLocation(l,de,!1));return{program:e,source:u,webGLProgram:l,uniformLocations:c,gpgpu:t,inShapeInfos:o,outShapeInfo:s}}(a.gpgpu,t,i,s)}),c=null!=this.activeTimers;return c&&(o=this.startTimer()),function(t,e,n,r){ge(t.inShapeInfos,e),ge([t.outShapeInfo],[n]);var a=n.texData.texture,i=n.texData.texShape,o=t.gpgpu;o.setOutputMatrixTexture(a,i[0],i[1]),o.setProgram(t.webGLProgram),e.forEach(function(e,n){var r=e.texData.texture,a=t.program.variableNames[n],i=t.uniformLocations[a];o.setInputMatrixTexture(r,i,n)}),me()&&o.gl.uniform1f(t.uniformLocations[de],NaN),null!=r&&r(o,t.webGLProgram),o.executeProgram()}(l,i,s,r),c&&(o=this.endTimer(o),this.activeTimers.push(this.getQueryTime(o))),n},t.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},t.prototype.getTextureManager=function(){return this.textureManager},t.prototype.dispose=function(){if(!this.disposed){for(var t in this.binaryCache)this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram);this.textureManager.dispose(),this.canvas.remove(),this.gpgpuCreatedLocally&&this.gpgpu.dispose(),this.disposed=!0}},t.prototype.throwIfNoData=function(t){if(!this.texData.has(t))throw new Error("WebGL backend: No data found for this tensor. Did you change your backend in the middle of the program? New backends can't use Tensors created with previous backends")},t.prototype.uploadToGPU=function(t){this.throwIfNoData(t);var e=this.texData.get(t),n=e.shape,r=e.values,a=e.texture,i=(e.dtype,e.texType);if(null==a){var o,s=null!=this.activeTimers;s&&(o=performance.now());var u=Vt(this.gpgpu.gl,n);e.texShape=u;var l,c=this.textureManager.acquireTexture(u,i);e.texture=c,null!=r&&(this.gpgpu.uploadMatrixToTexture(c,u[0],u[1],(l=r)instanceof Float32Array?l:new Float32Array(l)),e.values=null,s&&(this.uploadWaitMs+=performance.now()-o))}},t.prototype.cacheOnCPU=function(t,e){var n=this.delayedStorage,r=this.texData.get(t),a=r.texture,i=r.texShape,o=r.dtype,s=r.texType;n&&null!=a&&(this.textureManager.releaseTexture(a,i,s),r.texture=null,r.texShape=null),null!=e&&(r.values=function(t,e){if("float32"===e)return t;if("int32"===e||"bool"===e){for(var n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error("Unknown dtype "+e)}(e,o))},t}();l.ENV.registerBackend("webgl",function(){return new qe},2);var Ge=n(25),He=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},Ke=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},Xe=function(){function t(){this.data=new WeakMap,"undefined"!=typeof document&&(this.canvas=document.createElement("canvas"))}return t.prototype.register=function(t,e,n){if(this.data.has(t))throw new Error("Data buffer is already registered");this.data.set(t,null)},t.prototype.write=function(t,e){if(null==e)throw new Error("MathBackendCPU.write(): values can not be null");this.throwIfNoData(t),this.data.set(t,e)},t.prototype.fromPixels=function(t,e){if(null==t)throw new Error("MathBackendCPU.writePixels(): pixels can not be null");var n,r;if(t instanceof ImageData)n=t.data;else if(t instanceof HTMLCanvasElement)n=t.getContext("2d").getImageData(0,0,t.width,t.height).data;else{if(!(t instanceof HTMLImageElement||t instanceof HTMLVideoElement))throw new Error("pixels is of unknown type: "+t.constructor.name);if(null==this.canvas)throw new Error("Can't read pixels from HTMLImageElement outside the browser.");this.canvas.width=t.width,this.canvas.height=t.height,this.canvas.getContext("2d").drawImage(t,0,0,t.width,t.height),n=this.canvas.getContext("2d").getImageData(0,0,t.width,t.height).data}if(4===e)r=new Int32Array(n);else{var a=t.width*t.height;r=new Int32Array(a*e);for(var i=0;i<a;i++)for(var o=0;o<e;++o)r[i*e+o]=n[4*i+o]}var s=[t.height,t.width,e];return Object(p.wc)(r,s,"int32")},t.prototype.read=function(t){return He(this,void 0,void 0,function(){return Ke(this,function(e){return[2,this.readSync(t)]})})},t.prototype.readSync=function(t){return this.throwIfNoData(t),this.data.get(t)},t.prototype.disposeData=function(t){this.data.has(t)&&this.data.delete(t)},t.prototype.time=function(t){return He(this,void 0,void 0,function(){var e;return Ke(this,function(n){return e=performance.now(),t(),[2,{kernelMs:performance.now()-e}]})})},t.prototype.memory=function(){return{unreliable:!0}},t.prototype.throwIfNoData=function(t){if(!this.data.has(t))throw new Error("CPU backend: No data found for this tensor. Did you change your backend in the middle of the program? New backends can't use Tensors created with previous backends")},t.prototype.slice=function(t,e,n){for(var r=p.s(n,t.dtype),a=0;a<r.size;++a){var i=r.indexToLoc(a),o=i.map(function(t,n){return t+e[n]});r.set.apply(r,[t.get.apply(t,o)].concat(i))}return r.toTensor()},t.prototype.stridedSlice=function(t,e,n,r,a,i){var o=Object(d.b)(t.shape,e,n,r,a,i),s=o[0],u=o[1];if(u.some(function(t){return 0===t}))return p.tc([],u);for(var l=p.s(u,t.dtype),c=0;c<l.size;c++){for(var f=l.indexToLoc(c),h=new Array(f.length),m=0;m<h.length;m++)h[m]=f[m]*r[m]+s[m];l.set.apply(l,[t.get.apply(t,h)].concat(f))}return l.toTensor()},t.prototype.reverse=function(t,e){for(var n=p.s(t.shape,t.dtype),r=t.buffer(),a=function(a){var i=n.indexToLoc(a),o=i.slice();e.forEach(function(e){return o[e]=t.shape[e]-1-o[e]}),n.set.apply(n,[r.get.apply(r,o)].concat(i))},i=0;i<n.size;i++)a(i);return n.toTensor()},t.prototype.concat=function(t,e){var n=T.c(t.shape,e.shape,1),r=p.s(n,t.dtype);if(1===t.shape[0]&&1===e.shape[0]){var a=t.dataSync(),i=e.dataSync(),o=r.values;return o.set(a,0),o.set(i,t.size),r.toTensor()}for(var s=0;s<n[0];++s){for(var u=0;u<t.shape[1];++u)r.set(t.get(s,u),s,u);for(u=0;u<e.shape[1];++u)r.set(e.get(s,u),s,u+t.shape[1])}return r.toTensor()},t.prototype.neg=function(t){return this.multiply(p.Rb(-1),t)},t.prototype.add=function(t,e){return this.broadcastedBinaryOp(t,e,g.c(t.dtype,e.dtype),function(t,e){return t+e})},t.prototype.subtract=function(t,e){return this.broadcastedBinaryOp(t,e,g.c(t.dtype,e.dtype),function(t,e){return t-e})},t.prototype.pow=function(t,e){return this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){return Math.pow(t,e)})},t.prototype.matMul=function(t,e,n,r){for(var a=n?t.shape[0]:t.shape[1],i=n?t.shape[1]:t.shape[0],o=r?e.shape[0]:e.shape[1],s=t.dataSync(),u=e.dataSync(),l=n?[1,t.strides[0]]:[t.strides[0],1],c=l[0],f=l[1],h=r?[e.strides[0],1]:[1,e.strides[0]],d=h[0],m=h[1],g=i*c,y=o*d,v=new Float32Array(i*o),b=0,w=0;w<g;w+=c)for(var x=0;x<y;x+=d){for(var O=w,N=x,S=0,E=0;E<a;++E)S+=s[O]*u[N],O+=f,N+=m;v[b++]=S}return p.vc(v,[i,o])},t.prototype.multiply=function(t,e){return this.broadcastedBinaryOp(t,e,g.c(t.dtype,e.dtype),function(t,e){return t*e})},t.prototype.divide=function(t,e){var n,r;return"int32"===t.dtype&&"int32"===e.dtype?(r="int32",n=function(t,e){return Math.floor(t/e)}):(r="float32",n=function(t,e){return t/e}),this.broadcastedBinaryOp(t,e,r,n)},t.prototype.sum=function(t,e){c.a("sum",e,t.rank);for(var n=c.b(t.shape,e),r=n[0],a=n[1],i=g.c(t.dtype,"int32"),o=p.Gc(r,i),s=y.sizeFromShape(a),u=o.dataSync(),l=t.dataSync(),f=0;f<u.length;++f){for(var h=f*s,d=0,m=0;m<s;++m)d+=l[h+m];u[f]=d}return o},t.prototype.argMin=function(t,e){var n=[e];c.a("argMin",n,t.rank);for(var r=c.b(t.shape,n),a=r[0],i=r[1],o=p.Gc(a,"int32"),s=y.sizeFromShape(i),u=o.dataSync(),l=t.dataSync(),f=0;f<u.length;++f){for(var h=f*s,d=l[h],m=0,g=0;g<s;++g){var v=l[h+g];v<d&&(d=v,m=g)}u[f]=m}return o},t.prototype.argMax=function(t,e){var n=[e];c.a("argMax",n,t.rank);for(var r=c.b(t.shape,n),a=r[0],i=r[1],o=p.Gc(a,"int32"),s=y.sizeFromShape(i),u=o.dataSync(),l=t.dataSync(),f=0;f<u.length;++f){for(var h=f*s,d=l[h],m=0,g=0;g<s;++g){var v=l[h+g];v>d&&(d=v,m=g)}u[f]=m}return o},t.prototype.cumsum=function(t,e,n,r){for(var a=g.c(t.dtype,"int32"),i=p.Gc(t.shape,a),o=i.dataSync(),s=t.dataSync(),u=t.shape[t.rank-1],l=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},c=0;c<s.length;c+=u)for(var f=0;f<u;f++){var h=l(c,f);if(0===f)o[h]=n?0:s[h];else{var d=l(c,f-1);o[h]=n?s[d]+o[d]:s[h]+o[d]}}return i},t.prototype.equal=function(t,e){return this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t===e?1:0})},t.prototype.notEqual=function(t,e){return this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t!==e?1:0})},t.prototype.less=function(t,e){return this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t<e?1:0})},t.prototype.lessEqual=function(t,e){return this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t<=e?1:0})},t.prototype.greater=function(t,e){return this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t>e?1:0})},t.prototype.greaterEqual=function(t,e){return this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t>=e?1:0})},t.prototype.logicalNot=function(t){for(var e=t.dataSync(),n=new Int32Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return m.a.make(t.shape,{values:n},"bool")},t.prototype.logicalAnd=function(t,e){return this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t&&e})},t.prototype.logicalOr=function(t,e){return this.broadcastedBinaryOp(t,e,"bool",function(t,e){return t||e})},t.prototype.where=function(t,e,n,r){for(var a=t.dataSync(),i=e.dataSync(),o=n.dataSync(),s=p.Gc(e.shape,r),u=s.dataSync(),l=0,c=0===t.rank||t.rank>1||1===e.rank?1:e.shape[1],f=0;f<a.length;f++)for(var h=0;h<c;h++)1===a[f]?u[l++]=i[f]:u[l++]=o[f];return s},t.prototype.topKValues=function(t,e){return this.topK(t,e).values},t.prototype.topKIndices=function(t,e){return this.topK(t,e).indices},t.prototype.topK=function(t,e){for(var n=t.dataSync(),r=[],a=0;a<n.length;a++)r.push({value:n[a],index:a});r.sort(function(t,e){return e.value-t.value});var i=y.getTypedArrayFromDType(t.dtype,e),o=new Int32Array(e);for(a=0;a<e;a++)i[a]=r[a].value,o[a]=r[a].index;return{values:p.uc(i,t.dtype),indices:p.uc(o,"int32")}},t.prototype.min=function(t,e){c.a("min",e,t.rank);for(var n=c.b(t.shape,e),r=n[0],a=n[1],i=p.Gc(r,t.dtype),o=y.sizeFromShape(a),s=i.dataSync(),u=t.dataSync(),l=0;l<s.length;++l){for(var f=l*o,h=u[0],d=0;d<o;++d){var m=u[f+d];m<h&&(h=m)}s[l]=h}return i},t.prototype.minimum=function(t,e){return this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){return Math.min(t,e)})},t.prototype.mod=function(t,e){return this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})},t.prototype.max=function(t,e){c.a("max",e,t.rank);for(var n=c.b(t.shape,e),r=n[0],a=n[1],i=p.Gc(r,t.dtype),o=y.sizeFromShape(a),s=i.dataSync(),u=t.dataSync(),l=0;l<s.length;++l){for(var f=l*o,h=u[f],d=0;d<o;++d){var m=u[f+d];m>h&&(h=m)}s[l]=h}return i},t.prototype.maximum=function(t,e){return this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){return Math.max(t,e)})},t.prototype.squaredDifference=function(t,e){return this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){var n=t-e;return n*n})},t.prototype.ceil=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return m.a.make(t.shape,{values:n})},t.prototype.floor=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return m.a.make(t.shape,{values:n})},t.prototype.sign=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return m.a.make(t.shape,{values:n})},t.prototype.round=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var a=Math.floor(e[r]);e[r]-a<.5?n[r]=Math.floor(e[r]):e[r]-a>.5?n[r]=Math.ceil(e[r]):n[r]=a%2==0?a:a+1}return m.a.make(t.shape,{values:n})},t.prototype.exp=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return m.a.make(t.shape,{values:n})},t.prototype.expm1=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return m.a.make(t.shape,{values:n})},t.prototype.log=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var a=e[r];n[r]=Math.log(a)}return m.a.make(t.shape,{values:n})},t.prototype.log1p=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var a=e[r];n[r]=Math.log1p(a)}return m.a.make(t.shape,{values:n})},t.prototype.sqrt=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var a=e[r];n[r]=Math.sqrt(a)}return m.a.make(t.shape,{values:n})},t.prototype.rsqrt=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var a=e[r];n[r]=1/Math.sqrt(a)}return m.a.make(t.shape,{values:n})},t.prototype.square=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r){var a=e[r];n[r]=a*a}return m.a.make(t.shape,{values:n})},t.prototype.reciprocal=function(t){for(var e=t.dataSync(),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return m.a.make(t.shape,{values:n})},t.prototype.relu=function(t){for(var e=p.Gc(t.shape,t.dtype),n=e.dataSync(),r=t.dataSync(),a=0;a<r.length;++a)n[a]=Math.max(0,r[a]);return e},t.prototype.elu=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r){var a=n[r];e[r]=a>=0?a:Math.exp(a)-1}return m.a.make(t.shape,{values:e})},t.prototype.eluDer=function(t,e){for(var n=new Float32Array(e.size),r=e.dataSync(),a=t.dataSync(),i=0;i<r.length;++i){var o=r[i];n[i]=o>=1?a[i]:a[i]*(o+1)}return m.a.make(e.shape,{values:n})},t.prototype.selu=function(t){for(var e=ze.b,n=ze.a,r=new Float32Array(t.size),a=t.dataSync(),i=0;i<a.length;++i){var o=a[i];r[i]=o>=0?n*o:e*(Math.exp(o)-1)}return m.a.make(t.shape,{values:r})},t.prototype.clip=function(t,e,n){for(var r=new Float32Array(t.size),a=t.dataSync(),i=0;i<a.length;++i)r[i]=Math.min(n,Math.max(e,a[i]));return m.a.make(t.shape,{values:r})},t.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.int=function(t){for(var e=new Int32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=n[r];return m.a.make(t.shape,{values:e},"int32")},t.prototype.sigmoid=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return m.a.make(t.shape,{values:e})},t.prototype.softplus=function(t){for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=t.dataSync(),a=0;a<r.length;++a){var i=r[a]>-e,o=r[a]<e,s=Math.exp(r[a]),u=void 0;u=o?s:i?r[a]:Math.log(1+s),n[a]=u}return m.a.make(t.shape,{values:n})},t.prototype.sin=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.cos=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.tan=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.asin=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.acos=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.atan=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.atan2=function(t,e){return this.broadcastedBinaryOp(t,e,t.dtype,function(t,e){return Math.atan2(t,e)})},t.prototype.sinh=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.cosh=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.tanh=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=y.tanh(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.asinh=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.acosh=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.atanh=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return m.a.make(t.shape,{values:e})},t.prototype.erf=function(t){for(var e=new Float32Array(t.size),n=t.dataSync(),r=0;r<n.length;++r){var a=n[r],i=1/(1+.3275911*a);e[r]=1-((((1.061405429*i-1.453152027)*i+1.421413741)*i-.284496736)*i+.254829592)*i*Math.exp(-a*a)}return m.a.make(t.shape,{values:e})},t.prototype.step=function(t,e){void 0===e&&(e=0);for(var n=new Float32Array(t.size),r=t.dataSync(),a=0;a<r.length;++a){var i=r[a];isNaN(i)?n[a]=NaN:n[a]=i>0?1:e}return m.a.make(t.shape,{values:n})},t.prototype.conv2d=function(t,e,n){for(var r=n.filterHeight,a=n.filterWidth,i=n.dilationHeight,o=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,l=p.s(n.outShape,t.dtype),c=0;c<n.batchSize;++c)for(var f=0;f<n.outChannels;++f)for(var h=0;h<n.outHeight;++h)for(var d=h*n.strideHeight-s,m=0;m<n.outWidth;++m){for(var g=m*n.strideWidth-u,y=0,v=0;v<r;v++){var b=d+v*i;if(!(b<0||b>=n.inHeight))for(var w=0;w<a;w++){var x=g+w*o;if(!(x<0||x>=n.inWidth))for(var O=0;O<n.inChannels;++O){y+=t.get(c,b,x,O)*e.get(v,w,O,f)}}}l.set(y,c,h,m,f)}return l.toTensor()},t.prototype.conv2dDerInput=function(t,e,n){for(var r=p.s(n.inShape,"float32"),a=r.values,i=r.strides,o=i[0],s=i[1],u=i[2],l=t.dataSync(),c=t.strides,f=c[0],h=c[1],d=c[2],m=e.dataSync(),g=e.strides,y=g[0],v=g[1],b=g[2],w=n.batchSize,x=n.filterHeight,O=n.filterWidth,N=n.inChannels,S=n.inHeight,E=n.inWidth,A=n.outChannels,I=n.outHeight,T=n.outWidth,k=n.strideHeight,P=n.strideWidth,R=x-1-n.padInfo.top,C=O-1-n.padInfo.left,D=0;D<w;++D)for(var _=0;_<N;++_)for(var M=0;M<S;++M)for(var z=M-R,j=Math.max(0,Math.ceil(z/k)),L=Math.min(I,(x+z)/k),F=0;F<E;++F){for(var V=F-C,B=Math.max(0,Math.ceil(V/P)),U=Math.min(T,(O+V)/P),W=0,q=j;q<L;++q)for(var G=q*k-z,H=B;H<U;++H)for(var K=f*D+h*q+d*H,X=y*(x-1-G)+v*(O-1-(H*P-V))+b*_,Y=0;Y<A;++Y){W+=l[K+Y]*m[X+Y]}a[o*D+s*M+u*F+_]=W}return r.toTensor()},t.prototype.conv2dDerFilter=function(t,e,n){for(var r=n.strideHeight,a=n.strideWidth,i=n.filterHeight,o=n.filterWidth,s=p.s(n.filterShape,"float32"),u=n.padInfo.left,l=n.padInfo.top,c=0;c<i;++c)for(var f=Math.max(0,Math.ceil((l-c)/r)),h=Math.min(n.outHeight,(n.inHeight+l-c)/r),d=0;d<o;++d)for(var m=Math.max(0,Math.ceil((u-d)/a)),g=Math.min(n.outWidth,(n.inWidth+u-d)/a),y=0;y<n.inChannels;++y)for(var v=0;v<n.outChannels;++v){for(var b=0,w=0;w<n.batchSize;++w)for(var x=f;x<h;++x)for(var O=c+x*r-l,N=m;N<g;++N){var S=d+N*a-u;b+=t.get(w,O,S,y)*e.get(w,x,N,v)}s.set(b,c,d,y,v)}return s.toTensor()},t.prototype.depthwiseConv2D=function(t,e,n){for(var r=n.filterHeight,a=n.filterWidth,i=n.dilationHeight,o=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,l=n.outChannels/n.inChannels,c=p.s(n.outShape,t.dtype),f=0;f<n.batchSize;++f)for(var h=0;h<n.inChannels;++h)for(var d=0;d<n.outHeight;++d)for(var m=d*n.strideHeight-s,g=0;g<n.outWidth;++g)for(var y=g*n.strideWidth-u,v=0;v<l;++v){for(var b=0,w=0;w<r;++w){var x=m+w*i;if(!(x<0||x>=n.inHeight))for(var O=0;O<a;++O){var N=y+O*o;if(!(N<0||N>=n.inWidth))b+=t.get(f,x,N,h)*e.get(w,O,h,v)}}c.set(b,f,d,g,h*l+v)}return c.toTensor()},t.prototype.tile=function(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var a=p.s(n,t.dtype),i=t.buffer();for(r=0;r<a.values.length;++r){for(var o=a.indexToLoc(r),s=new Array(t.rank),u=0;u<s.length;u++)s[u]=o[u]%t.shape[u];var l=i.locToIndex(s);a.values[r]=i.values[l]}return a.toTensor()},t.prototype.pad=function(t,e,n){var r=e.map(function(e,n){return e[0]+t.shape[n]+e[1]}),a=e.map(function(t){return t[0]}),i=t.buffer(),o=p.s(r,t.dtype);0!==n&&o.values.fill(n);for(var s=0;s<t.size;s++){var u=i.indexToLoc(s),l=u.map(function(t,e){return t+a[e]});o.set.apply(o,[t.get.apply(t,u)].concat(l))}return o.toTensor()},t.prototype.transpose=function(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[e[r]];var a=t.dataSync(),i=Object(p.s)(n,t.dtype),o=t.buffer();for(r=0;r<t.size;++r){for(var s=o.indexToLoc(r),u=new Array(s.length),l=0;l<u.length;l++)u[l]=s[e[l]];var c=i.locToIndex(u);i.values[c]=a[r]}return i.toTensor()},t.prototype.gather=function(t,e,n){var r=t.shape.slice(),a=e.dataSync();r[n]=a.length;for(var i=Object(p.s)(r,t.dtype),o=t.buffer(),s=0;s<i.size;++s){var u=i.indexToLoc(s),l=u.slice();l[n]=a[u[n]];var c=o.locToIndex(l);i.values[s]=o.values[c]}return i.toTensor()},t.prototype.pool=function(t,e,n){for(var r=e.strideHeight,a=e.strideWidth,i=e.filterHeight,o=e.filterWidth,s=p.s(e.outShape,"float32"),u=e.padInfo.top,l=e.padInfo.left,c=0;c<e.batchSize;++c)for(var f=0;f<e.inChannels;++f)for(var h=0;h<e.outHeight;++h)for(var d=h*r-u,m=Math.max(0,d),g=Math.min(e.inHeight,i+d),y=0;y<e.outWidth;++y){for(var v=y*a-l,b=Math.max(0,v),w=Math.min(e.inWidth,o+v),x="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,O=0,N=0,S=m;S<g;++S){for(var E=b;E<w;++E){var A=t.get(c,S,E,f);"max"===n&&A>x?x=A:"avg"===n&&(O+=A,N++)}if(isNaN(x))break}s.set("avg"===n?O/N:x,c,h,y,f)}return s.toTensor()},t.prototype.maxPool=function(t,e){return this.pool(t,e,"max")},t.prototype.maxPoolPositions=function(t,e){for(var n=p.s(e.outShape,"int32"),r=e.strideHeight,a=e.strideWidth,i=e.filterHeight,o=e.filterWidth,s=e.padInfo.top,u=e.padInfo.left,l=0;l<e.batchSize;++l)for(var c=0;c<e.inChannels;++c)for(var f=0;f<e.outHeight;++f)for(var h=f*r-s,d=Math.max(0,h),m=Math.min(e.inHeight,i+h),g=0;g<e.outWidth;++g){for(var y=g*a-u,v=Math.max(0,y),b=Math.min(e.inWidth,o+y),w=Number.NEGATIVE_INFINITY,x=-1,O=d;O<m;++O)for(var N=O-h,S=v;S<b;++S){var E=S-y,A=t.get(l,O,S,c);A>w&&(w=A,x=N*o+E)}n.set(x,l,f,g,c)}return n.toTensor()},t.prototype.maxPoolBackprop=function(t,e,n,r){for(var a=this.maxPoolPositions(e,r),i=r.strideHeight,o=r.strideWidth,s=r.filterHeight,u=r.filterWidth,l=u-1-r.padInfo.left,c=s-1-r.padInfo.top,f=p.s(e.shape,"float32"),h=0;h<r.batchSize;++h)for(var d=0;d<r.inChannels;++d)for(var m=0;m<r.inHeight;++m)for(var g=0;g<r.inWidth;++g){for(var y=m-c,v=g-l,b=0,w=0;w<s;++w){var x=(y+w)/i;if(!(x<0||x>=r.outHeight||Math.floor(x)!==x))for(var O=0;O<u;++O){var N=(v+O)/o;if(!(N<0||N>=r.outWidth||Math.floor(N)!==N)){var S=s*u-1-a.get(h,x,N,d)===w*u+O?1:0;if(0!==S)b+=t.get(h,x,N,d)*S}}}f.set(b,h,m,g,d)}return f.toTensor()},t.prototype.avgPoolBackprop=function(t,e,n){for(var r=n.strideHeight,a=n.strideWidth,i=n.filterHeight,o=n.filterWidth,s=o-1-n.padInfo.left,u=i-1-n.padInfo.top,l=p.s(e.shape,"float32"),c=1/(i*o),f=0;f<n.batchSize;++f)for(var h=0;h<n.inChannels;++h)for(var d=0;d<n.inHeight;++d)for(var m=0;m<n.inWidth;++m){for(var g=d-u,y=m-s,v=0,b=0;b<i;++b){var w=(g+b)/r;if(!(w<0||w>=n.outHeight||Math.floor(w)!==w))for(var x=0;x<o;++x){var O=(y+x)/a;if(!(O<0||O>=n.outWidth||Math.floor(O)!==O))v+=t.get(f,w,O,h)}}l.set(v*c,f,d,m,h)}return l.toTensor()},t.prototype.cast=function(t,e){return b(t,e,this)},t.prototype.reshape=function(t,e){return w(t,e)},t.prototype.avgPool=function(t,e){return this.pool(t,e,"avg").toFloat()},t.prototype.resizeBilinear=function(t,e,n,r){for(var a=t.shape,i=a[0],o=a[1],s=a[2],u=a[3],l=p.s([i,e,n,u],t.dtype),c=[r&&e>1?o-1:o,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],h=0;h<i;h++)for(var d=0;d<e;d++)for(var m=0;m<n;m++)for(var g=0;g<u;g++){var y=c[0]*d/f[0],v=c[1]*m/f[1],b=Math.floor(y),w=Math.min(o-1,Math.ceil(y)),x=Math.floor(v),O=Math.min(s-1,Math.ceil(v)),N=t.get(h,b,x,g),S=t.get(h,w,x,g),E=v-x,A=N+(t.get(h,b,O,g)-N)*E,I=A+(S+(t.get(h,w,O,g)-S)*E-A)*(y-b);l.set(I,h,d,m,g)}return l.toTensor()},t.prototype.resizeBilinearBackprop=function(t,e,n){for(var r=e.shape,a=r[0],i=r[1],o=r[2],s=r[3],u=t.shape,l=u[1],c=u[2],f=p.s([a,i,o,s],e.dtype),h=[n&&l>1?i-1:i,n&&c>1?o-1:o],d=[n&&l>1?l-1:l,n&&c>1?c-1:c],m=h[0]/d[0],g=h[1]/d[1],y=0;y<a;y++)for(var v=0;v<l;v++)for(var b=v*m,w=Math.floor(b),x=Math.min(Math.ceil(b),i-1),O=b-w,N=1-O,S=0;S<c;S++)for(var E=S*g,A=Math.floor(E),I=Math.min(Math.ceil(E),o-1),T=E-A,k=1-T,P=0;P<s;P++){var R=t.get(y,v,S,P),C=f.get(y,w,A,P);C+=R*N*k,f.set(C,y,w,A,P);var D=f.get(y,w,I,P);D+=R*N*T,f.set(D,y,w,I,P);var _=f.get(y,x,A,P);_+=R*O*k,f.set(_,y,x,A,P);var M=f.get(y,x,I,P);M+=R*O*T,f.set(M,y,x,I,P)}return f.toTensor()},t.prototype.resizeNearestNeighbor=function(t,e,n,r){for(var a=t.shape,i=a[0],o=a[1],s=a[2],u=a[3],l=p.s([i,e,n,u],t.dtype),c=r?[o-1,s-1]:[o,s],f=r?[e-1,n-1]:[e,n],h=0;h<i;h++)for(var d=0;d<e;d++)for(var m=0;m<n;m++)for(var g=0;g<u;g++){var y=c[0]*d/f[0],v=c[1]*m/f[1],b=Math.min(o-1,r?Math.round(y):Math.floor(y)),w=Math.min(s-1,r?Math.round(v):Math.floor(v)),x=t.get(h,b,w,g);l.set(x,h,d,m,g)}return l.toTensor()},t.prototype.batchNormalization=function(t,e,n,r,a,i){for(var o=t.dataSync(),s=e.dataSync(),u=n.dataSync(),l=a?a.dataSync():new Float32Array([1]),c=i?i.dataSync():new Float32Array([0]),f=new Float32Array(o.length),h=0;h<o.length;h++)f[h]=c[h%c.length]+(o[h]-s[h%s.length])*l[h%l.length]/Math.sqrt(u[h%u.length]+r);return Object(p.xc)(f,t.shape)},t.prototype.localResponseNormalization4D=function(t,e,n,r,a){var i=p.s(t.shape,"float32"),o=e,s=i.shape[3]-1;function u(e,n,r,a){for(var i=0,u=Math.max(0,a-o);u<=Math.min(a+o,s);u++){var l=t.get(e,n,r,u);i+=l*l}return i}for(var l=0;l<i.shape[0];l++)for(var c=0;c<=i.shape[1];c++)for(var f=0;f<i.shape[2];f++)for(var h=0;h<i.shape[3];h++){var d=u(l,c,f,h),m=t.get(l,c,f,h)*Math.pow(n+r*d,-a);i.set(m,l,c,f,h)}return i.toTensor()},t.prototype.multinomial=function(t,e,n,r){for(var a=e?t:p.dc(t),i=a.shape[0],o=a.shape[1],s=p.Gc([i,n],"int32"),u=s.dataSync(),l=a.dataSync(),c=0;c<i;++c){var f=c*o,h=new Float32Array(o-1);h[0]=l[f];for(var d=1;d<h.length;++d)h[d]=h[d-1]+l[f+d];for(var m=Ge.alea(r.toString()),g=c*n,y=0;y<n;++y){var v=m();u[g+y]=h.length;for(var b=0;b<h.length;b++)if(v<h[b]){u[g+y]=b;break}}}return s},t.prototype.oneHot=function(t,e,n,r){var a=new Float32Array(t.size*e);a.fill(r);for(var i=0;i<t.size;++i)a[i*e+t.get(i)]=n;return p.vc(a,[t.size,e])},t.prototype.broadcastedBinaryOp=function(t,e,n,r){for(var a=S.a(t.shape,e.shape),i=p.s(a,n),o=t.dataSync(),s=e.dataSync(),u=S.c(t.shape,a),l=S.c(e.shape,a),c=t.buffer(),f=e.buffer(),h=function(n){var a=i.indexToLoc(n),p=a.slice(-t.rank);u.forEach(function(t){return p[t]=0});var h=c.locToIndex(p),d=a.slice(-e.rank);l.forEach(function(t){return d[t]=0});var m=f.locToIndex(d);i.values[n]=r(o[h],s[m])},d=0;d<i.values.length;++d)h(d);return i.toTensor()},t.prototype.dispose=function(){},t}();l.ENV.registerBackend("cpu",function(){return new Xe},1);var Ye=n(3),Je=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},Qe=function(){function t(){}return t.nextFrame=function(){return new Promise(function(t){return requestAnimationFrame(function(){return t()})})},Je([Object(Ye.a)({heading:"Performance",subheading:"Timing"})],t,"nextFrame",null),t}(),Ze={float32:4,int32:4,uint16:2,uint8:1,bool:1},$e=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},tn=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};function en(t){return $e(this,void 0,void 0,function(){var e,n,r,a;return tn(this,function(i){switch(i.label){case 0:for(r in e=[],n=[],t){if("float32"!==(a=t[r]).dtype&&"int32"!==a.dtype&&"bool"!==a.dtype)throw new Error("Unsupported dtype in weight '"+r+"': "+a.dtype);e.push({name:r,shape:a.shape,dtype:a.dtype}),n.push(a.data())}return[4,Promise.all(n)];case 1:return[2,{data:function(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var e=0;t.forEach(function(t){if(t instanceof Float32Array||t instanceof Int32Array)e+=4*t.length;else{if(!(t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name);e+=t.length}});var n=new Uint8Array(e),r=0;return t.forEach(function(t){n.set(new Uint8Array(t.buffer),r),t instanceof Float32Array||t instanceof Int32Array?r+=4*t.length:r+=t.length}),n.buffer}(i.sent()),specs:e}]}})})}function nn(t,e){for(var n={},r=0,a=0,i=e;a<i.length;a++){var o=i[a],s=o.name,u=o.dtype,l=o.shape;if(null!=o.quantization)throw new Error("decodeWeights does not support quantization yet, but encountered weight '"+s+" with quantization.'");var c=Object(y.sizeFromShape)(l),p=void 0;if("float32"===u)p=v.a.tensor(new Float32Array(t,r,c),l,"float32");else if("int32"===u)p=v.a.tensor(new Int32Array(t,r,c),l,"int32");else{if("bool"!==u)throw new Error("Unsupported dtype in weight '"+s+"': "+u);p=v.a.tensor(new Uint8Array(t,r,c),l,"bool")}n[s]=p,r+=c*Ze[u]}return n}function rn(t){return new Blob([t]).size}function an(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var e=t.split("/");return e[e.length-1]}function on(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:rn(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:rn(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var sn=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e)},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e)},t.getSaveHandlers=function(e){return t.getHandlers(e,"save")},t.getLoadHandlers=function(e){return t.getHandlers(e,"load")},t.getHandlers=function(t,e){var n=[];return("load"===e?this.getInstance().loadRouters:this.getInstance().saveRouters).forEach(function(e){var r=e(t);null!==r&&n.push(r)}),n},t}(),un=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},ln=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},cn="://",pn=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){Object(y.assert)(null!=e,"scheme must not be undefined or null."),e.endsWith(cn)&&(e=e.slice(0,e.indexOf(cn))),Object(y.assert)(e.length>0,"scheme must not be an empty string.");var r=t.getInstance();Object(y.assert)(null==r.managers[e],"A model store manager is already registered for scheme '"+e+"'."),r.managers[e]=n},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error("Cannot find model manager for scheme '"+t+"'");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function fn(t){if(-1===t.indexOf(cn))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+pn.getSchemes().join(","));return{scheme:t.split(cn)[0],path:t.split(cn)[1]}}function hn(){return un(this,void 0,void 0,function(){var t,e,n,r,a,i,o;return ln(this,function(s){switch(s.label){case 0:t=pn.getSchemes(),e={},n=0,r=t,s.label=1;case 1:return n<r.length?(a=r[n],[4,pn.getManager(a).listModels()]):[3,4];case 2:for(o in i=s.sent())e[a+cn+o]=i[o];s.label=3;case 3:return n++,[3,1];case 4:return[2,e]}})})}function dn(t){return un(this,void 0,void 0,function(){var e;return ln(this,function(n){switch(n.label){case 0:return e=fn(t),[4,pn.getManager(e.scheme).removeModel(e.path)];case 1:return[2,n.sent()]}})})}function mn(t,e,n){return void 0===n&&(n=!1),un(this,void 0,void 0,function(){var r,a,i,o,s,u,l,c,p;return ln(this,function(f){switch(f.label){case 0:return Object(y.assert)(t!==e,"Old path and new path are the same: '"+t+"'"),r=sn.getLoadHandlers(t),Object(y.assert)(r.length>0,"Copying failed because no load handler is found for source URL "+t+"."),Object(y.assert)(r.length<2,"Copying failed because more than one ("+r.length+") load handlers for source URL "+t+"."),a=r[0],i=sn.getSaveHandlers(e),Object(y.assert)(i.length>0,"Copying failed because no save handler is found for destination URL "+e+"."),Object(y.assert)(i.length<2,"Copying failed because more than one ("+r.length+") save handlers for destination URL "+e+"."),o=i[0],s=fn(t).scheme,u=fn(t).path,l=s===fn(t).scheme,[4,a.load()];case 1:return c=f.sent(),n&&l?[4,pn.getManager(s).removeModel(u)]:[3,3];case 2:f.sent(),f.label=3;case 3:return[4,o.save(c)];case 4:return p=f.sent(),!n||l?[3,6]:[4,pn.getManager(s).removeModel(u)];case 5:f.sent(),f.label=6;case 6:return[2,p.modelArtifactsInfo]}})})}function gn(t,e){return un(this,void 0,void 0,function(){return ln(this,function(n){switch(n.label){case 0:return[4,mn(t,e,!1)];case 1:return[2,n.sent()]}})})}function yn(t,e){return un(this,void 0,void 0,function(){return ln(this,function(n){switch(n.label){case 0:return[4,mn(t,e,!0)];case 1:return[2,n.sent()]}})})}var vn=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},bn=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},wn="tensorflowjs",xn="models_store",On="model_info_store";function Nn(){if(!l.ENV.get("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t=window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function Sn(t){var e=t.result;e.createObjectStore(xn,{keyPath:"modelPath"}),e.createObjectStore(On,{keyPath:"modelPath"})}var En=function(){function t(t){if(this.indexedDB=Nn(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}return t.prototype.save=function(t){return vn(this,void 0,void 0,function(){return bn(this,function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,t)]})})},t.prototype.load=function(){return vn(this,void 0,void 0,function(){return bn(this,function(t){return[2,this.databaseAction(this.modelPath)]})})},t.prototype.databaseAction=function(t,e){var n=this;return new Promise(function(t,r){var a=n.indexedDB.open(wn,1);a.onupgradeneeded=function(){return Sn(a)},a.onsuccess=function(){var i=a.result;if(null==e){var o=i.transaction(xn,"readonly"),s=o.objectStore(xn).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return i.close(),r(new Error("Cannot find model with path '"+n.modelPath+"' in IndexedDB."));t(s.result.modelArtifacts)},s.onerror=function(t){return i.close(),r(s.error)},o.oncomplete=function(){return i.close()}}else{var u,l=on(e),c=i.transaction(On,"readwrite"),p=c.objectStore(On),f=p.put({modelPath:n.modelPath,modelArtifactsInfo:l});f.onsuccess=function(){var a=(u=i.transaction(xn,"readwrite")).objectStore(xn).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:l});a.onsuccess=function(){return t({modelArtifactsInfo:l})},a.onerror=function(t){var e=(p=c.objectStore(On)).delete(n.modelPath);e.onsuccess=function(){return i.close(),r(a.error)},e.onerror=function(t){return i.close(),r(a.error)}}},f.onerror=function(t){return i.close(),r(f.error)},c.oncomplete=function(){null==u?i.close():u.oncomplete=function(){return i.close()}}}},a.onerror=function(t){return r(a.error)}})},t.URL_SCHEME="indexeddb://",t}(),An=function(t){return l.ENV.get("IS_BROWSER")&&t.startsWith(En.URL_SCHEME)?(e=t.slice(En.URL_SCHEME.length),new En(e)):null;var e};sn.registerSaveRouter(An),sn.registerLoadRouter(An);var In=function(){function t(){this.indexedDB=Nn()}return t.prototype.listModels=function(){return vn(this,void 0,void 0,function(){var t=this;return bn(this,function(e){return[2,new Promise(function(e,n){var r=t.indexedDB.open(wn,1);r.onupgradeneeded=function(){return Sn(r)},r.onsuccess=function(){var t=r.result,a=t.transaction(On,"readonly"),i=a.objectStore(On).getAll();i.onsuccess=function(){for(var t={},n=0,r=i.result;n<r.length;n++){var a=r[n];t[a.modelPath]=a.modelArtifactsInfo}e(t)},i.onerror=function(e){return t.close(),n(i.error)},a.oncomplete=function(){return t.close()}},r.onerror=function(t){return n(r.error)}})]})})},t.prototype.removeModel=function(t){return vn(this,void 0,void 0,function(){var e=this;return bn(this,function(n){var r;return t=(r=t).startsWith(En.URL_SCHEME)?r.slice(En.URL_SCHEME.length):r,[2,new Promise(function(n,r){var a=e.indexedDB.open(wn,1);a.onupgradeneeded=function(){return Sn(a)},a.onsuccess=function(){var e,i=a.result,o=i.transaction(On,"readwrite"),s=o.objectStore(On),u=s.get(t);u.onsuccess=function(){if(null==u.result)return i.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var a=s.delete(t),o=function(){var a=(e=i.transaction(xn,"readwrite")).objectStore(xn).delete(t);a.onsuccess=function(){return n(u.result.modelArtifactsInfo)},a.onerror=function(t){return r(u.error)}};a.onsuccess=o,a.onerror=function(t){return o(),i.close(),r(u.error)}},u.onerror=function(t){return i.close(),r(u.error)},o.oncomplete=function(){null==e?i.close():e.oncomplete=function(){return i.close()}}},a.onerror=function(t){return r(a.error)}})]})})},t}();if(l.ENV.get("IS_BROWSER"))try{pn.registerManager(En.URL_SCHEME,new In)}catch(t){}var Tn=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},kn=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},Pn="/",Rn="tensorflowjs_models",Cn="info",Dn="model_topology",_n="weight_specs",Mn="weight_data";function zn(t){return{info:[Rn,t,Cn].join(Pn),topology:[Rn,t,Dn].join(Pn),weightSpecs:[Rn,t,_n].join(Pn),weightData:[Rn,t,Mn].join(Pn)}}function jn(t){var e=t.split(Pn);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join(Pn)}var Ln=function(){function t(t){if(!l.ENV.get("IS_BROWSER")||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=zn(this.modelPath)}return t.prototype.save=function(t){return Tn(this,void 0,void 0,function(){var e,n,r,a;return kn(this,function(i){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=on(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,(o=t.weightData,btoa(String.fromCharCode.apply(null,new Uint8Array(o))))),[2,{modelArtifactsInfo:r}]}catch(t){for(a in this.keys)this.LS.removeItem(this.keys[a]);throw new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}var o;return[2]})})},t.prototype.load=function(){return Tn(this,void 0,void 0,function(){var t,e,n,r,a;return kn(this,function(i){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(e.modelTopology=n,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(e.weightSpecs=r,null==(a=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return e.weightData=function(t){for(var e=atob(t),n=new Uint8Array(e.length),r=0;r<e.length;++r)n.set([e.charCodeAt(r)],r);return n.buffer}(a),[2,e]})})},t.URL_SCHEME="localstorage://",t}(),Fn=function(t){return l.ENV.get("IS_BROWSER")&&t.startsWith(Ln.URL_SCHEME)?(e=t.slice(Ln.URL_SCHEME.length),new Ln(e)):null;var e};sn.registerSaveRouter(Fn),sn.registerLoadRouter(Fn);var Vn=function(){function t(){Object(y.assert)(l.ENV.get("IS_BROWSER"),"Current environment is not a web browser"),Object(y.assert)(void 0!==window.localStorage,"Current browser does not appear to support localStorage"),this.LS=window.localStorage}return t.prototype.listModels=function(){return Tn(this,void 0,void 0,function(){var t,e,n,r,a,i;return kn(this,function(o){for(t={},e=Rn+Pn,n=Pn+Cn,r=0;r<this.LS.length;++r)(a=this.LS.key(r)).startsWith(e)&&a.endsWith(n)&&(i=jn(a),t[i]=JSON.parse(this.LS.getItem(a)));return[2,t]})})},t.prototype.removeModel=function(t){return Tn(this,void 0,void 0,function(){var e,n;return kn(this,function(r){var a;if(t=(a=t).startsWith(Ln.URL_SCHEME)?a.slice(Ln.URL_SCHEME.length):a,e=zn(t),null==this.LS.getItem(e.info))throw new Error("Cannot find model at path '"+t+"'");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]})})},t}();if(l.ENV.get("IS_BROWSER"))try{pn.registerManager(Ln.URL_SCHEME,new Vn)}catch(t){}var Bn=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},Un=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},Wn="model",qn=".json",Gn=".weights.bin",Hn=function(){function t(e){if(!l.ENV.get("IS_BROWSER"))throw new Error("triggerDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e=Wn),this.modelTopologyFileName=e+qn,this.weightDataFileName=e+Gn}return t.prototype.save=function(t){return Bn(this,void 0,void 0,function(){var e,n,r,a,i,o;return Un(this,function(s){if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),t.modelTopology instanceof ArrayBuffer)throw new Error("DownloadTrigger.save() does not support saving model topology in binary formats yet.");return n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,weightsManifest:n},a=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=a,i.click(),null!=t.weightData&&((o=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,o.href=e,o.click()),[2,{modelArtifactsInfo:on(t)}]})})},t.URL_SCHEME="downloads://",t}(),Kn=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}return t.prototype.load=function(){return Bn(this,void 0,void 0,function(){var t,e,n=this;return Un(this,function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise(function(r,a){var i=new FileReader;i.onload=function(i){var o=JSON.parse(i.target.result),s=o.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=o.weightsManifest;if(null!=u){var l;try{l=n.checkManifestAndWeightFiles(u,e)}catch(t){return void a(t)}var c=[],p=[],f=[];u.forEach(function(t){t.paths.forEach(function(t){p.push(t),f.push(null)}),c.push.apply(c,t.weights)}),u.forEach(function(t){t.paths.forEach(function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,a=p.indexOf(t);f[a]=n,-1===f.indexOf(null)&&r({modelTopology:s,weightSpecs:c,weightData:function(t){var e=0;t.forEach(function(t){e+=t.byteLength});var n=new Uint8Array(e),r=0;return t.forEach(function(t){n.set(new Uint8Array(t),r),r+=t.byteLength}),n.buffer}(f)})},e.onerror=function(e){a("Failed to weights data from file of path '"+t+"'.")},e.readAsArrayBuffer(l[t])})})}else a(new Error("weightManifest field is missing from file "+t.name))}else a(new Error("modelTopology field is missing from file "+t.name))},i.onerror=function(e){a("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},i.readAsText(t)})]})})},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map(function(t){return an(t.name)}),a={},i=0,o=t;i<o.length;i++){o[i].paths.forEach(function(t){var i=an(t);if(-1!==n.indexOf(i))throw new Error("Duplicate file basename found in weights manifest: '"+i+"'");if(n.push(i),-1===r.indexOf(i))throw new Error("Weight file with basename '"+i+"' is not provided.");a[t]=e[r.indexOf(i)]})}if(n.length!==e.length)throw new Error("Mismatch in the number of files in weights manifest ("+n.length+") and the number of weight files provided ("+e.length+").");return a},t}();function Xn(t){return new Kn(t)}sn.registerSaveRouter(function(t){return l.ENV.get("IS_BROWSER")&&t.startsWith(Hn.URL_SCHEME)?(e=t.slice(Hn.URL_SCHEME.length),void 0===e&&(e="model"),new Hn(e)):null;var e});var Yn=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},Jn=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},Qn=function(){function t(t,e){if(this.DEFAULT_METHOD="POST",!l.ENV.get("IS_BROWSER"))throw new Error("browserHTTPRequest is not supported outside the web browser.");if(Object(y.assert)(null!=t&&t.length>0,"URL path for browserHTTPRequest must not be null, undefined or empty."),this.path=t,null!=e&&null!=e.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e||{}}return t.prototype.save=function(t){return Yn(this,void 0,void 0,function(){var e,n,r,a;return Jn(this,function(i){switch(i.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,weightsManifest:n},e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,fetch(this.path,e)];case 1:if(200===(a=i.sent()).status)return[2,{modelArtifactsInfo:on(t),responses:[a]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+a.status+".")}})})},t.URL_SCHEMES=["http://","https://"],t}();function Zn(t,e){return new Qn(t,e)}sn.registerSaveRouter(function(t){if(l.ENV.get("IS_BROWSER")){for(var e=0,n=Qn.URL_SCHEMES;e<n.length;e++){var r=n[e];if(t.startsWith(r))return Zn(t)}return null}return null});var $n=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},tr=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};function er(t,e,n,r){return void 0===e&&(e=""),$n(this,void 0,void 0,function(){var a,i,o,s,u,l,c,f,h,d,m;return tr(this,function(g){switch(g.label){case 0:if(a=t.map(function(){return!1}),i={},o=null!=n?n.map(function(){return!1}):[],s=[],t.forEach(function(t,e){var r=0;t.weights.forEach(function(t){var u="quantization"in t?t.quantization.dtype:t.dtype,l=Ze[u]*y.sizeFromShape(t.shape),c=function(){a[e]=!0,null==i[e]&&(i[e]=[]),i[e].push({manifestEntry:t,groupOffset:r,sizeBytes:l})};null!=n?n.forEach(function(e,n){e===t.name&&(c(),o[n]=!0)}):c(),s.push(t.name),r+=l})}),!o.every(function(t){return t}))throw u=n.filter(function(t,e){return!o[e]}),new Error("Could not find weights in manifest with names: "+u.join(", ")+". \nManifest JSON has weights with names: "+s.join(", ")+".");return l=a.reduce(function(t,e,n){return e&&t.push(n),t},[]),c=[],l.forEach(function(n){t[n].paths.forEach(function(t){var n=e+(e.endsWith("/")?"":"/")+t;c.push(fetch(n,r))})}),[4,Promise.all(c)];case 1:return f=g.sent(),[4,Promise.all(f.map(function(t){return t.arrayBuffer()}))];case 2:return h=g.sent(),d={},m=0,l.forEach(function(e){for(var n=t[e].paths.length,r=0,a=0;a<n;a++)r+=h[m+a].byteLength;for(var o=new ArrayBuffer(r),s=new Uint8Array(o),u=0,l=0;l<n;l++){var c=new Uint8Array(h[m+l]);s.set(c,u),u+=c.byteLength}i[e].forEach(function(t){var e,n=o.slice(t.groupOffset,t.groupOffset+t.sizeBytes),r=t.manifestEntry.dtype;if("quantization"in t.manifestEntry){var a=t.manifestEntry.quantization;if("uint8"!==a.dtype&&"uint16"!==a.dtype)throw new Error("Weight "+t.manifestEntry.name+" has unknown quantization dtype "+a.dtype+".");var i="uint8"===a.dtype?new Uint8Array(n):new Uint16Array(n);if("float32"===r)e=Float32Array.from(i,function(t){return t*a.scale+a.min});else{if("int32"!==r)throw new Error("Weight "+t.manifestEntry.name+" has a dtype not supported by quantization: "+r);e=Int32Array.from(i,function(t){return Math.round(t*a.scale+a.min)})}}else if("float32"===r)e=new Float32Array(n);else{if("int32"!==r)throw new Error("Weight "+t.manifestEntry.name+" has unknown dtype "+r+".");e=new Int32Array(n)}var s=t.manifestEntry.name;if(null!=d[s])throw new Error("Duplicate weight with name "+s+". Please make sure weights names are unique in the manifest JSON.");d[s]=Object(p.tc)(e,t.manifestEntry.shape,t.manifestEntry.dtype)}),m+=n}),[2,d]}})})}var nr=sn.registerSaveRouter,rr=sn.registerLoadRouter,ar=sn.getSaveHandlers,ir=sn.getLoadHandlers,or=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),sr=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(t){this.getMap().classNameMap[t.className]=[t,t.fromConfig]},t}(),ur={BACKEND:"test-webgl"},lr={BACKEND:"test-cpu"},cr={},pr=.001;function fr(t,e,n){if(void 0===n&&(n=pr),t instanceof m.a||e instanceof m.a){if(t instanceof m.a&&e instanceof m.a){if(t.dtype!==e.dtype)throw new Error("Arrays are of different type actual: "+t.dtype+" vs expected: "+e.dtype+".");if(!y.arraysEqual(t.shape,e.shape))throw new Error("Arrays are of different shape actual: "+t.shape+" vs expected: "+e.shape+".")}}else{var r=t.constructor.name,a=e.constructor.name;if(r!==a)throw new Error("Arrays are of different type actual: "+r+" vs expected: "+a)}var i,o;if(i=t instanceof m.a?t.dataSync():t,o=e instanceof m.a?e.dataSync():e,i.length!==o.length)throw new Error("Arrays have different lengths actual: "+i.length+" vs expected: "+o.length+".\nActual:   "+i+".\nExpected: "+o+".");for(var s=0;s<o.length;++s){var u=i[s],l=o[s];if(!gr(u,Number(l),n))throw new Error("Arrays differ: actual["+s+"] = "+u+", expected["+s+"] = "+l+".\nActual:   "+i+".\nExpected: "+o+".")}}function hr(t,e){t().then(function(){return e.fail()},function(){return e()})}function dr(t,e){return fr(t,e,0)}function mr(t,e,n){if(void 0===n&&(n=pr),!gr(t,e,n))throw new Error("Numbers differ: actual === "+t+", expected === "+e)}function gr(t,e,n){return!(!isNaN(t)||!isNaN(e))||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}function yr(t,e,n){var r;r=t instanceof m.a?t.dataSync():t;for(var a=0;a<r.length;a++)if(r[a]<e||r[a]>n)throw new Error("Value out of range:"+r[a]+" low: "+e+", high: "+n)}var vr,br=n(7),wr=(vr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}vr(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),xr=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},Or=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return wr(e,t),e.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),a=r.value,i=r.grads;return this.applyGradients(i),Object.keys(i).forEach(function(t){return i[t].dispose()}),e?a:(a.dispose(),null)},e.prototype.computeGradients=function(t,e){return Object(br.j)(t,e)},xr([Object(Ye.a)({heading:"Training",subheading:"Optimizers"})],e.prototype,"minimize",null),e=xr([Object(Ye.a)({heading:"Training",subheading:"Classes",namespace:"train"})],e)}(or),Nr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Sr=function(t){function e(e,n,r){void 0===r&&(r=1e-8);var a=t.call(this)||this;return a.learningRate=e,a.rho=n,a.epsilon=r,a.accumulatedGrads={},a.accumulatedUpdates={},a.c=Object(br.e)(Object(p.Rb)(-e)),a.epsilonScalar=Object(br.e)(Object(p.Rb)(r)),a.rhoScalar=Object(br.e)(Object(p.Rb)(n)),a.oneMinusRho=Object(br.e)(Object(p.Rb)(1-n)),a}return Nr(e,t),e.prototype.applyGradients=function(t){var e=this,n=function(n){var a=l.ENV.engine.registeredVariables[n];if(null==r.accumulatedGrads[n]){Object(br.f)(function(){e.accumulatedGrads[n]=Object(p.Hc)(a).variable(!1)})}if(null==r.accumulatedUpdates[n]){Object(br.f)(function(){e.accumulatedUpdates[n]=Object(p.Hc)(a).variable(!1)})}var i=t[n],o=r.accumulatedGrads[n],s=r.accumulatedUpdates[n];Object(br.f)(function(){var t=e.rhoScalar.mul(o).add(e.oneMinusRho.mul(i.square())),r=s.add(e.epsilonScalar).sqrt().div(o.add(e.epsilonScalar).sqrt()).mul(i),u=e.rhoScalar.mul(s).add(e.oneMinusRho.mul(r.square()));e.accumulatedGrads[n].assign(t),e.accumulatedUpdates[n].assign(u);var l=e.c.mul(r).add(a);a.assign(l)})},r=this;for(var a in t)n(a)},e.prototype.dispose=function(){var t=this;this.c.dispose(),this.epsilonScalar.dispose(),this.rhoScalar.dispose(),this.oneMinusRho.dispose(),null!=this.accumulatedUpdates&&(Object.keys(this.accumulatedUpdates).forEach(function(e){return t.accumulatedUpdates[e].dispose()}),Object.keys(this.accumulatedGrads).forEach(function(e){return t.accumulatedGrads[e].dispose()}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},e.className="AdadeltaOptimizer",e}(Or);sr.register(Sr);var Er=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ar=function(t){function e(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads={},r.c=Object(br.e)(Object(p.Rb)(-e)),r.epsilon=Object(br.e)(Object(p.Rb)(1e-8)),r}return Er(e,t),e.prototype.applyGradients=function(t){var e=this,n=function(n){var a=l.ENV.engine.registeredVariables[n];if(null==r.accumulatedGrads[n]){Object(br.f)(function(){e.accumulatedGrads[n]=Object(p.T)(a.shape,e.initialAccumulatorValue).variable(!1)})}var i=t[n],o=r.accumulatedGrads[n];Object(br.f)(function(){var t=o.add(i.square());e.accumulatedGrads[n].assign(t);var r=e.c.mul(i.div(t.add(e.epsilon).sqrt())).add(a);a.assign(r)})},r=this;for(var a in t)n(a)},e.prototype.dispose=function(){var t=this;this.epsilon.dispose(),this.c.dispose(),null!=this.accumulatedGrads&&Object.keys(this.accumulatedGrads).forEach(function(e){return t.accumulatedGrads[e].dispose()})},e.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},e.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},e.className="AdagradOptimizer",e}(Or);sr.register(Ar);var Ir=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Tr=function(t){function e(e,n,r,a){void 0===a&&(a=1e-8);var i=t.call(this)||this;return i.learningRate=e,i.beta1=n,i.beta2=r,i.epsilon=a,i.accumulatedFirstMoment={},i.accumulatedSecondMoment={},i.c=Object(br.e)(Object(p.Rb)(-e)),i.epsScalar=Object(br.e)(Object(p.Rb)(a)),i.beta1Scalar=Object(br.e)(Object(p.Rb)(n)),i.beta2Scalar=Object(br.e)(Object(p.Rb)(r)),Object(br.f)(function(){i.accBeta1=Object(p.Rb)(n).variable(),i.accBeta2=Object(p.Rb)(r).variable()}),i.oneMinusBeta1=Object(br.e)(Object(p.Rb)(1-n)),i.oneMinusBeta2=Object(br.e)(Object(p.Rb)(1-r)),i.one=Object(br.e)(Object(p.Rb)(1)),i}return Ir(e,t),e.prototype.applyGradients=function(t){var e=this;Object(br.f)(function(){var n=e.one.sub(e.accBeta1),r=e.one.sub(e.accBeta2);for(var a in t){var i=l.ENV.engine.registeredVariables[a];if(null==e.accumulatedFirstMoment[a]){var o=!1;e.accumulatedFirstMoment[a]=Object(p.Hc)(i).variable(o)}if(null==e.accumulatedSecondMoment[a]){o=!1;e.accumulatedSecondMoment[a]=Object(p.Hc)(i).variable(o)}var s=t[a],u=e.accumulatedFirstMoment[a],c=e.accumulatedSecondMoment[a],f=e.beta1Scalar.mul(u).add(e.oneMinusBeta1.mul(s)),h=e.beta2Scalar.mul(c).add(e.oneMinusBeta2.mul(s.square())),d=f.div(n),m=h.div(r);e.accumulatedFirstMoment[a].assign(f),e.accumulatedSecondMoment[a].assign(h);var g=e.c.mul(d.div(e.epsScalar.add(m.sqrt()))).add(i);i.assign(g)}e.accBeta1.assign(e.accBeta1.mul(e.beta1Scalar)),e.accBeta2.assign(e.accBeta2.mul(e.beta2Scalar))})},e.prototype.dispose=function(){var t=this;this.c.dispose(),this.epsScalar.dispose(),this.beta1Scalar.dispose(),this.beta2Scalar.dispose(),this.accBeta1.dispose(),this.accBeta2.dispose(),this.oneMinusBeta1.dispose(),this.oneMinusBeta2.dispose(),this.one.dispose(),null!=this.accumulatedFirstMoment&&Object.keys(this.accumulatedFirstMoment).forEach(function(e){return t.accumulatedFirstMoment[e].dispose()}),null!=this.accumulatedSecondMoment&&Object.keys(this.accumulatedSecondMoment).forEach(function(e){return t.accumulatedSecondMoment[e].dispose()})},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},e.className="AdamOptimizer",e}(Or);sr.register(Tr);var kr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Pr=function(t){function e(e,n,r,a,i){void 0===a&&(a=1e-8),void 0===i&&(i=0);var o=t.call(this)||this;return o.learningRate=e,o.beta1=n,o.beta2=r,o.epsilon=a,o.decay=i,o.accumulatedFirstMoment={},o.accumulatedWeightedInfNorm={},o.c=Object(br.e)(Object(p.Rb)(-e)),o.epsScalar=Object(br.e)(Object(p.Rb)(a)),o.beta1Scalar=Object(br.e)(Object(p.Rb)(n)),o.beta2Scalar=Object(br.e)(Object(p.Rb)(r)),o.decayScalar=Object(br.e)(Object(p.Rb)(i)),Object(br.f)(function(){o.iteration=Object(p.Rb)(0).variable(),o.accBeta1=Object(p.Rb)(n).variable()}),o.oneMinusBeta1=Object(br.e)(Object(p.Rb)(1-n)),o.one=Object(br.e)(Object(p.Rb)(1)),o}return kr(e,t),e.prototype.applyGradients=function(t){var e=this;Object(br.f)(function(){var n=e.one.sub(e.accBeta1),r=e.c.div(e.one.add(e.decayScalar.mul(e.iteration)));for(var a in t){var i=l.ENV.engine.registeredVariables[a];if(null==e.accumulatedFirstMoment[a]){var o=!1;e.accumulatedFirstMoment[a]=Object(p.Hc)(i).variable(o)}if(null==e.accumulatedWeightedInfNorm[a]){o=!1;e.accumulatedWeightedInfNorm[a]=Object(p.Hc)(i).variable(o)}var s=t[a],u=e.accumulatedFirstMoment[a],c=e.accumulatedWeightedInfNorm[a],f=e.beta1Scalar.mul(u).add(e.oneMinusBeta1.mul(s)),h=e.beta2Scalar.mul(c),d=s.abs(),m=h.maximum(d);e.accumulatedFirstMoment[a].assign(f),e.accumulatedWeightedInfNorm[a].assign(m);var g=r.div(n).mul(f.div(e.epsScalar.add(m))).add(i);i.assign(g)}e.iteration.assign(e.iteration.add(e.one)),e.accBeta1.assign(e.accBeta1.mul(e.beta1Scalar))})},e.prototype.dispose=function(){var t=this;this.c.dispose(),this.epsScalar.dispose(),this.accBeta1.dispose(),this.beta1Scalar.dispose(),this.beta2Scalar.dispose(),this.oneMinusBeta1.dispose(),this.decayScalar.dispose(),this.iteration.dispose(),this.one.dispose(),null!=this.accumulatedFirstMoment&&Object.keys(this.accumulatedFirstMoment).forEach(function(e){return t.accumulatedFirstMoment[e].dispose()}),null!=this.accumulatedWeightedInfNorm&&Object.keys(this.accumulatedWeightedInfNorm).forEach(function(e){return t.accumulatedWeightedInfNorm[e].dispose()})},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},e.className="AdamaxOptimizer",e}(Or);sr.register(Pr);var Rr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Cr=function(t){function e(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return Rr(e,t),e.prototype.applyGradients=function(t){var e=this;Object.keys(t).forEach(function(n){var r=t[n],a=l.ENV.engine.registeredVariables[n];Object(br.f)(function(){var t=e.c.mul(r).add(a);a.assign(t)})})},e.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Object(br.e)(Object(p.Rb)(-t))},e.prototype.dispose=function(){this.c.dispose()},e.prototype.getConfig=function(){return{learningRate:this.learningRate}},e.fromConfig=function(t,e){return new t(e.learningRate)},e.className="SGDOptimizer",e}(Or);sr.register(Cr);var Dr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),_r=function(t){function e(e,n,r){void 0===r&&(r=!1);var a=t.call(this,e)||this;return a.learningRate=e,a.momentum=n,a.useNesterov=r,a.m=Object(p.Rb)(a.momentum),a.accumulations={},a}return Dr(e,t),e.prototype.applyGradients=function(t){var e=this,n=function(n){var a=l.ENV.engine.registeredVariables[n];if(null==r.accumulations[n]){Object(br.f)(function(){e.accumulations[n]=Object(p.Hc)(a).variable(!1)})}var i=r.accumulations[n],o=t[n];Object(br.f)(function(){var t,r=e.m.mul(i).add(o);t=e.useNesterov?e.c.mul(o.add(r.mul(e.m))).add(a):e.c.mul(r).add(a),e.accumulations[n].assign(r),a.assign(t)})},r=this;for(var a in t)n(a)},e.prototype.dispose=function(){if(t.prototype.dispose.call(this),this.m.dispose(),null!=this.accumulations)for(var e in this.accumulations)this.accumulations[e].dispose()},e.prototype.setMomentum=function(t){this.momentum=t},e.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},e.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},e.className="MomentumOptimizer",e}(Cr);sr.register(_r);var Mr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),zr=function(t){function e(e,n,r,a,i){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===a&&(a=1e-8),void 0===i&&(i=!1);var o=t.call(this)||this;return o.learningRate=e,o.decay=n,o.momentum=r,o.epsilon=a,o.accumulatedMeanSquares={},o.accumulatedMeanGrads={},o.accumulatedMoments={},o.c=Object(br.e)(Object(p.Rb)(e)),o.epsilonScalar=Object(br.e)(Object(p.Rb)(a)),o.decayScalar=Object(br.e)(Object(p.Rb)(n)),o.momentumScalar=Object(br.e)(Object(p.Rb)(r)),o.oneMinusDecay=Object(br.e)(Object(p.Rb)(1-n)),o.centered=i,o}return Mr(e,t),e.prototype.applyGradients=function(t){var e=this,n=function(n){var a=l.ENV.engine.registeredVariables[n];if(null==r.accumulatedMeanSquares[n]){Object(br.f)(function(){e.accumulatedMeanSquares[n]=Object(p.Hc)(a).variable(!1)})}if(null==r.accumulatedMeanGrads[n]&&r.centered){Object(br.f)(function(){e.accumulatedMeanGrads[n]=Object(p.Hc)(a).variable(!1)})}if(null==r.accumulatedMoments[n]){Object(br.f)(function(){e.accumulatedMoments[n]=Object(p.Hc)(a).variable(!1)})}var i=r.accumulatedMeanSquares[n],o=r.accumulatedMeanGrads[n],s=r.accumulatedMoments[n],u=t[n];Object(br.f)(function(){var t=e.decayScalar.mul(i).add(e.oneMinusDecay.mul(u.square()));if(e.centered){var r=e.decayScalar.mul(o).add(e.oneMinusDecay.mul(u)),l=e.momentumScalar.mul(s).add(e.c.mul(u).div(t.sub(r.square().add(e.epsilonScalar)).sqrt()));e.accumulatedMeanSquares[n].assign(t),e.accumulatedMeanGrads[n].assign(r),e.accumulatedMoments[n].assign(l);var c=a.sub(l);a.assign(c)}else{var p=e.decayScalar.mul(i).add(e.oneMinusDecay.mul(u.square()));l=e.momentumScalar.mul(s).add(e.c.mul(u).div(p.add(e.epsilonScalar).sqrt()));e.accumulatedMeanSquares[n].assign(p),e.accumulatedMoments[n].assign(l);c=a.sub(l);a.assign(c)}})},r=this;for(var a in t)n(a)},e.prototype.dispose=function(){var t=this;this.c.dispose(),this.epsilonScalar.dispose(),this.decayScalar.dispose(),this.momentumScalar.dispose(),this.oneMinusDecay.dispose(),null!=this.accumulatedMeanSquares&&Object.keys(this.accumulatedMeanSquares).forEach(function(e){return t.accumulatedMeanSquares[e].dispose()}),null!=this.accumulatedMeanGrads&&this.centered&&Object.keys(this.accumulatedMeanGrads).forEach(function(e){return t.accumulatedMeanGrads[e].dispose()}),null!=this.accumulatedMoments&&Object.keys(this.accumulatedMoments).forEach(function(e){return t.accumulatedMoments[e].dispose()})},e.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},e.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},e.className="RMSPropOptimizer",e}(Or);sr.register(zr);var jr=n(15),Lr=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},Fr=function(){function t(){}return t.sgd=function(t){return new Cr(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new _r(t,e,n)},t.rmsprop=function(t,e,n,r,a){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=1e-8),void 0===a&&(a=!1),new zr(t,e,n,r,a)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=1e-8),new Tr(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=1e-8),new Sr(t,e,n)},t.adamax=function(t,e,n,r,a){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=1e-8),void 0===a&&(a=0),new Pr(t,e,n,r,a)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new Ar(t,e)},Lr([Object(Ye.a)({heading:"Training",subheading:"Optimizers",namespace:"train"})],t,"sgd",null),Lr([Object(Ye.a)({heading:"Training",subheading:"Optimizers",namespace:"train"})],t,"momentum",null),Lr([Object(Ye.a)({heading:"Training",subheading:"Optimizers",namespace:"train"})],t,"rmsprop",null),Lr([Object(Ye.a)({heading:"Training",subheading:"Optimizers",namespace:"train"})],t,"adam",null),Lr([Object(Ye.a)({heading:"Training",subheading:"Optimizers",namespace:"train"})],t,"adadelta",null),Lr([Object(Ye.a)({heading:"Training",subheading:"Optimizers",namespace:"train"})],t,"adamax",null),Lr([Object(Ye.a)({heading:"Training",subheading:"Optimizers",namespace:"train"})],t,"adagrad",null),t}(),Vr={sgd:Fr.sgd,momentum:Fr.momentum,adadelta:Fr.adadelta,adagrad:Fr.adagrad,rmsprop:Fr.rmsprop,adamax:Fr.adamax,adam:Fr.adam};n.d(e,"setBackend",function(){return Br}),n.d(e,"getBackend",function(){return Ur}),n.d(e,"disposeVariables",function(){return Wr}),n.d(e,"memory",function(){return qr}),n.d(e,"nextFrame",function(){return Gr}),n.d(e,"AdadeltaOptimizer",function(){return Sr}),n.d(e,"AdagradOptimizer",function(){return Ar}),n.d(e,"AdamOptimizer",function(){return Tr}),n.d(e,"AdamaxOptimizer",function(){return Pr}),n.d(e,"MomentumOptimizer",function(){return _r}),n.d(e,"Optimizer",function(){return Or}),n.d(e,"RMSPropOptimizer",function(){return zr}),n.d(e,"SGDOptimizer",function(){return Cr}),n.d(e,"Tensor",function(){return m.a}),n.d(e,"TensorBuffer",function(){return m.b}),n.d(e,"variable",function(){return m.d}),n.d(e,"Variable",function(){return m.c}),n.d(e,"Rank",function(){return g.a}),n.d(e,"batchNormalization",function(){return p.o}),n.d(e,"batchNormalization2d",function(){return p.p}),n.d(e,"batchNormalization3d",function(){return p.q}),n.d(e,"batchNormalization4d",function(){return p.r}),n.d(e,"concat",function(){return p.x}),n.d(e,"concat1d",function(){return p.y}),n.d(e,"concat2d",function(){return p.z}),n.d(e,"concat3d",function(){return p.A}),n.d(e,"concat4d",function(){return p.B}),n.d(e,"conv1d",function(){return p.C}),n.d(e,"conv2d",function(){return p.D}),n.d(e,"conv2dTranspose",function(){return p.E}),n.d(e,"depthwiseConv2d",function(){return p.I}),n.d(e,"separableConv2d",function(){return p.Tb}),n.d(e,"matMul",function(){return p.Ta}),n.d(e,"matrixTimesVector",function(){return p.Ua}),n.d(e,"outerProduct",function(){return p.tb}),n.d(e,"vectorTimesMatrix",function(){return p.Ec}),n.d(e,"avgPool",function(){return p.m}),n.d(e,"maxPool",function(){return p.Wa}),n.d(e,"transpose",function(){return p.Ac}),n.d(e,"reverse",function(){return p.Kb}),n.d(e,"reverse1d",function(){return p.Lb}),n.d(e,"reverse2d",function(){return p.Mb}),n.d(e,"reverse3d",function(){return p.Nb}),n.d(e,"reverse4d",function(){return p.Ob}),n.d(e,"slice",function(){return p.Yb}),n.d(e,"slice1d",function(){return p.Zb}),n.d(e,"slice2d",function(){return p.ac}),n.d(e,"slice3d",function(){return p.bc}),n.d(e,"slice4d",function(){return p.cc}),n.d(e,"stridedSlice",function(){return p.nc}),n.d(e,"argMax",function(){return p.f}),n.d(e,"argMin",function(){return p.g}),n.d(e,"logSumExp",function(){return p.Na}),n.d(e,"max",function(){return p.Va}),n.d(e,"mean",function(){return p.Za}),n.d(e,"min",function(){return p.ab}),n.d(e,"moments",function(){return p.fb}),n.d(e,"sum",function(){return p.qc}),n.d(e,"unsortedSegmentSum",function(){return p.Cc}),n.d(e,"equal",function(){return p.M}),n.d(e,"equalStrict",function(){return p.N}),n.d(e,"greater",function(){return p.X}),n.d(e,"greaterStrict",function(){return p.Aa}),n.d(e,"greaterEqual",function(){return p.Y}),n.d(e,"greaterEqualStrict",function(){return p.Z}),n.d(e,"less",function(){return p.Da}),n.d(e,"lessStrict",function(){return p.Ga}),n.d(e,"lessEqual",function(){return p.Ea}),n.d(e,"lessEqualStrict",function(){return p.Fa}),n.d(e,"notEqual",function(){return p.nb}),n.d(e,"notEqualStrict",function(){return p.ob}),n.d(e,"logicalNot",function(){return p.Pa}),n.d(e,"logicalAnd",function(){return p.Oa}),n.d(e,"logicalOr",function(){return p.Qa}),n.d(e,"logicalXor",function(){return p.Ra}),n.d(e,"where",function(){return p.Fc}),n.d(e,"abs",function(){return p.a}),n.d(e,"acos",function(){return p.b}),n.d(e,"acosh",function(){return p.c}),n.d(e,"asin",function(){return p.h}),n.d(e,"asinh",function(){return p.i}),n.d(e,"atan",function(){return p.j}),n.d(e,"atanh",function(){return p.l}),n.d(e,"ceil",function(){return p.u}),n.d(e,"clipByValue",function(){return p.v}),n.d(e,"cos",function(){return p.F}),n.d(e,"cosh",function(){return p.G}),n.d(e,"elu",function(){return p.L}),n.d(e,"exp",function(){return p.P}),n.d(e,"expm1",function(){return p.R}),n.d(e,"floor",function(){return p.U}),n.d(e,"sign",function(){return p.Vb}),n.d(e,"leakyRelu",function(){return p.Ca}),n.d(e,"log",function(){return p.Ka}),n.d(e,"log1p",function(){return p.La}),n.d(e,"logSigmoid",function(){return p.Ma}),n.d(e,"neg",function(){return p.lb}),n.d(e,"prelu",function(){return p.Bb}),n.d(e,"relu",function(){return p.Ib}),n.d(e,"reciprocal",function(){return p.Hb}),n.d(e,"round",function(){return p.Pb}),n.d(e,"selu",function(){return p.Sb}),n.d(e,"sigmoid",function(){return p.Ub}),n.d(e,"sin",function(){return p.Wb}),n.d(e,"sinh",function(){return p.Xb}),n.d(e,"softplus",function(){return p.ec}),n.d(e,"sqrt",function(){return p.gc}),n.d(e,"rsqrt",function(){return p.Qb}),n.d(e,"square",function(){return p.hc}),n.d(e,"step",function(){return p.mc}),n.d(e,"tan",function(){return p.rc}),n.d(e,"tanh",function(){return p.sc}),n.d(e,"erf",function(){return p.O}),n.d(e,"add",function(){return p.d}),n.d(e,"addStrict",function(){return p.e}),n.d(e,"atan2",function(){return p.k}),n.d(e,"div",function(){return p.J}),n.d(e,"divStrict",function(){return p.K}),n.d(e,"maximum",function(){return p.Xa}),n.d(e,"maximumStrict",function(){return p.Ya}),n.d(e,"minimum",function(){return p.bb}),n.d(e,"minimumStrict",function(){return p.cb}),n.d(e,"mod",function(){return p.db}),n.d(e,"modStrict",function(){return p.eb}),n.d(e,"mul",function(){return p.hb}),n.d(e,"mulStrict",function(){return p.ib}),n.d(e,"pow",function(){return p.zb}),n.d(e,"powStrict",function(){return p.Ab}),n.d(e,"sub",function(){return p.oc}),n.d(e,"subStrict",function(){return p.pc}),n.d(e,"squaredDifference",function(){return p.ic}),n.d(e,"squaredDifferenceStrict",function(){return p.jc}),n.d(e,"norm",function(){return p.mb}),n.d(e,"cast",function(){return p.t}),n.d(e,"clone",function(){return p.w}),n.d(e,"fromPixels",function(){return p.V}),n.d(e,"toPixels",function(){return p.zc}),n.d(e,"ones",function(){return p.qb}),n.d(e,"onesLike",function(){return p.rb}),n.d(e,"zeros",function(){return p.Gc}),n.d(e,"zerosLike",function(){return p.Hc}),n.d(e,"eye",function(){return p.S}),n.d(e,"rand",function(){return p.Db}),n.d(e,"randomNormal",function(){return p.Eb}),n.d(e,"truncatedNormal",function(){return p.Bc}),n.d(e,"randomUniform",function(){return p.Fb}),n.d(e,"multinomial",function(){return p.kb}),n.d(e,"reshape",function(){return p.Jb}),n.d(e,"squeeze",function(){return p.kc}),n.d(e,"tile",function(){return p.yc}),n.d(e,"gather",function(){return p.W}),n.d(e,"oneHot",function(){return p.pb}),n.d(e,"linspace",function(){return p.Ia}),n.d(e,"range",function(){return p.Gb}),n.d(e,"buffer",function(){return p.s}),n.d(e,"fill",function(){return p.T}),n.d(e,"tensor",function(){return p.tc}),n.d(e,"scalar",function(){return p.Rb}),n.d(e,"tensor1d",function(){return p.uc}),n.d(e,"tensor2d",function(){return p.vc}),n.d(e,"tensor3d",function(){return p.wc}),n.d(e,"tensor4d",function(){return p.xc}),n.d(e,"print",function(){return p.Cb}),n.d(e,"expandDims",function(){return p.Q}),n.d(e,"stack",function(){return p.lc}),n.d(e,"unstack",function(){return p.Dc}),n.d(e,"split",function(){return p.fc}),n.d(e,"cumsum",function(){return p.H}),n.d(e,"pad",function(){return p.ub}),n.d(e,"pad1d",function(){return p.vb}),n.d(e,"pad2d",function(){return p.wb}),n.d(e,"pad3d",function(){return p.xb}),n.d(e,"pad4d",function(){return p.yb}),n.d(e,"movingAverage",function(){return p.gb}),n.d(e,"basicLSTMCell",function(){return p.n}),n.d(e,"multiRNNCell",function(){return p.jb}),n.d(e,"softmax",function(){return p.dc}),n.d(e,"localResponseNormalization",function(){return p.Ja}),n.d(e,"linalg",function(){return p.Ha}),n.d(e,"operation",function(){return p.sb}),n.d(e,"losses",function(){return p.Sa}),n.d(e,"image",function(){return p.Ba}),n.d(e,"Reduction",function(){return jr.b}),n.d(e,"train",function(){return Vr}),n.d(e,"tidy",function(){return br.f}),n.d(e,"keep",function(){return br.e}),n.d(e,"dispose",function(){return br.b}),n.d(e,"time",function(){return br.g}),n.d(e,"grad",function(){return br.c}),n.d(e,"valueAndGrad",function(){return br.h}),n.d(e,"grads",function(){return br.d}),n.d(e,"valueAndGrads",function(){return br.i}),n.d(e,"variableGrads",function(){return br.j}),n.d(e,"customGrad",function(){return br.a}),n.d(e,"ENV",function(){return l.ENV}),n.d(e,"Environment",function(){return l.Environment}),n.d(e,"version_core",function(){return"0.11.0"}),n.d(e,"doc",function(){return Ye.a}),n.d(e,"environment",function(){return l}),n.d(e,"io",function(){return i}),n.d(e,"serialization",function(){return o}),n.d(e,"test_util",function(){return s}),n.d(e,"util",function(){return y}),n.d(e,"webgl",function(){return u});var Br=l.Environment.setBackend,Ur=l.Environment.getBackend,Wr=l.Environment.disposeVariables,qr=l.Environment.memory,Gr=Qe.nextFrame},function(t,e,n){"use strict";n.r(e),n.d(e,"assertArgumentsAreTensors",function(){return i}),n.d(e,"shuffle",function(){return o}),n.d(e,"clamp",function(){return s}),n.d(e,"randUniform",function(){return u}),n.d(e,"distSquared",function(){return l}),n.d(e,"assert",function(){return c}),n.d(e,"assertShapesMatch",function(){return p}),n.d(e,"assertTypesMatch",function(){return f}),n.d(e,"flatten",function(){return h}),n.d(e,"inferShape",function(){return d}),n.d(e,"sizeFromShape",function(){return m}),n.d(e,"isScalarShape",function(){return g}),n.d(e,"arraysEqual",function(){return y}),n.d(e,"isInt",function(){return v}),n.d(e,"tanh",function(){return b}),n.d(e,"sizeToSquarishShape",function(){return w}),n.d(e,"createShuffledIndices",function(){return x}),n.d(e,"rightPad",function(){return O}),n.d(e,"repeatedTry",function(){return N}),n.d(e,"getQueryParams",function(){return S}),n.d(e,"inferFromImplicitShape",function(){return E}),n.d(e,"squeezeShape",function(){return A}),n.d(e,"getTypedArrayFromDType",function(){return I}),n.d(e,"isTensorInList",function(){return T}),n.d(e,"checkForNaN",function(){return k}),n.d(e,"flattenNameArrayMap",function(){return P}),n.d(e,"unflattenToNameArrayMap",function(){return R}),n.d(e,"hasEncodingLoss",function(){return C}),n.d(e,"copyTypedArray",function(){return D}),n.d(e,"isTypedArray",function(){return _}),n.d(e,"bytesPerElement",function(){return M}),n.d(e,"isFunction",function(){return z}),n.d(e,"extractTensorsFromContainer",function(){return j}),n.d(e,"extractTensorsFromAny",function(){return L});var r=n(6);function a(t,e,n){c(t instanceof r.a,"Argument '"+e+"' passed to '"+n+"' must be a Tensor, but got "+typeof t+".")}function i(t,e){var n=function(n){var r=t[n];Array.isArray(r)?r.forEach(function(t,r){a(t,n+"["+r+"]",e)}):a(r,n,e)};for(var r in t)n(r)}function o(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function s(t,e,n){return Math.max(t,Math.min(e,n))}function u(t,e){return Math.random()*(e-t)+t}function l(t,e){for(var n=0,r=0;r<t.length;r++){var a=Number(t[r])-Number(e[r]);n+=a*a}return n}function c(t,e){if(!t)throw new Error(e)}function p(t,e,n){void 0===n&&(n=""),c(y(t,e),n+" Shapes "+t+" and "+e+" must match")}function f(t,e){c(t.dtype===e.dtype," The dtypes of the first("+t.dtype+") and second("+e.dtype+") input must match")}function h(t,e){if(void 0===e&&(e=[]),Array.isArray(t))for(var n=0;n<t.length;++n)h(t[n],e);else e.push(t);return e}function d(t){if(_(t))return[t.length];if(!Array.isArray(t))return[];for(var e=[];t instanceof Array;)e.push(t.length),t=t[0];return e}function m(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function g(t){return 0===t.length}function y(t,e){if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function v(t){return t%1==0}function b(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)}function w(t){for(var e=Math.floor(Math.sqrt(t));e>1;--e)if(t%e==0)return[e,t/e];return[1,t]}function x(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return o(e),e}function O(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function N(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise(function(r,a){var i=0,o=function(){if(t())r();else{var s=e(++i);null!=n&&i>=n?a():setTimeout(o,s)}};setTimeout(o,0)})}function S(t){var e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")}),e}function E(t,e){for(var n=1,r=-1,a=0;a<t.length;++a)if(t[a]>0)n*=t[a];else if(-1===t[a]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found - 1 at dim "+r+" and dim "+a);r=a}else if(t[a]<=0)throw Error("Shapes can not be <= 0. Found "+t[a]+" at dim "+a);if(-1===r){if(e>0&&e!==n)throw Error("Size("+e+") must match the product of shape "+t);return t}if(e%n!=0)throw Error("The implicit shape can't be a fractional number. Got "+e+" / "+n);var i=t.slice();return i[r]=e/n,i}function A(t,e){for(var n=[],r=[],a=0,i=0;i<t.length;++i){if(null!=e){if(e[a]===i&&t[i]>1)throw new Error("Can't squeeze axis "+i+" since its dim '"+t[i]+"' is not 1");(null==e[a]||e[a]>i)&&1===t[i]&&(n.push(t[i]),r.push(i)),e[a]<=i&&a++}t[i]>1&&(n.push(t[i]),r.push(i))}return{newShape:n,keptDims:r}}function I(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function T(t,e){for(var n=0;n<e.length;n++)if(e[n].id===t.id)return!0;return!1}function k(t,e,n){if("float32"===e)for(var r=0;r<t.length;r++)if(isNaN(t[r]))throw Error("The result of the '"+n+"' has NaNs.")}function P(t,e){var n=[];if(t instanceof r.a)n.push(t);else for(var a=t,i=0;i<e.length;i++)n.push(a[e[i]]);return n}function R(t,e){if(t.length!==e.length)throw new Error("Cannot unflatten Tensor[], keys and arrays are not of same length.");for(var n={},r=0;r<t.length;r++)n[t[r]]=e[r];return n}function C(t,e){return"float32"!==e&&(("int32"!==e||"float32"===t)&&("bool"!==e||"bool"!==t))}function D(t,e){if(null==e||"float32"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){for(var n=new Uint8Array(t.length),r=0;r<n.length;++r)0!==Math.round(t[r])&&(n[r]=1);return n}throw new Error("Unknown data type "+e)}function _(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function M(t){if("float32"===t||"int32"===t)return 4;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function z(t){return!!(t&&t.constructor&&t.call&&t.apply)}function j(t){return L(t)}function L(t){if(null==t)return[];if(t instanceof r.a)return[t];var e,n=[],a=t;if(e=a,!Array.isArray(e)&&"object"!=typeof e)return[];for(var i in a){var o=h(a[i]).filter(function(t){return t instanceof r.a});n.push.apply(n,o)}return n}},function(t,e,n){"use strict";var r=n(9),a=n(3),i=n(4),o=n(1),s=n(10),u=n(5),l=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},c=function(){function t(){}return t.batchNormalization2d=function(e,n,r,a,i,s){return void 0===a&&(a=.001),o.assert(2===e.rank,"Error in batchNormalization3D: x must be rank 3 but got rank "+e.rank+"."),o.assert(2===n.rank||1===n.rank,"Error in batchNormalization2D: mean must be rank 2 or rank 1 but got rank "+n.rank+"."),o.assert(2===r.rank||1===r.rank,"Error in batchNormalization2D: variance must be rank 2 or rank 1 but got rank "+r.rank+"."),null!=i&&o.assert(2===i.rank||1===i.rank,"Error in batchNormalization2D: scale must be rank 2 or rank 1 but got rank "+i.rank+"."),null!=s&&o.assert(2===s.rank||1===s.rank,"Error in batchNormalization2D: offset must be rank 2 or rank 1 but got rank "+s.rank+"."),t.batchNormalization(e,n,r,a,i,s)},t.batchNormalization3d=function(e,n,r,a,i,s){return void 0===a&&(a=.001),o.assert(3===e.rank,"Error in batchNormalization3D: x must be rank 3 but got rank "+e.rank+"."),o.assert(3===n.rank||1===n.rank,"Error in batchNormalization3D: mean must be rank 3 or rank 1 but got rank "+n.rank+"."),o.assert(3===r.rank||1===r.rank,"Error in batchNormalization3D: variance must be rank 3 or rank 1 but got rank "+r.rank+"."),null!=i&&o.assert(3===i.rank||1===i.rank,"Error in batchNormalization3D: scale must be rank 3 or rank 1 but got rank "+i.rank+"."),null!=s&&o.assert(3===s.rank||1===s.rank,"Error in batchNormalization3D: offset must be rank 3 or rank 1 but got rank "+s.rank+"."),t.batchNormalization(e,n,r,a,i,s)},t.batchNormalization4d=function(e,n,r,a,i,s){return void 0===a&&(a=.001),o.assert(4===e.rank,"Error in batchNormalization4D: x must be rank 4 but got rank "+e.rank+"."),o.assert(4===n.rank||1===n.rank,"Error in batchNormalization4D: mean must be rank 4 or rank 1 but got rank "+n.rank+"."),o.assert(4===r.rank||1===r.rank,"Error in batchNormalization4D: variance must be rank 4 or rank 1 but got rank "+r.rank+"."),null!=i&&o.assert(4===i.rank||1===i.rank,"Error in batchNormalization4D: scale must be rank 4 or rank 1 but got rank "+i.rank+"."),null!=s&&o.assert(4===s.rank||1===s.rank,"Error in batchNormalization4D: offset must be rank 4 or rank 1 but got rank "+s.rank+"."),t.batchNormalization(e,n,r,a,i,s)},t.batchNormalization=function(t,e,n,a,u,l){var c;void 0===a&&(a=.001),o.assertArgumentsAreTensors({x:t,mean:e,variance:n},"batchNormalization"),null!=u&&o.assertArgumentsAreTensors({scale:u},"batchNormalization"),null!=l&&o.assertArgumentsAreTensors({offset:l},"batchNormalization"),o.assert(e.rank===n.rank,"Batch normalization gradient requires mean and variance to have equal ranks."),o.assert(null==l||e.rank===l.rank,"Batch normalization gradient requires mean and offset to have equal ranks."),o.assert(null==u||e.rank===u.rank,"Batch normalization gradient requires mean and scale to have equal ranks."),c=0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t;return i.ENV.engine.runKernel(function(t){return t.batchNormalization(c,p(e),p(n),a,p(u),p(l))},{x:t,mean:e,variance:n,scale:u,offset:l},function(i){var o=null==u?r.a.scalar(1):u,l=Object(s.d)(e.shape,c.shape),p=[];if(1===e.rank){for(var f=0;f<c.shape.length-1;++f)p.push(c.shape[f]);p.push(1)}var h=t.sub(e),d=i.mul(o),m=He(n.add(r.a.scalar(a))),g=m.mul(m).mul(m).mul(r.a.scalar(-.5));return{x:function(){return 1===e.rank?i.mul(r.a.tile(m.as4D(1,1,1,e.shape[0]),p)).mul(o).reshape(t.shape):i.mul(m).mul(o).reshape(t.shape)},mean:function(){var t=m.mul(r.a.scalar(-1)).mul(d);return 1===e.rank&&(t=t.sum(l)),t.reshape(e.shape)},variance:function(){var t=g.mul(h).mul(d);return 1===e.rank&&(t=t.sum(l)),t.reshape(e.shape)},scale:function(){var t=h.mul(m),n=i.mul(t);return 1===e.rank&&(n=n.sum(l)),n.reshape(e.shape)},offset:function(){var t=i;return 1===e.rank&&(t=t.sum(l)),t.reshape(e.shape)}}}).reshape(t.shape)},l([u.a],t,"batchNormalization2d",null),l([u.a],t,"batchNormalization3d",null),l([u.a],t,"batchNormalization4d",null),l([Object(a.a)({heading:"Operations",subheading:"Normalization"})],t,"batchNormalization",null),t}();function p(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}var f=n(11),h=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},d=function(){function t(){}return t.add=function(t,e){o.assertArgumentsAreTensors({a:t,b:e},"add"),o.assertTypesMatch(t,e);var n=s.a(t.shape,e.shape);return i.ENV.engine.runKernel(function(n){return n.add(t,e)},{a:t,b:e},function(r){return{a:function(){var e=r,a=s.d(t.shape,n);return a.length>0&&(e=e.sum(a)),e.reshape(t.shape)},b:function(){var t=r,a=s.d(e.shape,n);return a.length>0&&(t=t.sum(a)),t.reshape(e.shape)}}})},t.addStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in addStrict: "),t.add(e)},t.sub=function(t,e){o.assertArgumentsAreTensors({a:t,b:e},"sub"),o.assertTypesMatch(t,e);var n=s.a(t.shape,e.shape);return i.ENV.engine.runKernel(function(n){return n.subtract(t,e)},{a:t,b:e},function(r){return{a:function(){var e=r,a=s.d(t.shape,n);return a.length>0&&(e=e.sum(a)),e.reshape(t.shape)},b:function(){var t=r,a=s.d(e.shape,n);return a.length>0&&(t=t.sum(a)),t.neg().reshape(e.shape)}}})},t.subStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in subStrict: "),t.sub(e)},t.pow=function(t,e){o.assertArgumentsAreTensors({base:t,exp:e},"pow");var n=s.a(t.shape,e.shape);t=t.cast(Object(f.c)(t.dtype,e.dtype)),e=e.cast(Object(f.c)(t.dtype,e.dtype));return i.ENV.engine.runKernel(function(n,r){return r(n.pow(t,e))},{base:t,exp:e},function(r,a){var i=a[0];return{base:function(){var a=r.mul(e.toFloat().mul(i.div(t))),o=s.d(t.shape,n);return o.length>0&&(a=a.sum(o)),a.reshape(t.shape)},exp:function(){var a=r.mul(i.mul(t.log()).toFloat()),o=s.d(e.shape,n);return o.length>0&&(a=a.sum(o)),a.reshape(e.shape)}}})},t.powStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in powStrict: "),t.pow(e)},t.mul=function(t,e){o.assertArgumentsAreTensors({a:t,b:e},"mul"),o.assertTypesMatch(t,e);var n=s.a(t.shape,e.shape);return i.ENV.engine.runKernel(function(n){return n.multiply(t,e)},{a:t,b:e},function(r){return{a:function(){var a=r.mul(e.toFloat()),i=s.d(t.shape,n);return i.length>0?a.sum(i).reshape(t.shape):a},b:function(){var a=r.mul(t.toFloat()),i=s.d(e.shape,n);return i.length>0?a.sum(i).reshape(e.shape):a}}})},t.mulStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in multiplyStrict: "),t.mul(e)},t.div=function(t,e){o.assertArgumentsAreTensors({a:t,b:e},"div"),o.assertTypesMatch(t,e);var n=s.a(t.shape,e.shape);return i.ENV.engine.runKernel(function(n){return n.divide(t,e)},{a:t,b:e},function(r){return{a:function(){var a=r.div(e.toFloat()),i=s.d(t.shape,n);return i.length>0?a.sum(i).reshape(t.shape):a},b:function(){var a=r.mul(t.toFloat()),i=s.d(e.shape,n);i.length>0&&(a=a.sum(i).reshape(e.shape));var o=e.square();return a.div(o.toFloat()).neg()}}})},t.divStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in divideStrict: "),t.div(e)},t.mod=function(t,e){o.assertArgumentsAreTensors({a:t,b:e},"mod"),o.assertTypesMatch(t,e);var n=s.a(t.shape,e.shape);return i.ENV.engine.runKernel(function(n){return n.mod(t,e)},{a:t,b:e},function(r){return{a:function(){var e=s.d(t.shape,n);return e.length>0?r.sum(e).reshape(t.shape):r},b:function(){var a=r.mul(t.div(e).floor().neg()),i=s.d(e.shape,n);return i.length>0?a.sum(i).reshape(e.shape):a}}})},t.modStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in modStrict: "),t.mod(e)},t.minimum=function(t,e){o.assertArgumentsAreTensors({a:t,b:e},"minimum"),o.assertTypesMatch(t,e),"bool"===t.dtype&&(t=t.toInt()),"bool"===e.dtype&&(e=e.toInt()),s.a(t.shape,e.shape);return i.ENV.engine.runKernel(function(n){return n.minimum(t,e)},{a:t,b:e},function(n){return{a:function(){return n.mul(t.lessEqual(e).toFloat())},b:function(){return n.mul(t.greater(e).toFloat())}}})},t.minimumStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in minimumStrict: "),t.minimum(e)},t.maximum=function(t,e){o.assertArgumentsAreTensors({a:t,b:e},"maximum"),o.assertTypesMatch(t,e),"bool"===t.dtype&&(t=t.toInt()),"bool"===e.dtype&&(e=e.toInt()),s.a(t.shape,e.shape);return i.ENV.engine.runKernel(function(n){return n.maximum(t,e)},{a:t,b:e},function(n){return{a:function(){return n.mul(t.greaterEqual(e).toFloat())},b:function(){return n.mul(t.less(e).toFloat())}}})},t.maximumStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in minimumStrict: "),t.maximum(e)},t.squaredDifference=function(t,e){o.assertArgumentsAreTensors({a:t,b:e},"squaredDifference"),o.assertTypesMatch(t,e),s.a(t.shape,e.shape);return i.ENV.engine.runKernel(function(n){return n.squaredDifference(t,e)},{a:t,b:e},function(n){var r=Wn(2);return{a:function(){return n.mul(t.sub(e).mul(r))},b:function(){return n.mul(e.sub(t).mul(r))}}})},t.squaredDifferenceStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in squaredDifferenceStrict: "),t.squaredDifference(e)},t.atan2=function(e,n){o.assertArgumentsAreTensors({a:e,b:n},"atan2"),o.assertTypesMatch(e,n);var r=s.a(e.shape,n.shape);return i.ENV.engine.runKernel(function(t){return t.atan2(e,n)},{a:e,b:n},function(a){return{a:function(){var i=t.add(Ke(e),Ke(n)),o=a.mul(n.div(i)),u=s.d(e.shape,r);return u.length>0&&(o=o.sum(u)),o.reshape(e.shape)},b:function(){var i=t.add(Ke(e),Ke(n)),o=Me(a.mul(e.div(i))),u=s.d(n.shape,r);return u.length>0&&(o=o.sum(u)),o.reshape(n.shape)}}})},h([Object(a.a)({heading:"Operations",subheading:"Arithmetic"}),u.a],t,"add",null),h([u.a],t,"addStrict",null),h([Object(a.a)({heading:"Operations",subheading:"Arithmetic"}),u.a],t,"sub",null),h([u.a],t,"subStrict",null),h([Object(a.a)({heading:"Operations",subheading:"Arithmetic"}),u.a],t,"pow",null),h([u.a],t,"powStrict",null),h([Object(a.a)({heading:"Operations",subheading:"Arithmetic"}),u.a],t,"mul",null),h([u.a],t,"mulStrict",null),h([Object(a.a)({heading:"Operations",subheading:"Arithmetic"}),u.a],t,"div",null),h([u.a],t,"divStrict",null),h([Object(a.a)({heading:"Operations",subheading:"Arithmetic"}),u.a],t,"mod",null),h([u.a],t,"modStrict",null),h([Object(a.a)({heading:"Operations",subheading:"Arithmetic"}),u.a],t,"minimum",null),h([u.a],t,"minimumStrict",null),h([Object(a.a)({heading:"Operations",subheading:"Arithmetic"}),u.a],t,"maximum",null),h([u.a],t,"maximumStrict",null),h([Object(a.a)({heading:"Operations",subheading:"Arithmetic"}),u.a],t,"squaredDifference",null),h([u.a],t,"squaredDifferenceStrict",null),h([u.a],t,"atan2",null),t}(),m=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},g=function(){function t(){}return t.notEqual=function(t,e){return o.assertArgumentsAreTensors({a:t,b:e},"notEqual"),o.assertTypesMatch(t,e),s.a(t.shape,e.shape),i.ENV.engine.runKernel(function(n){return n.notEqual(t,e)},{a:t,b:e})},t.notEqualStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in notEqualStrict: "),t.notEqual(e)},t.less=function(t,e){return o.assertArgumentsAreTensors({a:t,b:e},"less"),o.assertTypesMatch(t,e),s.a(t.shape,e.shape),i.ENV.engine.runKernel(function(n){return n.less(t,e)},{a:t,b:e})},t.lessStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in lessStrict: "),t.less(e)},t.equal=function(t,e){return o.assertArgumentsAreTensors({a:t,b:e},"equal"),o.assertTypesMatch(t,e),s.a(t.shape,e.shape),i.ENV.engine.runKernel(function(n){return n.equal(t,e)},{a:t,b:e})},t.equalStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in equalStrict: "),t.equal(e)},t.lessEqual=function(t,e){return o.assertArgumentsAreTensors({a:t,b:e},"lessEqual"),o.assertTypesMatch(t,e),s.a(t.shape,e.shape),i.ENV.engine.runKernel(function(n){return n.lessEqual(t,e)},{a:t,b:e})},t.lessEqualStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in lessEqualStrict: "),t.lessEqual(e)},t.greater=function(t,e){return o.assertArgumentsAreTensors({a:t,b:e},"greater"),o.assertTypesMatch(t,e),s.a(t.shape,e.shape),i.ENV.engine.runKernel(function(n){return n.greater(t,e)},{a:t,b:e})},t.greaterStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in greaterStrict: "),t.greater(e)},t.greaterEqual=function(t,e){return o.assertArgumentsAreTensors({a:t,b:e},"greaterEqual"),o.assertTypesMatch(t,e),s.a(t.shape,e.shape),i.ENV.engine.runKernel(function(n){return n.greaterEqual(t,e)},{a:t,b:e})},t.greaterEqualStrict=function(t,e){return o.assertShapesMatch(t.shape,e.shape,"Error in greaterEqualStrict: "),t.greaterEqual(e)},m([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"notEqual",null),m([u.a],t,"notEqualStrict",null),m([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"less",null),m([u.a],t,"lessStrict",null),m([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"equal",null),m([u.a],t,"equalStrict",null),m([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"lessEqual",null),m([u.a],t,"lessEqualStrict",null),m([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"greater",null),m([u.a],t,"greaterStrict",null),m([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"greaterEqual",null),m([u.a],t,"greaterEqualStrict",null),t}(),y=n(18);function v(t,e,n,r,a,i){void 0===i&&(i="channelsLast");var o,s=w(e),u=s[0],l=s[1];if("channelsLast"===i)o=[u,l,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);o=[u,l,t[1],t[1]]}return b(t,o,n,1,r,a,!1,i)}function b(t,e,n,r,a,i,s,u){void 0===s&&(s=!1),void 0===u&&(u="channelsLast");var l=[-1,-1,-1,-1],c=l[0],p=l[1],f=l[2],h=l[3];if("channelsLast"===u)c=t[0],p=t[1],f=t[2],h=t[3];else{if("channelsFirst"!==u)throw new Error("Unknown dataFormat "+u);c=t[0],h=t[1],p=t[2],f=t[3]}var d,m=e[0],g=e[1],y=e[3],v=w(n),b=v[0],N=v[1],S=w(r),E=S[0],A=S[1],I=function(t,e,n,r,a,i,s,u){var l,c,p;if("number"==typeof t){var f=0===t?"VALID":"NUMBER";l={top:t,bottom:t,left:t,right:t,type:f};var h=function(t,e,n,r,a,i){null==a&&(a=function(t,e,n,r){void 0===r&&(r=1);var a=x(e,r);return Math.floor((t[0]*(n-1)-n+a)/2)}(t,e,r));var s=t[0],u=t[1],l=O((s-e+2*a)/r+1,i);o.assert(o.isInt(l),"The output # of rows ("+l+") must be an integer. Change the stride and/or zero pad parameters");var c=O((u-e+2*a)/r+1,i);return o.assert(o.isInt(c),"The output # of columns ("+c+") must be an integer. Change the stride and/or zero pad parameters"),[l,c,n]}([e,n,1],i,1,r,t,u);c=h[0],p=h[1]}else if("same"===t){c=Math.ceil(e/r),p=Math.ceil(n/a);var d=(c-1)*r+i-e,m=(p-1)*a+s-n,g=Math.floor(d/2),y=d-g,v=Math.floor(m/2),b=m-v;l={top:g,bottom:y,left:v,right:b,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-i+1)/r),p=Math.ceil((n-s+1)/a)}return{padInfo:l,outHeight:c,outWidth:p}}(a,p,f,b,N,x(m,E),x(g,A),i),T=I.padInfo,k=I.outHeight,P=I.outWidth,R=s?y*h:y;return"channelsFirst"===u?d=[c,R,k,P]:"channelsLast"===u&&(d=[c,k,P,R]),{batchSize:c,dataFormat:u,inHeight:p,inWidth:f,inChannels:h,outHeight:k,outWidth:P,outChannels:R,padInfo:T,strideHeight:b,strideWidth:N,filterHeight:m,filterWidth:g,dilationHeight:E,dilationWidth:A,inShape:t,outShape:d,filterShape:e}}function w(t){return"number"==typeof t?[t,t]:t}function x(t,e){return e<=1?t:t+(t-1)*(e-1)}function O(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}var N=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},S=function(){function t(){}return t.conv1d=function(e,n,r,a,i,s,u){void 0===i&&(i="NWC"),void 0===s&&(s=1),o.assertArgumentsAreTensors({x:e,filter:n},"conv1d");var l=e,c=!1;2===e.rank&&(c=!0,l=e.as3D(1,e.shape[0],e.shape[1])),o.assert(3===l.rank,"Error in conv1d: input must be rank 3, but got rank "+l.rank+"."),o.assert(3===n.rank,"Error in conv1d: filter must be rank 3, but got rank "+n.rank+"."),null!=u&&o.assert(o.isInt(a),"Error in conv1d: pad must be an integer when using, dimRoundingMode "+u+" but got pad "+a+"."),o.assert(l.shape[2]===n.shape[1],"Error in conv1d: depth of input ("+l.shape[2]+") must match  input depth for filter "+n.shape[1]+"."),o.assert(A(r,s),"Error in conv1D: Either stride or dilation must be 1.Got stride "+r+" and dilation '"+s+"'"),o.assert("NWC"===i,"Error in conv1d: got dataFormat of "+i+" but only NWC is currently supported.");var p=n.as4D(1,n.shape[0],n.shape[1],n.shape[2]),f=l.as4D(l.shape[0],1,l.shape[1],l.shape[2]),h=[1,r],d=[1,s],m=t.conv2d(f,p,h,a,"NHWC",d,u);return c?m.as2D(m.shape[2],m.shape[3]):m.as3D(m.shape[0],m.shape[2],m.shape[3])},t.conv2d=function(e,n,r,a,s,u,l){void 0===s&&(s="NHWC"),void 0===u&&(u=[1,1]),o.assertArgumentsAreTensors({x:e,filter:n},"conv2d");var c=e,p=!1;3===e.rank&&(p=!0,c=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),o.assert(4===c.rank,"Error in conv2d: input must be rank 4, but got rank "+c.rank+"."),o.assert(4===n.rank,"Error in conv2d: filter must be rank 4, but got rank "+n.rank+"."),null!=l&&o.assert(o.isInt(a),"Error in conv2d: pad must be an integer when using, dimRoundingMode "+l+" but got pad "+a+"."),o.assert(c.shape[3]===n.shape[2],"Error in conv2d: depth of input ("+c.shape[3]+") must match  input depth for filter "+n.shape[2]+"."),o.assert(A(r,u),"Error in conv2D: Either strides or dilations must be 1.Got strides "+r+" and dilations '"+u+"'"),o.assert("NHWC"===s,"Error in conv2d: got dataFormat of "+s+" but only NHWC is currently supported.");var f=b(c.shape,n.shape,r,u,a,l),h=i.ENV.engine.runKernel(function(t){return t.conv2d(c,n,f)},{x:c,filter:n},function(e){return o.assert(E(u),"Error in gradient of conv2D: dilation rates greater than 1 are notyet supported in gradients. Got dilations '"+u+"'"),{x:function(){return t.conv2dDerInput(c.shape,e,n,r,a)},filter:function(){return t.conv2dDerFilter(c,e,n.shape,r,a)}}});return p?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h},t.conv2dDerInput=function(t,e,n,r,a,s){o.assertArgumentsAreTensors({dy:e,filter:n},"conv2dDerInput"),o.assert(t.length===e.rank,"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match");var u=t,l=e,c=!1;3===e.rank&&(c=!0,l=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),u=[1,t[0],t[1],t[2]]);var p=u[3],f=l.shape[3];o.assert(4===u.length,"Error in conv2dDerInput: inShape must be length 4, but got length "+u.length+"."),o.assert(4===l.rank,"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank),o.assert(4===n.rank,"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank),o.assert(p===n.shape[2],"Error in conv2dDerInput: depth of input ("+p+") must match input depth for filter "+n.shape[2]+"."),o.assert(f===n.shape[3],"Error in conv2dDerInput: depth of output ("+f+") mustmatch output depth for filter "+n.shape[3]+"."),null!=s&&o.assert(o.isInt(a),"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+a+".");var h=b(u,n.shape,r,1,a,s),d=i.ENV.engine.runKernel(function(t){return t.conv2dDerInput(l,n,h)},{dy4D:l});return c?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d},t.conv2dDerFilter=function(t,e,n,r,a,s){o.assertArgumentsAreTensors({x:t,dy:e},"conv2dDerFilter");var u=t;3===t.rank&&(u=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var l=e;3===l.rank&&(l=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),o.assert(4===u.rank,"Error in conv2dDerFilter: input must be rank 4, but got shape "+u.shape+"."),o.assert(4===l.rank,"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+"."),o.assert(4===n.length,"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."),o.assert(u.shape[3]===n[2],"Error in conv2dDerFilter: depth of input "+u.shape[3]+") must match input depth in filter ("+n[2]+"."),o.assert(l.shape[3]===n[3],"Error in conv2dDerFilter: depth of dy ("+l.shape[3]+") must match output depth for filter ("+n[3]+")."),null!=s&&o.assert(o.isInt(a),"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+a+".");var c=b(u.shape,n,r,1,a,s);return i.ENV.engine.runKernel(function(t){return t.conv2dDerFilter(u,l,c)},{x4D:u,dy4D:l})},t.conv2dTranspose=function(e,n,r,a,i,s){return o.assertArgumentsAreTensors({x:e,filter:n},"conv2dTranspose"),t.conv2dDerInput(r,e,n,a,i,s)},t.depthwiseConv2d=function(t,e,n,r,a,s,u){void 0===a&&(a="NHWC"),void 0===s&&(s=[1,1]),o.assertArgumentsAreTensors({x:t,filter:e},"depthwiseConv2d");var l=t,c=!1;3===t.rank&&(c=!0,l=t.as4D(1,t.shape[0],t.shape[1],t.shape[2])),o.assert(4===l.rank,"Error in depthwiseConv2D: input must be rank 4, but got rank "+l.rank+"."),o.assert(4===e.rank,"Error in depthwiseConv2D: filter must be rank 4, but got rank "+e.rank+"."),o.assert(l.shape[3]===e.shape[2],"Error in depthwiseConv2D: number of input channels ("+l.shape[3]+") must match the inChannels dimension in filter "+e.shape[2]+"."),null==s&&(s=[1,1]),o.assert(A(n,s),"Error in depthwiseConv2d: Either strides or dilations must be 1.Got strides "+n+" and dilations '"+s+"'"),null!=u&&o.assert(o.isInt(r),"Error in depthwiseConv2D: pad must be an integer when using, dimRoundingMode "+u+" but got pad "+r+".");var p=b(l.shape,e.shape,n,s,r,u,!0),f=i.ENV.engine.runKernel(function(t){return t.depthwiseConv2D(l,e,p)},{x4D:l,filter:e});return c?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f},t.separableConv2d=function(e,n,r,a,i,s,u){void 0===s&&(s=[1,1]),void 0===u&&(u="NHWC"),o.assertArgumentsAreTensors({x:e,depthwiseFilter:n,pointwiseFilter:r},"separableConv2d");var l=e,c=!1;if(3===e.rank&&(c=!0,l=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),"NCHW"===u)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");o.assert(4===l.rank,"Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."),o.assert(4===n.rank,"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+n.rank+"."),o.assert(4===r.rank,"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+n.rank+"."),o.assert(1===r.shape[0],"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+r.shape[0]+"."),o.assert(1===r.shape[1],"Error in separableConv2d: the second dimension of pointwise filter  must be 1, but got "+r.shape[1]+".");var p=n.shape[2],f=n.shape[3];o.assert(r.shape[2]===p*f,"Error in separableConv2d: the third dimension of pointwise filter must be "+p*f+", but got "+r.shape[2]+".");var h=t.depthwiseConv2d(l,n,a,i,u,s),d=t.conv2d(h,r,1,"valid",u);return c?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d},N([Object(a.a)({heading:"Operations",subheading:"Convolution"}),u.a],t,"conv1d",null),N([Object(a.a)({heading:"Operations",subheading:"Convolution"}),u.a],t,"conv2d",null),N([u.a],t,"conv2dDerInput",null),N([u.a],t,"conv2dDerFilter",null),N([Object(a.a)({heading:"Operations",subheading:"Convolution"}),u.a],t,"conv2dTranspose",null),N([Object(a.a)({heading:"Operations",subheading:"Convolution"}),u.a],t,"depthwiseConv2d",null),N([Object(a.a)({heading:"Operations",subheading:"Convolution"}),u.a],t,"separableConv2d",null),t}();function E(t){var e=function(t){return"number"==typeof t?[t,t]:t}(t),n=e[0],r=e[1];return 1===n&&1===r}function A(t,e){return E(t)||E(e)}var I=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},T=function(){function t(){}return t.resizeBilinear=function(t,e,n){void 0===n&&(n=!1),o.assertArgumentsAreTensors({images:t},"resizeBilinear"),o.assert(3===t.rank||4===t.rank,"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+t.rank+"."),o.assert(2===e.length,"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");var r=t,a=!1;3===t.rank&&(a=!0,r=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var s=e[0],u=e[1],l=i.ENV.engine.runKernel(function(t,e){return t.resizeBilinear(r,s,u,n)},{batchImages:r},function(t,e){return{batchImages:function(){return i.ENV.engine.runKernel(function(e){return e.resizeBilinearBackprop(t,r,n)},{})}}});return a?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l},t.resizeNearestNeighbor=function(t,e,n){void 0===n&&(n=!1),o.assertArgumentsAreTensors({images:t},"resizeNearestNeighbor"),o.assert(3===t.rank||4===t.rank,"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+t.rank+"."),o.assert(2===e.length,"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),o.assert("float32"===t.dtype||"int32"===t.dtype,"`images` must have `int32` or `float32` as dtype");var r=t,a=!1;3===t.rank&&(a=!0,r=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var s=e[0],u=e[1],l=i.ENV.engine.runKernel(function(t){return t.resizeNearestNeighbor(r,s,u,n)},{batchImages:r});return a?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l},I([Object(a.a)({heading:"Operations",subheading:"Images",namespace:"image"}),u.a],t,"resizeBilinear",null),I([Object(a.a)({heading:"Operations",subheading:"Images",namespace:"image"}),u.a],t,"resizeNearestNeighbor",null),t}(),k=n(21),P=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},R=function(){function t(){}return t.gramSchmidt=function(t){var e;if(Array.isArray(t)){e=!1,Object(o.assert)(null!=t&&t.length>0,"Gram-Schmidt process: input must not be null, undefined, or empty");for(var n=t[0].shape[0],r=1;r<t.length;++r)Object(o.assert)(t[r].shape[0]===n,"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[r].shape[0]+" vs. "+n+")")}else e=!0,t=Zn(t,t.shape[0],0).map(function(t){return _n(t,[0])});Object(o.assert)(t.length<=t[0].shape[0],"Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+").");var a=[],i=t,s=function(t){a.push(k.a.tidy(function(){var e=i[t];if(t>0)for(var n=0;n<t;++n){var r=Jt(a[n].mulStrict(e)).mul(a[n]);e=e.sub(r)}return e.div(vn(e,"euclidean"))}))};for(r=0;r<t.length;++r)s(r);return e?Jn(a,0):a},P([Object(a.a)({heading:"Operations",subheading:"Linear Algebra"}),u.a],t,"gramSchmidt",null),t}(),C=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},D=function(){function t(){}return t.logicalNot=function(t){return o.assertArgumentsAreTensors({x:t},"logicalNot"),o.assert("bool"===t.dtype,"Error Array must be of type bool."),i.ENV.engine.runKernel(function(e){return e.logicalNot(t)},{x:t})},t.logicalAnd=function(t,e){return o.assertArgumentsAreTensors({a:t,b:e},"logicalAnd"),o.assert("bool"===t.dtype&&"bool"===e.dtype,"Error Array must be of type bool."),s.a(t.shape,e.shape),i.ENV.engine.runKernel(function(n){return n.logicalAnd(t,e)},{a:t,b:e})},t.logicalOr=function(t,e){return o.assertArgumentsAreTensors({a:t,b:e},"logicalOr"),o.assert("bool"===t.dtype&&"bool"===e.dtype,"Error Array must be of type bool."),s.a(t.shape,e.shape),i.ENV.engine.runKernel(function(n){return n.logicalOr(t,e)},{a:t,b:e})},t.logicalXor=function(e,n){return o.assertArgumentsAreTensors({a:e,b:n},"logicalXor"),o.assert("bool"===e.dtype&&"bool"===n.dtype,"Error Array must be of type bool."),s.a(e.shape,n.shape),t.logicalOr(e,n).logicalAnd(t.logicalAnd(e,n).logicalNot())},t.where=function(t,e,n){o.assertArgumentsAreTensors({condition:t,a:e,b:n},"where"),o.assert("bool"===t.dtype||"bool"===e.dtype||"bool"===n.dtype,"Error Array must be of type bool."),o.assertShapesMatch(e.shape,n.shape,"Error in where: "),1===t.rank?o.assert(t.shape[0]===e.shape[0],"The first dimension of `a` must match the size of `condition`."):o.assertShapesMatch(t.shape,n.shape,"Error in where: ");var r=f.c(e.dtype,n.dtype);return i.ENV.engine.runKernel(function(a){return a.where(t,e,n,r)},{condition:t,a:e,b:n})},C([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"logicalNot",null),C([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"logicalAnd",null),C([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"logicalOr",null),C([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"logicalXor",null),C([Object(a.a)({heading:"Operations",subheading:"Logical"}),u.a],t,"where",null),t}(),_=n(15),M=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},z=function(){function t(){}return t.localResponseNormalization=function(t,e,n,r,a){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===a&&(a=.5),o.assertArgumentsAreTensors({x:t},"localResponseNormalization"),o.assert(4===t.rank||3===t.rank,"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+t.rank+"."),o.assert(o.isInt(e),"Error in localResponseNormalization3D: radius must be an integer\n                     but got radius "+e+".");var s=t,u=!1;3===t.rank&&(u=!0,s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var l=i.ENV.engine.runKernel(function(t){return t.localResponseNormalization4D(s,e,n,r,a)},{x4D:s});return u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l},M([Object(a.a)({heading:"Operations",subheading:"Normalization"}),u.a],t,"localResponseNormalization",null),t}(),j=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},L=function(){function t(){}return t.multiRNNCell=function(t,e,n,r){o.assertArgumentsAreTensors({data:e,c:n,h:r},"multiRNNCell");for(var a=e,i=[],s=0;s<t.length;s++){var u=t[s](a,n[s],r[s]);i.push(u[0]),i.push(u[1]),a=u[1]}var l=[],c=[];for(s=0;s<i.length;s+=2)l.push(i[s]),c.push(i[s+1]);return[l,c]},t.basicLSTMCell=function(t,e,n,r,a,i){o.assertArgumentsAreTensors({forgetBias:t,lstmKernel:e,lstmBias:n,data:r,c:a,h:i},"basicLSTMCell");var s=r.concat(i,1).matMul(e).add(n),u=s.shape[0],l=s.shape[1]/4,c=[u,l],p=s.slice([0,0],c),f=s.slice([0,l],c),h=s.slice([0,2*l],c),d=s.slice([0,3*l],c),m=p.sigmoid().mulStrict(f.tanh()).addStrict(a.mulStrict(t.add(h).sigmoid()));return[m,m.tanh().mulStrict(d.sigmoid())]},j([Object(a.a)({heading:"Operations",subheading:"RNN"}),u.a],t,"multiRNNCell",null),j([Object(a.a)({heading:"Operations",subheading:"RNN"}),u.a],t,"basicLSTMCell",null),t}(),F=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},V=function(){function t(){}return t.matMul=function(t,e,n,r){void 0===n&&(n=!1),void 0===r&&(r=!1),o.assertArgumentsAreTensors({a:t,b:e},"matMul");var a=n?t.shape[0]:t.shape[1],s=r?e.shape[1]:e.shape[0];o.assert(2===t.rank&&2===e.rank,"Error in matMul: inputs must be rank 2, got ranks "+t.rank+" and "+e.rank+"."),o.assert(a===s,"Error in matMul: inner shapes ("+a+") and ("+s+") of Tensors with shapes "+t.shape+" and "+e.shape+" and transposeA="+n+" and transposeB="+r+" must match.");return i.ENV.engine.runKernel(function(a){return a.matMul(t,e,n,r)},{a:t,b:e},function(a){return n||r?!n&&r?{a:function(){return a.matMul(e.toFloat(),!1,!1)},b:function(){return a.matMul(t.toFloat(),!0,!1)}}:n&&!r?{a:function(){return e.toFloat().matMul(a,!1,!0)},b:function(){return t.toFloat().matMul(a,!1,!1)}}:{a:function(){return e.toFloat().matMul(a,!0,!0)},b:function(){return a.matMul(t.toFloat(),!0,!0)}}:{a:function(){return a.matMul(e.toFloat(),!1,!0)},b:function(){return t.toFloat().matMul(a,!0,!1)}}})},t.vectorTimesMatrix=function(t,e){return o.assert(1===t.rank,"Error in vectorTimesMatrix: first input must be rank 1, but got rank "+t.rank+"."),o.assert(2===e.rank,"Error in vectorTimesMatrix: second input must be rank 2, but got rank "+e.rank+"."),o.assert(t.size===e.shape[0],"Error in vectorTimesMatrix: size of vector ("+t.size+") must match first dimension of matrix ("+e.shape[0]+")"),t.as2D(1,-1).matMul(e).as1D()},t.matrixTimesVector=function(t,e){return o.assert(1===e.rank,"Error in matrixTimesVector: second input must rank 1, but got rank "+e.rank+"."),o.assert(2===t.rank,"Error in matrixTimesVector: first input must be a rank 2, but got rank "+t.rank+"."),o.assert(e.size===t.shape[1],"Error in matrixTimesVector: size of first rank 1 input "+e.size+" must match inner dimension of second rank 2 input, but got shape "+t.shape+"."),t.matMul(e.as2D(-1,1)).as1D()},t.dotProduct=function(t,e){return o.assert(1===t.rank&&1===e.rank,"Error in dotProduct: inputs must be rank 1, but got ranks "+t.rank+" and "+e.rank+"."),o.assert(t.size===e.size,"Error in dotProduct: size of inputs ("+t.size+") and ("+e.size+") must match."),t.as2D(1,-1).matMul(e.as2D(-1,1)).asScalar()},t.outerProduct=function(t,e){return o.assert(1===t.rank&&1===e.rank,"Error in outerProduct: inputs must be rank 1, but got ranks "+t.rank+" and "+e.rank+"."),t.as2D(-1,1).matMul(e.as2D(1,-1))},F([Object(a.a)({heading:"Operations",subheading:"Matrices"}),u.a],t,"matMul",null),F([u.a],t,"vectorTimesMatrix",null),F([u.a],t,"matrixTimesVector",null),F([u.a],t,"dotProduct",null),F([Object(a.a)({heading:"Operations",subheading:"Matrices"}),u.a],t,"outerProduct",null),t}(),B=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},U=function(){function t(){}return t.movingAverage=function(t,e,n,a,i){void 0===i&&(i=!0),o.assertArgumentsAreTensors({v:t,x:e},"movingAverage"),o.assertTypesMatch(t,e),o.assert(o.arraysEqual(t.shape,e.shape),"Shape mismatch in v and x");var s=r.a.scalar(1);n="number"==typeof n?r.a.scalar(n):n;var u=s.sub(n),l=e.sub(t).mul(u);return i&&(o.assert(null!=a,"When using zeroDebias: true, step is required."),a="number"==typeof a?r.a.scalar(a):a,l=l.div(s.sub(d.pow(n,a)))),t.add(l)},B([Object(a.a)({heading:"Operations",subheading:"Moving Average"}),u.a],t,"movingAverage",null),t}(),W=n(8),q=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},G=function(){function t(){}return t.norm=function(t,e,n,r){void 0===e&&(e="euclidean"),void 0===n&&(n=null),void 0===r&&(r=!1),o.assertArgumentsAreTensors({x:t},"norm");var a=function t(e,n,r){void 0===r&&(r=null);if(0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||r instanceof Array&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(Wn(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(r instanceof Array&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t,e,n),i=a.shape;if(r){var s=W.g(n,t.shape);i=W.c(a.shape,s)}return a.reshape(i)},q([Object(a.a)({heading:"Operations",subheading:"Matrices"}),u.a],t,"norm",null),t}();var H=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},K=function(){function t(){}return t.maxPool=function(e,n,r,a,s){o.assertArgumentsAreTensors({x:e},"maxPool");var u=e,l=!1;3===e.rank&&(l=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),o.assert(4===u.rank,"Error in maxPool: input must be rank 4 but got rank "+u.rank+"."),null!=s&&o.assert(o.isInt(a),"Error in maxPool: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+a+".");var c=v(u.shape,n,r,a,s),p=i.ENV.engine.runKernel(function(t,e){return e(t.maxPool(u,c))},{x:u},function(e,i){var o=i[0];return{x:function(){return t.maxPoolBackprop(e,u,o,n,r,a)}}});return l?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p},t.maxPoolBackprop=function(t,e,n,r,a,s,u){o.assertArgumentsAreTensors({dy:t,input:e,output:n},"maxPoolBackprop"),o.assert(e.rank===t.rank,"Rank of input ("+e.rank+") does not match rank of dy ("+t.rank+")"),o.assert(4===t.rank,"Error in maxPoolBackprop: dy must be rank 4 but got rank "+t.rank+"."),o.assert(4===e.rank,"Error in maxPoolBackprop: input must be rank 4 but got rank "+e.rank+"."),null!=u&&o.assert(o.isInt(s),"Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode "+u+" but got pad "+s+".");var l=v(e.shape,r,a,s,u);return i.ENV.engine.runKernel(function(r){return r.maxPoolBackprop(t,e,n,l)},{dy:t,input:e})},t.avgPool=function(e,n,r,a,s){o.assertArgumentsAreTensors({x:e},"avgPool"),o.assert("float32"===e.dtype,"The input dtype to avgPool must be float32");var u=e,l=!1;3===e.rank&&(l=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),o.assert(4===u.rank,"Error in avgPool: x must be rank 4 but got rank "+u.rank+"."),null!=s&&o.assert(o.isInt(a),"Error in avgPool: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+a+".");var c=v(u.shape,n,r,a),p=i.ENV.engine.runKernel(function(t){return t.avgPool(u,c)},{x:u},function(e){return{x:function(){return t.avgPoolBackprop(e,u,n,r,a)}}});return p=p.cast(e.dtype),l?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p},t.avgPoolBackprop=function(t,e,n,r,a){o.assertArgumentsAreTensors({dy:t,input:e},"avgPoolBackprop"),o.assert(e.rank===t.rank,"Rank of input ("+e.rank+") does not match rank of dy ("+t.rank+")");var s=e,u=t,l=!1;3===e.rank&&(l=!0,s=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),u=t.as4D(1,t.shape[0],t.shape[1],t.shape[2])),o.assert(4===u.rank,"Error in avgPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."),o.assert(4===s.rank,"Error in avgPoolBackprop: input must be rank 4 but got rank "+s.rank+".");var c=v(s.shape,n,r,a),p=i.ENV.engine.runKernel(function(t){return t.avgPoolBackprop(u,s,c)},{dy4D:u,input4D:s});return l?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p},H([Object(a.a)({heading:"Operations",subheading:"Convolution"}),u.a],t,"maxPool",null),H([u.a],t,"maxPoolBackprop",null),H([Object(a.a)({heading:"Operations",subheading:"Convolution"}),u.a],t,"avgPool",null),H([u.a],t,"avgPoolBackprop",null),t}(),X=n(14),Y=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},J=function(){function t(){}return t.reverse1d=function(e){return o.assert(1===e.rank,"Error in reverse1D: x must be rank 1 but got\n             rank "+e.rank+"."),t.reverse(e,0)},t.reverse2d=function(e,n){return o.assert(2===e.rank,"Error in reverse2D: x must be rank 2 but got\n             rank "+e.rank+"."),t.reverse(e,n)},t.reverse3d=function(e,n){return o.assert(3===e.rank,"Error in reverse3D: x must be rank 3 but got\n             rank "+e.rank+"."),t.reverse(e,n)},t.reverse4d=function(e,n){return o.assert(4===e.rank,"Error in reverse4D: x must be rank 4 but got\n             rank "+e.rank+"."),t.reverse(e,n)},t.reverse=function(t,e){if(o.assertArgumentsAreTensors({x:t},"reverse"),0===t.rank)return t.clone();var n=Object(W.g)(e,t.shape);return i.ENV.engine.runKernel(function(e){return e.reverse(t,n)},{x:t},function(t){return{x:function(){return t.reverse(n)}}}).reshapeAs(t)},Y([Object(a.a)({heading:"Tensors",subheading:"Slicing and Joining"}),u.a],t,"reverse",null),t}(),Q=n(23),Z=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},$=function(){function t(){}return t.slice1d=function(e,n,r){return o.assert(1===e.rank,"slice1d expects a rank-1 tensor, but got a rank-"+e.rank+" tensor"),t.slice(e,[n],[r])},t.slice2d=function(e,n,r){return o.assert(2===e.rank,"slice1d expects a rank-2 tensor, but got a rank-"+e.rank+" tensor"),t.slice(e,n,r)},t.slice3d=function(e,n,r){return o.assert(3===e.rank,"slice1d expects a rank-3 tensor, but got a rank-"+e.rank+" tensor"),t.slice(e,n,r)},t.slice4d=function(e,n,r){return o.assert(4===e.rank,"slice1d expects a rank-4 tensor, but got a rank-"+e.rank+" tensor"),t.slice(e,n,r)},t.slice=function(t,e,n){if(o.assertArgumentsAreTensors({x:t},"slice"),0===t.rank)throw new Error("Slicing scalar is not possible");var r,a;r="number"==typeof e?[e].concat(new Array(t.rank-1).fill(0)):e.length<t.rank?e.concat(new Array(t.rank-e.length).fill(0)):e,a=(a=null==n?new Array(t.rank).fill(-1):"number"==typeof n?[n].concat(new Array(t.rank-1).fill(-1)):n.length<t.rank?n.concat(new Array(t.rank-n.length).fill(-1)):n).map(function(e,n){return e>=0?e:(o.assert(-1===e,"Bad value in size"),t.shape[n]-r[n])}),Q.a(t,r,a);var s=t.shape;return i.ENV.engine.runKernel(function(e){return e.slice(t,r,a)},{x:t},function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],s[n]-r[n]-a[n]]);return{x:function(){return t.pad(e)}}})},Z([Object(a.a)({heading:"Tensors",subheading:"Slicing and Joining"}),u.a],t,"slice",null),t}(),tt=n(7),et=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},nt=function(){function t(){}return t.softmax=function(t,e){if(void 0===e&&(e=-1),o.assertArgumentsAreTensors({logits:t},"softmax"),-1===e&&(e=t.rank-1),e!==t.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+t.rank+" and dim was "+e);return Object(tt.a)(function(t){var n=t.logSumExp([e],!0),r=t.toFloat().sub(n).exp();return{value:r,gradFunc:function(t){var n=t.mul(r);return n.sub(n.sum([e],!0).mul(r))}}})(t)},t.softmaxCrossEntropy=function(t,e,n){if(void 0===n&&(n=-1),o.assertArgumentsAreTensors({labels:t,logits:e},"softmaxCrossEntropy"),o.assertShapesMatch(t.shape,e.shape,"Error in softmaxCrossEntropy: "),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+e.rank+" and dim was "+n);return Object(tt.a)(function(t,e){var r=e.softmax(n);return{value:Wn(1e-5).add(r).log().mul(t).neg().sum([n]),gradFunc:function(e){var a=W.c(e.shape,[n]);return[e.reshape(a).mul(t.toFloat().sub(r)),e.reshape(a).mul(r.sub(t.toFloat()))]}}})(t,e)},et([Object(a.a)({heading:"Operations",subheading:"Normalization"}),u.a],t,"softmax",null),et([Object(a.a)({heading:"Training",subheading:"Losses",namespace:"losses"}),u.a],t,"softmaxCrossEntropy",null),t}(),rt=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},at=function(){function t(){}return t.stridedSlice=function(t,e,n,r,a,s){return void 0===a&&(a=0),void 0===s&&(s=0),o.assertArgumentsAreTensors({x:t},"stridedSlice"),i.ENV.engine.runKernel(function(i){return i.stridedSlice(t,e,n,r,a,s)},{x:t})},rt([Object(a.a)({heading:"Operations",subheading:"Slicing and Joining"}),u.a],t,"stridedSlice",null),t}(),it=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},ot=function(){function t(){}return t.transpose=function(t,e){if(o.assertArgumentsAreTensors({x:t},"transpose"),null==e&&(e=t.shape.map(function(t,e){return e}).reverse()),o.assert(t.rank===e.length,"Error in transpose: rank of input "+t.rank+" must match length of perm "+e+"."),e.forEach(function(n){o.assert(n>=0&&n<t.rank,"All entries in 'perm' must be between 0 and "+(t.rank-1)+" but got "+e)}),t.rank<=1)return t.clone();return i.ENV.engine.runKernel(function(n){return n.transpose(t,e)},{x:t},function(t){var n=W.f(e);return{x:function(){return t.transpose(n)}}})},it([Object(a.a)({heading:"Operations",subheading:"Matrices"}),u.a],t,"transpose",null),t}(),st=n(16),ut=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},lt=function(){function t(){}return t.neg=function(t){o.assertArgumentsAreTensors({x:t},"neg");return i.ENV.engine.runKernel(function(e){return e.neg(t)},{x:t},function(t){return{x:function(){return t.neg()}}})},t.ceil=function(t){o.assertArgumentsAreTensors({x:t},"ceil");return i.ENV.engine.runKernel(function(e){return e.ceil(t)},{x:t},function(t){return{x:function(){return An(t)}}})},t.floor=function(t){o.assertArgumentsAreTensors({x:t},"floor");return i.ENV.engine.runKernel(function(e){return e.floor(t)},{x:t},function(t){return{x:function(){return An(t)}}})},t.sign=function(t){o.assertArgumentsAreTensors({x:t},"sign");return i.ENV.engine.runKernel(function(e){return e.sign(t)},{x:t},function(t){return{x:function(){return An(t)}}})},t.round=function(t){o.assertArgumentsAreTensors({x:t},"round");return i.ENV.engine.runKernel(function(e){return e.round(t)},{x:t},function(t){return{x:function(){return An(t)}}})},t.exp=function(t){o.assertArgumentsAreTensors({x:t},"exp");return i.ENV.engine.runKernel(function(e,n){return n(e.exp(t))},{x:t},function(t,e){var n=e[0];return{x:function(){return t.mulStrict(n)}}})},t.expm1=function(t){o.assertArgumentsAreTensors({x:t},"expm1");return i.ENV.engine.runKernel(function(e){return e.expm1(t)},{x:t},function(e){return{x:function(){return e.mulStrict(t.exp())}}})},t.log=function(t){o.assertArgumentsAreTensors({x:t},"log");return i.ENV.engine.runKernel(function(e){return e.log(t)},{x:t},function(e){return{x:function(){return e.divStrict(t.toFloat())}}})},t.log1p=function(t){o.assertArgumentsAreTensors({x:t},"log1p");return i.ENV.engine.runKernel(function(e){return e.log1p(t)},{x:t},function(e){return{x:function(){return e.divStrict(t.add(Wn(1)))}}})},t.sqrt=function(t){o.assertArgumentsAreTensors({x:t},"sqrt");return i.ENV.engine.runKernel(function(e){return e.sqrt(t)},{x:t},function(e){return{x:function(){return e.divStrict(t.toFloat().sqrt().mul(Wn(2)))}}})},t.rsqrt=function(t){o.assertArgumentsAreTensors({x:t},"rsqrt");return i.ENV.engine.runKernel(function(e){return e.rsqrt(t)},{x:t},function(e){return{x:function(){return e.divStrict(t.pow(Wn(1.5)).mul(Wn(2))).neg()}}})},t.square=function(t){o.assertArgumentsAreTensors({x:t},"square");return i.ENV.engine.runKernel(function(e){return e.square(t)},{x:t},function(e){return{x:function(){return e.mulStrict(t.toFloat().mul(Wn(2)))}}})},t.reciprocal=function(t){o.assertArgumentsAreTensors({x:t},"reciprocal");return i.ENV.engine.runKernel(function(e){return e.reciprocal(t)},{x:t},function(e){return{x:function(){return e.divStrict(t.square().neg())}}})},t.abs=function(t){o.assertArgumentsAreTensors({x:t},"abs");return i.ENV.engine.runKernel(function(e){return e.abs(t)},{x:t},function(e){return{x:function(){return e.mulStrict(t.toFloat().step(-1))}}})},t.clipByValue=function(t,e,n){o.assertArgumentsAreTensors({x:t},"clipByValue"),o.assert(e<=n,"Error in clip: min ("+e+") must be less than or equal to max ("+n+").");return i.ENV.engine.runKernel(function(r){return r.clip(t,e,n)},{x:t},function(r){return{x:function(){return r.where(t.greater(Wn(e)).logicalAnd(t.less(Wn(n))),An(r))}}})},t.relu=function(t){if(o.assertArgumentsAreTensors({x:t},"relu"),"bool"===t.dtype)return t.toInt();return i.ENV.engine.runKernel(function(e){return e.relu(t)},{x:t},function(e){var n=t.step();return{x:function(){return e.mulStrict(n.toFloat())}}})},t.elu=function(t){o.assertArgumentsAreTensors({x:t},"elu");return i.ENV.engine.runKernel(function(e,n){return n(e.elu(t))},{x:t},function(t,e){var n=e[0];return{x:function(){return i.ENV.engine.runKernel(function(e){return e.eluDer(t,n)},{dy:t,y:n})}}})},t.selu=function(t){o.assertArgumentsAreTensors({x:t},"selu");return i.ENV.engine.runKernel(function(e){return e.selu(t)},{x:t},function(e){return{x:function(){var n=t.greater(Wn(0)),r=Wn(st.b),a=Wn(st.a),i=e.mul(a),o=e.mul(r).mul(t.toFloat().exp());return de(n,i,o)}}})},t.leakyRelu=function(t,e){return void 0===e&&(e=.2),o.assertArgumentsAreTensors({x:t},"leakyRelu"),rn(Wn(e).mul(t),t)},t.prelu=function(t,e){o.assertArgumentsAreTensors({x:t,alpha:e},"prelu");var n=Wn(0);return rn(n,t).add(e.mul(on(n,t)))},t.sigmoid=function(t){o.assertArgumentsAreTensors({x:t},"sigmoid");return i.ENV.engine.runKernel(function(e,n){return n(e.sigmoid(t))},{x:t},function(t,e){var n=e[0];return{x:function(){return t.mulStrict(n.mul(Wn(1).sub(n)))}}})},t.logSigmoid=function(t){o.assertArgumentsAreTensors({x:t},"logSigmoid");return i.ENV.engine.runKernel(function(e){return e.softplus(t.neg()).neg()},{x:t},function(e){return{x:function(){return e.mulStrict(t.neg().sigmoid())}}})},t.softplus=function(t){o.assertArgumentsAreTensors({x:t},"softplus");return i.ENV.engine.runKernel(function(e){return e.softplus(t)},{x:t},function(e){return{x:function(){return e.mulStrict(t.sigmoid())}}})},t.sin=function(t){o.assertArgumentsAreTensors({x:t},"sin");return i.ENV.engine.runKernel(function(e){return e.sin(t)},{x:t},function(e){return{x:function(){return t.toFloat().cos().mulStrict(e)}}})},t.cos=function(t){o.assertArgumentsAreTensors({x:t},"cos");return i.ENV.engine.runKernel(function(e){return e.cos(t)},{x:t},function(e){return{x:function(){return t.toFloat().sin().neg().mulStrict(e)}}})},t.tan=function(t){o.assertArgumentsAreTensors({x:t},"tan");return i.ENV.engine.runKernel(function(e){return e.tan(t)},{x:t},function(e){return{x:function(){return e.divStrict(t.cos().square())}}})},t.asin=function(e){o.assertArgumentsAreTensors({x:e},"asin");return i.ENV.engine.runKernel(function(t){return t.asin(e)},{x:e},function(n){return{x:function(){return n.divStrict(t.sqrt(Wn(1).sub(e.toFloat().square())))}}})},t.acos=function(e){o.assertArgumentsAreTensors({x:e},"acos");return i.ENV.engine.runKernel(function(t){return t.acos(e)},{x:e},function(n){return{x:function(){return n.divStrict(t.sqrt(Wn(1).sub(e.toFloat().square()))).neg()}}})},t.atan=function(t){o.assertArgumentsAreTensors({x:t},"atan");return i.ENV.engine.runKernel(function(e){return e.atan(t)},{x:t},function(e){return{x:function(){return e.divStrict(Wn(1).add(t.toFloat().square()))}}})},t.sinh=function(t){o.assertArgumentsAreTensors({x:t},"sinh");return i.ENV.engine.runKernel(function(e){return e.sinh(t)},{x:t},function(e){return{x:function(){return t.toFloat().cosh().mulStrict(e)}}})},t.cosh=function(t){o.assertArgumentsAreTensors({x:t},"cosh");return i.ENV.engine.runKernel(function(e){return e.cosh(t)},{x:t},function(e){return{x:function(){return t.toFloat().sinh().mulStrict(e)}}})},t.tanh=function(t){o.assertArgumentsAreTensors({x:t},"tanh");return i.ENV.engine.runKernel(function(e,n){return n(e.tanh(t))},{x:t},function(t,e){var n=e[0];return{x:function(){return Wn(1).sub(n.square()).mulStrict(t)}}})},t.asinh=function(e){o.assertArgumentsAreTensors({x:e},"asinh");return i.ENV.engine.runKernel(function(t){return t.asinh(e)},{x:e},function(n){return{x:function(){return n.divStrict(t.sqrt(Wn(1).add(e.toFloat().square())))}}})},t.acosh=function(e){o.assertArgumentsAreTensors({x:e},"acosh");return i.ENV.engine.runKernel(function(t){return t.acosh(e)},{x:e},function(n){return{x:function(){return n.divStrict(t.sqrt(e.toFloat().square().sub(Wn(1))))}}})},t.atanh=function(t){o.assertArgumentsAreTensors({x:t},"atanh");return i.ENV.engine.runKernel(function(e){return e.atanh(t)},{x:t},function(e){return{x:function(){return e.divStrict(Wn(1).sub(t.toFloat().square()))}}})},t.erf=function(t){o.assert("int32"===t.dtype||"float32"===t.dtype,"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=t.toFloat());return i.ENV.engine.runKernel(function(e){return e.erf(t)},{x:t},function(e){return{x:function(){return e.mulStrict(Wn(2/Math.sqrt(Math.PI)).mul(t.square().neg().exp()))}}})},t.step=function(t,e){void 0===e&&(e=0),o.assertArgumentsAreTensors({x:t},"step");return i.ENV.engine.runKernel(function(n){return n.step(t,e)},{x:t},function(t){return{x:function(){return An(t)}}})},ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"neg",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"ceil",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"floor",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"sign",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"round",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"exp",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"expm1",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"log",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"log1p",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"sqrt",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"rsqrt",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"square",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"reciprocal",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"abs",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"clipByValue",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"relu",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"elu",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"selu",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"leakyRelu",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"prelu",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"sigmoid",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"logSigmoid",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"softplus",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"sin",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"cos",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"tan",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"asin",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"acos",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"atan",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"sinh",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"cosh",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"tanh",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"asinh",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"acosh",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"atanh",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"erf",null),ut([Object(a.a)({heading:"Operations",subheading:"Basic math"}),u.a],t,"step",null),t}(),ct=n(6);n.d(e,"o",function(){return pt}),n.d(e,"p",function(){return ft}),n.d(e,"q",function(){return ht}),n.d(e,"r",function(){return dt}),n.d(e,"x",function(){return mt}),n.d(e,"y",function(){return gt}),n.d(e,"z",function(){return yt}),n.d(e,"A",function(){return vt}),n.d(e,"B",function(){return bt}),n.d(e,"C",function(){return wt}),n.d(e,"D",function(){return xt}),n.d(e,"E",function(){return Ot}),n.d(e,"I",function(){return Nt}),n.d(e,"Tb",function(){return St}),n.d(e,"Ta",function(){return Et}),n.d(e,"Ua",function(){return At}),n.d(e,"tb",function(){return It}),n.d(e,"Ec",function(){return Tt}),n.d(e,"m",function(){return kt}),n.d(e,"Wa",function(){return Pt}),n.d(e,"Ac",function(){return Rt}),n.d(e,"Kb",function(){return Ct}),n.d(e,"Lb",function(){return Dt}),n.d(e,"Mb",function(){return _t}),n.d(e,"Nb",function(){return Mt}),n.d(e,"Ob",function(){return zt}),n.d(e,"Yb",function(){return jt}),n.d(e,"Zb",function(){return Lt}),n.d(e,"ac",function(){return Ft}),n.d(e,"bc",function(){return Vt}),n.d(e,"cc",function(){return Bt}),n.d(e,"nc",function(){return Ut}),n.d(e,"f",function(){return Wt}),n.d(e,"g",function(){return qt}),n.d(e,"Na",function(){return Gt}),n.d(e,"Va",function(){return Ht}),n.d(e,"Za",function(){return Kt}),n.d(e,"ab",function(){return Xt}),n.d(e,"fb",function(){return Yt}),n.d(e,"qc",function(){return Jt}),n.d(e,"Cc",function(){return Qt}),n.d(e,"M",function(){return Zt}),n.d(e,"N",function(){return $t}),n.d(e,"X",function(){return te}),n.d(e,"Aa",function(){return ee}),n.d(e,"Y",function(){return ne}),n.d(e,"Z",function(){return re}),n.d(e,"Da",function(){return ae}),n.d(e,"Ga",function(){return ie}),n.d(e,"Ea",function(){return oe}),n.d(e,"Fa",function(){return se}),n.d(e,"nb",function(){return ue}),n.d(e,"ob",function(){return le}),n.d(e,"Pa",function(){return ce}),n.d(e,"Oa",function(){return pe}),n.d(e,"Qa",function(){return fe}),n.d(e,"Ra",function(){return he}),n.d(e,"Fc",function(){return de}),n.d(e,"a",function(){return me}),n.d(e,"b",function(){return ge}),n.d(e,"c",function(){return ye}),n.d(e,"h",function(){return ve}),n.d(e,"i",function(){return be}),n.d(e,"j",function(){return we}),n.d(e,"l",function(){return xe}),n.d(e,"u",function(){return Oe}),n.d(e,"v",function(){return Ne}),n.d(e,"F",function(){return Se}),n.d(e,"G",function(){return Ee}),n.d(e,"L",function(){return Ae}),n.d(e,"P",function(){return Ie}),n.d(e,"R",function(){return Te}),n.d(e,"U",function(){return ke}),n.d(e,"Vb",function(){return Pe}),n.d(e,"Ca",function(){return Re}),n.d(e,"Ka",function(){return Ce}),n.d(e,"La",function(){return De}),n.d(e,"Ma",function(){return _e}),n.d(e,"lb",function(){return Me}),n.d(e,"Bb",function(){return ze}),n.d(e,"Ib",function(){return je}),n.d(e,"Hb",function(){return Le}),n.d(e,"Pb",function(){return Fe}),n.d(e,"Sb",function(){return Ve}),n.d(e,"Ub",function(){return Be}),n.d(e,"Wb",function(){return Ue}),n.d(e,"Xb",function(){return We}),n.d(e,"ec",function(){return qe}),n.d(e,"gc",function(){return Ge}),n.d(e,"Qb",function(){return He}),n.d(e,"hc",function(){return Ke}),n.d(e,"mc",function(){return Xe}),n.d(e,"rc",function(){return Ye}),n.d(e,"sc",function(){return Je}),n.d(e,"O",function(){return Qe}),n.d(e,"d",function(){return Ze}),n.d(e,"e",function(){return $e}),n.d(e,"k",function(){return tn}),n.d(e,"J",function(){return en}),n.d(e,"K",function(){return nn}),n.d(e,"Xa",function(){return rn}),n.d(e,"Ya",function(){return an}),n.d(e,"bb",function(){return on}),n.d(e,"cb",function(){return sn}),n.d(e,"db",function(){return un}),n.d(e,"eb",function(){return ln}),n.d(e,"hb",function(){return cn}),n.d(e,"ib",function(){return pn}),n.d(e,"zb",function(){return fn}),n.d(e,"Ab",function(){return hn}),n.d(e,"oc",function(){return dn}),n.d(e,"pc",function(){return mn}),n.d(e,"ic",function(){return gn}),n.d(e,"jc",function(){return yn}),n.d(e,"mb",function(){return vn}),n.d(e,"t",function(){return bn}),n.d(e,"w",function(){return wn}),n.d(e,"V",function(){return xn}),n.d(e,"zc",function(){return On}),n.d(e,"qb",function(){return Nn}),n.d(e,"rb",function(){return Sn}),n.d(e,"Gc",function(){return En}),n.d(e,"Hc",function(){return An}),n.d(e,"S",function(){return In}),n.d(e,"Db",function(){return Tn}),n.d(e,"Eb",function(){return kn}),n.d(e,"Bc",function(){return Pn}),n.d(e,"Fb",function(){return Rn}),n.d(e,"kb",function(){return Cn}),n.d(e,"Jb",function(){return Dn}),n.d(e,"kc",function(){return _n}),n.d(e,"yc",function(){return Mn}),n.d(e,"W",function(){return zn}),n.d(e,"pb",function(){return jn}),n.d(e,"Ia",function(){return Ln}),n.d(e,"Gb",function(){return Fn}),n.d(e,"s",function(){return Vn}),n.d(e,"T",function(){return Bn}),n.d(e,"tc",function(){return Un}),n.d(e,"Rb",function(){return Wn}),n.d(e,"uc",function(){return qn}),n.d(e,"vc",function(){return Gn}),n.d(e,"wc",function(){return Hn}),n.d(e,"xc",function(){return Kn}),n.d(e,"Cb",function(){return Xn}),n.d(e,"Q",function(){return Yn}),n.d(e,"lc",function(){return Jn}),n.d(e,"Dc",function(){return Qn}),n.d(e,"fc",function(){return Zn}),n.d(e,"H",function(){return $n}),n.d(e,"ub",function(){return tr}),n.d(e,"vb",function(){return er}),n.d(e,"wb",function(){return nr}),n.d(e,"xb",function(){return rr}),n.d(e,"yb",function(){return ar}),n.d(e,"gb",function(){return ir}),n.d(e,"n",function(){return or}),n.d(e,"jb",function(){return sr}),n.d(e,"dc",function(){return ur}),n.d(e,"Ja",function(){return lr}),n.d(e,"Ha",function(){return cr}),n.d(e,"Sa",function(){return pr}),n.d(e,"Ba",function(){return fr}),n.d(e,"sb",function(){return u.a});var pt=c.batchNormalization,ft=c.batchNormalization2d,ht=c.batchNormalization3d,dt=c.batchNormalization4d,mt=y.a.concat,gt=y.a.concat1d,yt=y.a.concat2d,vt=y.a.concat3d,bt=y.a.concat4d,wt=S.conv1d,xt=S.conv2d,Ot=S.conv2dTranspose,Nt=S.depthwiseConv2d,St=S.separableConv2d,Et=V.matMul,At=V.matrixTimesVector,It=V.outerProduct,Tt=V.vectorTimesMatrix,kt=K.avgPool,Pt=K.maxPool,Rt=ot.transpose,Ct=J.reverse,Dt=J.reverse1d,_t=J.reverse2d,Mt=J.reverse3d,zt=J.reverse4d,jt=$.slice,Lt=$.slice1d,Ft=$.slice2d,Vt=$.slice3d,Bt=$.slice4d,Ut=at.stridedSlice,Wt=X.a.argMax,qt=X.a.argMin,Gt=X.a.logSumExp,Ht=X.a.max,Kt=X.a.mean,Xt=X.a.min,Yt=X.a.moments,Jt=X.a.sum,Qt=X.a.unsortedSegmentSum,Zt=g.equal,$t=g.equalStrict,te=g.greater,ee=g.greaterStrict,ne=g.greaterEqual,re=g.greaterEqualStrict,ae=g.less,ie=g.lessStrict,oe=g.lessEqual,se=g.lessEqualStrict,ue=g.notEqual,le=g.notEqualStrict,ce=D.logicalNot,pe=D.logicalAnd,fe=D.logicalOr,he=D.logicalXor,de=D.where,me=lt.abs,ge=lt.acos,ye=lt.acosh,ve=lt.asin,be=lt.asinh,we=lt.atan,xe=lt.atanh,Oe=lt.ceil,Ne=lt.clipByValue,Se=lt.cos,Ee=lt.cosh,Ae=lt.elu,Ie=lt.exp,Te=lt.expm1,ke=lt.floor,Pe=lt.sign,Re=lt.leakyRelu,Ce=lt.log,De=lt.log1p,_e=lt.logSigmoid,Me=lt.neg,ze=lt.prelu,je=lt.relu,Le=lt.reciprocal,Fe=lt.round,Ve=lt.selu,Be=lt.sigmoid,Ue=lt.sin,We=lt.sinh,qe=lt.softplus,Ge=lt.sqrt,He=lt.rsqrt,Ke=lt.square,Xe=lt.step,Ye=lt.tan,Je=lt.tanh,Qe=lt.erf,Ze=d.add,$e=d.addStrict,tn=d.atan2,en=d.div,nn=d.divStrict,rn=d.maximum,an=d.maximumStrict,on=d.minimum,sn=d.minimumStrict,un=d.mod,ln=d.modStrict,cn=d.mul,pn=d.mulStrict,fn=d.pow,hn=d.powStrict,dn=d.sub,mn=d.subStrict,gn=d.squaredDifference,yn=d.squaredDifferenceStrict,vn=G.norm,bn=r.a.cast,wn=r.a.clone,xn=r.a.fromPixels,On=r.a.toPixels,Nn=r.a.ones,Sn=r.a.onesLike,En=r.a.zeros,An=r.a.zerosLike,In=r.a.eye,Tn=r.a.rand,kn=r.a.randomNormal,Pn=r.a.truncatedNormal,Rn=r.a.randomUniform,Cn=r.a.multinomial,Dn=r.a.reshape,_n=r.a.squeeze,Mn=r.a.tile,zn=r.a.gather,jn=r.a.oneHot,Ln=r.a.linspace,Fn=r.a.range,Vn=r.a.buffer,Bn=r.a.fill,Un=r.a.tensor,Wn=r.a.scalar,qn=r.a.tensor1d,Gn=r.a.tensor2d,Hn=r.a.tensor3d,Kn=r.a.tensor4d,Xn=r.a.print,Yn=r.a.expandDims,Jn=r.a.stack,Qn=r.a.unstack,Zn=r.a.split,$n=r.a.cumsum,tr=r.a.pad,er=r.a.pad1d,nr=r.a.pad2d,rr=r.a.pad3d,ar=r.a.pad4d,ir=U.movingAverage,or=L.basicLSTMCell,sr=L.multiRNNCell,ur=nt.softmax,lr=z.localResponseNormalization,cr=R;ct.a,f.a,_.b;var pr={absoluteDifference:_.a.absoluteDifference,computeWeightedLoss:_.a.computeWeightedLoss,cosineDistance:_.a.cosineDistance,hingeLoss:_.a.hingeLoss,logLoss:_.a.logLoss,meanSquaredError:_.a.meanSquaredError,softmaxCrossEntropy:nt.softmaxCrossEntropy},fr={resizeBilinear:T.resizeBilinear,resizeNearestNeighbor:T.resizeNearestNeighbor}},function(t,e,n){"use strict";function r(t){return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]}}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";n.r(e),function(t){n.d(e,"Type",function(){return r}),n.d(e,"URL_PROPERTIES",function(){return l}),n.d(e,"Environment",function(){return d}),n.d(e,"ENV",function(){return v});var r,a=n(34),i=n(3),o=n(33),s=n(1),u=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o};!function(t){t[t.NUMBER=0]="NUMBER",t[t.BOOLEAN=1]="BOOLEAN",t[t.STRING=2]="STRING"}(r||(r={}));var l=[{name:"DEBUG",type:r.BOOLEAN},{name:"IS_BROWSER",type:r.BOOLEAN},{name:"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",type:r.NUMBER},{name:"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",type:r.BOOLEAN},{name:"WEBGL_VERSION",type:r.NUMBER},{name:"WEBGL_FLOAT_TEXTURE_ENABLED",type:r.BOOLEAN},{name:"WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED",type:r.BOOLEAN},{name:"BACKEND",type:r.STRING}];function c(t,e){return null!=t.getExtension(e)}function p(t){if(0===t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var e=document.createElement("canvas");return 1===t?e.getContext("webgl")||e.getContext("experimental-webgl"):e.getContext("webgl2")}function f(t){if(null!=t){var e=t.getExtension("WEBGL_lose_context");if(null==e)throw new Error("Extension WEBGL_lose_context not supported on this browser.");e.loseContext()}}function h(t){var e=p(t);return null!=e&&(f(e),!0)}var d=function(){function t(t){this.features={},this.registry={},null!=t&&(this.features=t),this.get("DEBUG")&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}return t.setBackend=function(t,e){if(void 0===e&&(e=!1),!(t in v.registry))throw new Error("Backend type '"+t+"' not found in registry");v.initBackend(t,e)},t.getBackend=function(){return v.initDefaultBackend(),v.currentBackend},t.disposeVariables=function(){v.engine.disposeVariables()},t.memory=function(){return v.engine.memory()},t.prototype.get=function(t){return t in this.features?this.features[t]:(this.features[t]=this.evaluateFeature(t),this.features[t])},t.prototype.set=function(t,e){this.features[t]=e},t.prototype.getBestBackendType=function(){var t=this;if(0===Object.keys(this.registry).length)throw new Error("No backend found in registry.");return Object.keys(this.registry).map(function(e){return{name:e,entry:t.registry[e]}}).sort(function(t,e){return e.entry.priority-t.entry.priority})[0].name},t.prototype.evaluateFeature=function(t){if("DEBUG"===t)return!1;if("IS_BROWSER"===t)return"undefined"!=typeof window;if("BACKEND"===t)return this.getBestBackendType();if("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"===t){var e=this.get("WEBGL_VERSION");return 0===e?0:function(t){if(0===t)return 0;var e,n=p(t);return e=c(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:c(n,"EXT_disjoint_timer_query")?1:0,null!=n&&f(n),e}(e)}if("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE"===t)return this.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!a.a();if("WEBGL_VERSION"===t)return h(2)?2:h(1)?1:0;if("WEBGL_FLOAT_TEXTURE_ENABLED"===t)return function(t){if(0===t)return!1;var e=p(t);if(1===t){if(!c(e,"OES_texture_float"))return!1}else if(!c(e,"EXT_color_buffer_float"))return!1;var n=e.createFramebuffer(),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);var a=2===t?e.RGBA32F:e.RGBA;e.texImage2D(e.TEXTURE_2D,0,a,1,1,0,e.RGBA,e.FLOAT,null),e.bindFramebuffer(e.FRAMEBUFFER,n),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);var i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;e.readPixels(0,0,1,1,e.RGBA,e.FLOAT,new Float32Array(4));var o=e.getError()===e.NO_ERROR;return f(e),i&&o}(this.get("WEBGL_VERSION"));if("WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED"===t)return function(t){if(t>0)return!1;if(2!==t)return!1;var e=p(t),n=c(e,"WEBGL_get_buffer_sub_data_async");return f(e),n}(this.get("WEBGL_VERSION"));throw new Error("Unknown feature "+t+".")},t.prototype.setFeatures=function(t){this.features=t},t.prototype.reset=function(){this.features=g(),null!=this.globalEngine&&(this.globalEngine.dispose(),this.globalEngine=null)},t.prototype.initBackend=function(t,e){void 0===e&&(e=!1),this.currentBackend=t,null!=this.globalEngine&&this.globalEngine.dispose();var n=v.findBackend(t);this.globalEngine=new o.a(n,e)},t.prototype.findBackend=function(t){return t in this.registry?this.registry[t].backend:null},t.prototype.registerBackend=function(t,e,n){void 0===n&&(n=1),t in this.registry&&console.warn(t+" backend was already registered");try{var r=e();return this.registry[t]={backend:r,priority:n},!0}catch(t){return console.warn(t.message),!1}},t.prototype.removeBackend=function(t){if(!(t in this.registry))throw new Error(t+" backend not found in registry");this.registry[t].backend.dispose(),delete this.registry[t]},Object.defineProperty(t.prototype,"engine",{get:function(){return this.initDefaultBackend(),this.globalEngine},enumerable:!0,configurable:!0}),t.prototype.initDefaultBackend=function(){null==this.globalEngine&&this.initBackend(v.get("BACKEND"),!1)},u([Object(i.a)({heading:"Environment"})],t,"setBackend",null),u([Object(i.a)({heading:"Environment"})],t,"getBackend",null),u([Object(i.a)({heading:"Environment"})],t,"disposeVariables",null),u([Object(i.a)({heading:"Performance",subheading:"Memory"})],t,"memory",null),t}(),m="tfjsflags";function g(){var t={};if("undefined"==typeof window||void 0===window.location)return t;var e=s.getQueryParams(window.location.search);if(m in e){var n={};e[m].split(",").forEach(function(t){var e=t.split(":"),r=e[0],a=e[1];n[r]=a}),l.forEach(function(e){e.name in n&&(console.log("Setting feature override from URL "+e.name+": "+n[e.name]),e.type===r.NUMBER?t[e.name]=+n[e.name]:e.type===r.BOOLEAN?t[e.name]="true"===n[e.name]:e.type===r.STRING?t[e.name]=n[e.name]:console.warn("Unknown URL param: "+e.name+"."))})}return t}var y,v=((y=function(){var e;if("undefined"!=typeof window)e=window;else{if(void 0===t)throw new Error("Could not find a global object");e=t}return e}()).ENV=y.ENV||new d(g()),y.ENV)}.call(this,n(24))},function(t,e,n){"use strict";n.d(e,"a",function(){return a});var r=n(7);function a(t,e,n){var a=n.value;return n.value=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Object(r.f)(e,function(){return a.apply(void 0,t)})},n}},function(t,e,n){"use strict";n.d(e,"b",function(){return h}),n.d(e,"a",function(){return d}),n.d(e,"c",function(){return m}),n.d(e,"d",function(){return g});var r,a=n(3),i=n(4),o=n(2),s=n(26),u=n(1),l=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),c=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},p=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},f=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},h=function(){function t(t,e,n){if(this.dtype=e,null!=n){var r=n.length,a=u.sizeFromShape(t);u.assert(r===a,"Length of values '"+r+"' does not match the size inferred by the shape '"+a+"'")}this.shape=t.slice(),this.values=n||u.getTypedArrayFromDType(e,u.sizeFromShape(t)),this.strides=y(t),this.size=u.sizeFromShape(t)}return t.prototype.set=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];0===e.length&&(e=[0]),u.assert(e.length===this.rank,"The number of provided coordinates ("+e.length+") must match the rank ("+this.rank+")");var r=this.locToIndex(e);this.values[r]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=t[t.length-1],r=0;r<t.length-1;++r)n+=this.strides[r]*t[r];return this.values[n]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return d.make(this.shape,{values:this.values},this.dtype)},c([Object(a.a)({heading:"Tensors",subheading:"Creation"})],t.prototype,"set",null),c([Object(a.a)({heading:"Tensors",subheading:"Creation"})],t.prototype,"get",null),c([Object(a.a)({heading:"Tensors",subheading:"Creation"})],t.prototype,"toTensor",null),t=c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t)}(),d=function(){function t(t,n,r,a){this.isDisposed=!1,this.size=u.sizeFromShape(t),null!=r&&u.assert(this.size===r.length,"Constructing tensor of shape ("+this.size+") should match the length of values ("+r.length+")"),this.shape=t.slice(),this.dtype=n||"float32",this.strides=y(t),this.dataId=null!=a?a:{},this.id=e.nextId++,this.rankType=this.rank<5?this.rank.toString():"higher",i.ENV.engine.registerTensor(this),null!=r&&i.ENV.engine.write(this.dataId,r)}return e=t,t.make=function(t,n,r){return new e(t,r,n.values,n.dataId)},t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),u.assert(1===this.size,"The array must have only 1 element."),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.asType=function(t){return this.throwIfDisposed(),o.t(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];u.assert(t.length===this.rank,"Number of coordinates in get() must match the rank of the tensor"),this.throwIfDisposed(),0===t.length&&(t=[0]);for(var n=t[t.length-1],r=0;r<t.length-1;++r)n+=this.strides[r]*t[r];return this.dataSync()[n]},t.prototype.buffer=function(){return o.s(this.shape,this.dtype,this.dataSync())},t.prototype.data=function(){return p(this,void 0,void 0,function(){return f(this,function(t){return this.throwIfDisposed(),[2,i.ENV.engine.read(this.dataId)]})})},t.prototype.dataSync=function(){return this.throwIfDisposed(),i.ENV.engine.readSync(this.dataId)},t.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,i.ENV.engine.disposeTensor(this))},t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),o.Cb(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),o.Jb(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),o.Q(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),o.H(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),o.kc(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),o.w(this)},t.prototype.toString=function(t){return void 0===t&&(t=!1),s.a(this,t)},t.prototype.tile=function(t){return this.throwIfDisposed(),o.yc(this,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),o.W(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),o.Ta(this,t,e,n)},t.prototype.norm=function(t,e,n){return void 0===t&&(t="euclidean"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),o.mb(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),o.Yb(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),o.Kb(this,t)},t.prototype.concat=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),o.x([this,t],e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),o.lc([this,t],e)},t.prototype.unstack=function(t,e){return void 0===e&&(e=0),o.Dc(this,e)},t.prototype.pad=function(t,e){return void 0===e&&(e=0),o.ub(this,t,e)},t.prototype.batchNormalization=function(t,e,n,r,a){return void 0===n&&(n=.001),this.throwIfDisposed(),o.o(this,t,e,n,r,a)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),o.Na(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),o.qc(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),o.Za(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),o.ab(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),o.Va(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),o.g(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),o.f(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),o.t(this,t)},t.prototype.add=function(t){return this.throwIfDisposed(),o.d(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),o.e(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),o.oc(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),o.pc(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),o.zb(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),o.Ab(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),o.hb(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),o.ib(this,t)},t.prototype.div=function(t){return this.throwIfDisposed(),o.J(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),o.K(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),o.bb(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),o.cb(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),o.Xa(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),o.Ya(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),o.db(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),o.eb(this,t)},t.prototype.squaredDifference=function(t){return this.throwIfDisposed(),o.ic(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),o.jc(this,t)},t.prototype.transpose=function(t){return this.throwIfDisposed(),o.Ac(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),o.nb(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),o.ob(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),o.Da(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),o.Ga(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),o.M(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),o.N(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),o.Ea(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),o.Fa(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),o.X(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),o.Aa(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),o.Y(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),o.Z(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),o.Oa(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),o.Qa(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),o.Pa(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),o.Ra(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),o.Fc(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),o.lb(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),o.u(this)},t.prototype.floor=function(){return this.throwIfDisposed(),o.U(this)},t.prototype.sign=function(){return this.throwIfDisposed(),o.Vb(this)},t.prototype.exp=function(){return this.throwIfDisposed(),o.P(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),o.R(this)},t.prototype.log=function(){return this.throwIfDisposed(),o.Ka(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),o.La(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),o.gc(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),o.Qb(this)},t.prototype.square=function(){return this.throwIfDisposed(),o.hc(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),o.Hb(this)},t.prototype.abs=function(){return this.throwIfDisposed(),o.a(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),o.v(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),o.Ib(this)},t.prototype.elu=function(){return this.throwIfDisposed(),o.L(this)},t.prototype.selu=function(){return this.throwIfDisposed(),o.Sb(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),o.Ca(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),o.Bb(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),o.Ub(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),o.Ma(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),o.ec(this)},t.prototype.sin=function(){return this.throwIfDisposed(),o.Wb(this)},t.prototype.cos=function(){return this.throwIfDisposed(),o.F(this)},t.prototype.tan=function(){return this.throwIfDisposed(),o.rc(this)},t.prototype.asin=function(){return this.throwIfDisposed(),o.h(this)},t.prototype.acos=function(){return this.throwIfDisposed(),o.b(this)},t.prototype.atan=function(){return this.throwIfDisposed(),o.j(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),o.Xb(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),o.G(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),o.sc(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),o.i(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),o.c(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),o.l(this)},t.prototype.erf=function(){return this.throwIfDisposed(),o.O(this)},t.prototype.round=function(){return this.throwIfDisposed(),o.Pb(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),o.mc(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),o.dc(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),o.Ba.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),o.Ba.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,a,i){return void 0===r&&(r="NWC"),void 0===a&&(a=1),this.throwIfDisposed(),o.C(this,t,e,n,r,a,i)},t.prototype.conv2d=function(t,e,n,r,a,i){return void 0===r&&(r="NHWC"),void 0===a&&(a=[1,1]),this.throwIfDisposed(),o.D(this,t,e,n,r,a,i)},t.prototype.conv2dTranspose=function(t,e,n,r,a){return this.throwIfDisposed(),o.E(this,t,e,n,r,a)},t.prototype.depthwiseConv2D=function(t,e,n,r,a,i){return void 0===r&&(r="NHWC"),void 0===a&&(a=[1,1]),this.throwIfDisposed(),o.I(this,t,e,n,r,a,i)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),o.m(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),o.Wa(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),o.Ja(this,t,e,n,r)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),m.variable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e,n){return void 0===n&&(n=0),this.throwIfDisposed(),o.Cc(this,t,e,n)},t.nextId=0,c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"flatten",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"asScalar",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"as1D",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"as2D",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"as3D",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"as4D",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"asType",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"buffer",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"data",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"dataSync",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"dispose",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"toFloat",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"toInt",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"toBool",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"print",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"reshape",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"reshapeAs",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"expandDims",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"cumsum",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"squeeze",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"clone",null),c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t.prototype,"toString",null),t=e=c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],t);var e}(),m=function(t){function e(e,r,a){void 0===r&&(r=!0);var o=t.call(this,e.shape,e.dtype,null,e.dataId)||this;return o.trainable=r,o.name=a,null==o.name&&(o.name=n.nextVarId.toString(),n.nextVarId++),i.ENV.engine.registerVariable(o),o}return l(e,t),n=e,e.variable=function(t,e,r,a){return void 0===e&&(e=!0),null!=a&&a!==t.dtype&&(t=t.asType(a)),new n(t,e,r)},e.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!u.arraysEqual(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");i.ENV.engine.disposeTensor(this),this.dataId=t.dataId,i.ENV.engine.registerTensor(this)},e.nextVarId=0,c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],e.prototype,"assign",null),c([Object(a.a)({heading:"Tensors",subheading:"Creation"})],e,"variable",null),e=n=c([Object(a.a)({heading:"Tensors",subheading:"Classes"})],e);var n}(d),g=m.variable;function y(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}},function(t,e,n){"use strict";var r=n(3),a=n(4),i=n(6),o=n(1),s=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},u=function(){function t(){}return t.gradScope=function(t,e){return p(t,e,!0)},t.grad=function(t){return o.assert(o.isFunction(t),"The f passed in grad(f) must be a function"),function(e,n){return o.assert(e instanceof i.a,"The x passed in grad(f)(x) must be a tensor"),o.assert(null==n||n instanceof i.a,"The dy passed in grad(f)(x, dy) must be a tensor"),p(function(){var r=a.ENV.engine.gradients(function(){return t(e)},[e],n),i=r.value,s=r.grads;return null!=n&&o.assertShapesMatch(i.shape,n.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),l(s),s[0]})}},t.grads=function(t){return o.assert(o.isFunction(t),"The f passed in grads(f) must be a function"),function(e,n){return o.assert(Array.isArray(e)&&e.every(function(t){return t instanceof i.a}),"The args passed in grads(f)(args) must be an array of tensors"),o.assert(null==n||n instanceof i.a,"The dy passed in grads(f)(args, dy) must be a tensor"),p(function(){var r=a.ENV.engine.gradients(function(){return t.apply(void 0,e)},e,n),i=r.value,s=r.grads;return null!=n&&o.assertShapesMatch(i.shape,n.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),l(s),s})}},t.valueAndGrad=function(t){return o.assert(o.isFunction(t),"The f passed in valueAndGrad(f) must be a function"),function(e,n){o.assert(e instanceof i.a,"The x passed in valueAndGrad(f)(x) must be a tensor"),o.assert(null==n||n instanceof i.a,"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");var r=a.ENV.engine.gradients(function(){return t(e)},[e],n),s=r.grads,u=r.value;return l(s),{grad:s[0],value:u}}},t.valueAndGrads=function(t){return o.assert(o.isFunction(t),"The f passed in valueAndGrads(f) must be a function"),function(e,n){o.assert(Array.isArray(e)&&e.every(function(t){return t instanceof i.a}),"The args passed in valueAndGrads(f)(args) must be array of tensors"),o.assert(null==n||n instanceof i.a,"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");var r=a.ENV.engine.gradients(function(){return t.apply(void 0,e)},e,n);return null!=n&&o.assertShapesMatch(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),l(r.grads),r}},t.variableGrads=function(t,e){if(o.assert(o.isFunction(t),"The f passed in variableGrads(f) must be a function"),o.assert(null==e||Array.isArray(e)&&e.every(function(t){return t instanceof i.c}),"The varList passed in variableGrads(f, varList) must be an array of variables"),null==e)for(var n in e=[],a.ENV.engine.registeredVariables)e.push(a.ENV.engine.registeredVariables[n]);var r=e.length;e=e.filter(function(t){return t.trainable}),o.assert(e.length>0,"variableGrads() expects at least one of the input variables to be trainable, but none of the "+r+" variables is trainable.");var s=a.ENV.engine.gradients(t,e,null,!0),u=s.value,l=s.grads;o.assert(l.some(function(t){return null!=t}),"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),o.assert(0===u.rank,"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+u.rank+" tensor");var c={};return e.forEach(function(t,e){null!=l[e]&&(c[t.name]=l[e])}),{value:u,grads:c}},t.customGrad=function(t){return a.ENV.engine.customGrad(t)},s([Object(r.a)({heading:"Training",subheading:"Gradients"})],t,"grad",null),s([Object(r.a)({heading:"Training",subheading:"Gradients"})],t,"grads",null),s([Object(r.a)({heading:"Training",subheading:"Gradients"})],t,"valueAndGrad",null),s([Object(r.a)({heading:"Training",subheading:"Gradients"})],t,"valueAndGrads",null),s([Object(r.a)({heading:"Training",subheading:"Gradients"})],t,"variableGrads",null),s([Object(r.a)({heading:"Training",subheading:"Gradients"})],t,"customGrad",null),t}();function l(t){if(t.filter(function(t){return null==t}).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var c=n(21);n.d(e,"f",function(){return p}),n.d(e,"e",function(){return f}),n.d(e,"b",function(){return h}),n.d(e,"g",function(){return d}),n.d(e,"c",function(){return m}),n.d(e,"h",function(){return g}),n.d(e,"d",function(){return y}),n.d(e,"i",function(){return v}),n.d(e,"j",function(){return b}),n.d(e,"a",function(){return w});var p=c.a.tidy,f=c.a.keep,h=c.a.dispose,d=c.a.time,m=u.grad,g=u.valueAndGrad,y=u.grads,v=u.valueAndGrads,b=u.variableGrads,w=u.customGrad},function(t,e,n){"use strict";n.d(e,"b",function(){return i}),n.d(e,"c",function(){return o}),n.d(e,"g",function(){return s}),n.d(e,"a",function(){return u}),n.d(e,"d",function(){return l}),n.d(e,"f",function(){return c}),n.d(e,"e",function(){return p});var r=n(1);function a(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function i(t,e){for(var n=[],r=t.length,a=0;a<r;a++)-1===e.indexOf(a)&&n.push(t[a]);return[n,e.map(function(e){return t[e]})]}function o(t,e){return function(t,e,n){for(var r=t.length+e.length,a=[],i=0,o=0,s=0;s<r;s++)-1===n.indexOf(s)?a.push(t[i++]):a.push(e[o++]);return a}(t,e.map(function(t){return 1}),e)}function s(t,e){var n=e.length;return t=null==t?e.map(function(t,e){return e}):[].concat(t),r.assert(t.every(function(t){return t>=-n&&t<n}),"All values in axis param must be in range [-"+n+", "+n+") but got axis "+t),r.assert(t.every(function(t){return r.isInt(t)}),"All values in axis param must be integers but got axis "+t),t.map(function(t){return t<0?n+t:t})}function u(t,e,n){r.assert(a(e,n),t+" supports only inner-most axes for now. Got axes "+e+" and rank-"+n+" input.")}function l(t,e){if(a(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach(function(t){return n.push(t)}),n}function c(t){return t.map(function(t,e){return[e,t]}).sort(function(t,e){return t[1]-e[1]}).map(function(t){return t[0]})}function p(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}},function(t,e,n){"use strict";var r=n(3),a=n(4),i=n(6),o=n(26),s=n(1),u=n(8),l=n(18),c=n(5),p=n(25),f=function(){function t(t,e,n,r,a){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var i=a||Math.random();this.random=p.alea(i.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var a=void 0,i=void 0,o=void 0;do{o=(a=2*this.random()-1)*a+(i=2*this.random()-1)*i}while(o>=1||0===o);var s=Math.sqrt(-2*Math.log(o)/o);e=this.mean+this.stdDev*a*s,n=this.mean+this.stdDev*i*s,this.truncated&&!this.isValidTruncated(e)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),h=n(14);n.d(e,"a",function(){return y});var d=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},m=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},g=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},y=function(){function t(){}return t.tensor=function(t,e,n){void 0===n&&(n="float32");var r=s.inferShape(t);return null!=e&&1!==r.length&&s.assertShapesMatch(e,r,"Error creating a new Tensor. Inferred shape ("+r+") does not match the provided shape ("+e+"). "),s.isTypedArray(t)||Array.isArray(t)||(t=[t]),e=e||r,i.a.make(e,{values:function(t,e){if(function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;Array.isArray(t)&&(t=s.flatten(t));return s.copyTypedArray(t,e)}(t,n)},n)},t.scalar=function(e,n){if(void 0===n&&(n="float32"),s.isTypedArray(e)||Array.isArray(e))throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean)");return t.tensor(e,[],n)},t.tensor1d=function(e,n){void 0===n&&(n="float32");var r=s.inferShape(e);if(1!==r.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return t.tensor(e,r,n)},t.tensor2d=function(e,n,r){if(void 0===r&&(r="float32"),null!=n&&2!==n.length)throw new Error("tensor2d() requires shape to have two numbers");var a=s.inferShape(e);if(2!==a.length&&1!==a.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===a.length&&null==n)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return n=n||a,t.tensor(e,n,r)},t.tensor3d=function(e,n,r){if(void 0===r&&(r="float32"),null!=n&&3!==n.length)throw new Error("tensor3d() requires shape to have three numbers");var a=s.inferShape(e);if(3!==a.length&&1!==a.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===a.length&&null==n)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return n=n||a,t.tensor(e,n,r)},t.tensor4d=function(e,n,r){if(void 0===r&&(r="float32"),null!=n&&4!==n.length)throw new Error("tensor4d() requires shape to have four numbers");var a=s.inferShape(e);if(4!==a.length&&1!==a.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===a.length&&null==n)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return n=n||a,t.tensor(e,n,r)},t.ones=function(t,e){void 0===e&&(e="float32");var n=function(t,e){for(var n=v(t,e),r=0;r<n.length;r++)n[r]=1;return n}(s.sizeFromShape(t),e);return i.a.make(t,{values:n},e)},t.zeros=function(t,e){void 0===e&&(e="float32");var n=v(s.sizeFromShape(t),e);return i.a.make(t,{values:n},e)},t.fill=function(t,e,n){void 0===n&&(n="float32");var r=s.getTypedArrayFromDType(n,s.sizeFromShape(t));return r.fill(e),i.a.make(t,{values:r},n)},t.onesLike=function(e){return s.assertArgumentsAreTensors({x:e},"onesLike"),t.ones(e.shape,e.dtype)},t.zerosLike=function(e){return s.assertArgumentsAreTensors({x:e},"zerosLike"),t.zeros(e.shape,e.dtype)},t.clone=function(t){s.assertArgumentsAreTensors({x:t},"clone");return a.ENV.engine.runKernel(function(e){return i.a.make(t.shape,{dataId:t.dataId},t.dtype)},{x:t},function(t){return{x:function(){return t.toFloat()}}})},t.eye=function(e,n,r,a){void 0===a&&(a="float32"),null==n&&(n=e);for(var i=t.buffer([e,n],a),o=e<=n?e:n,s=0;s<o;++s)i.set(1,s,s);var u=i.toTensor().as2D(e,n);if(null==r)return u;if(1===r.length)return t.tile(t.expandDims(u,0),[r[0],1,1]);if(2===r.length)return t.tile(t.expandDims(t.expandDims(u,0),0),[r[0],r[1],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+r.length+"D.")},t.randomNormal=function(e,n,r,a,i){if(void 0===n&&(n=0),void 0===r&&(r=1),null!=a&&"bool"===a)throw new Error("Unsupported data type "+a);for(var o=new f(n,r,a,!1,i),s=t.buffer(e,a),u=0;u<s.values.length;u++)s.values[u]=o.nextValue();return s.toTensor()},t.truncatedNormal=function(e,n,r,a,i){if(void 0===n&&(n=0),void 0===r&&(r=1),null!=a&&"bool"===a)throw new Error("Unsupported data type "+a);for(var o=new f(n,r,a,!0,i),s=t.buffer(e,a),u=0;u<s.values.length;u++)s.values[u]=o.nextValue();return s.toTensor()},t.randomUniform=function(e,n,r,a){void 0===n&&(n=0),void 0===r&&(r=1),void 0===a&&(a="float32");for(var i=t.buffer(e,a),o=0;o<i.values.length;o++)i.values[o]=s.randUniform(n,r);return i.toTensor()},t.rand=function(t,e,n){var r=s.sizeFromShape(t),a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);a=new Uint8Array(r)}for(var o=0;o<r;o++)a[o]=e();return i.a.make(t,{values:a},n)},t.multinomial=function(t,e,n,r){void 0===r&&(r=!1),s.assertArgumentsAreTensors({logits:t},"multinomial");var i=t.size,o=t.rank;if(i<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+i+".");if(o>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+o);n=n||Math.random();var u=1===o?t.as2D(1,-1):t,l=a.ENV.engine.runKernel(function(t){return t.multinomial(u,r,e,n)},{logits2D:u});return 1===o?l.as1D():l},t.oneHot=function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),s.assert("int32"===t.dtype,"Indices must be of dtype `int32`"),e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);return a.ENV.engine.runKernel(function(a){return a.oneHot(t,e,n,r)},{indices:t})},t.fromPixels=function(t,e){if(void 0===e&&(e=3),e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");return a.ENV.engine.fromPixels(t,e)},t.toPixels=function(t,e){return m(this,void 0,void 0,function(){var n,r,a,i,o,u,l,c,p,f,h,d,m,y,v,b,w,x,O;return g(this,function(g){switch(g.label){case 0:if(s.assertArgumentsAreTensors({img:t},"toPixels"),2!==t.rank&&3!==t.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+t.rank+".");if(n=t.shape.slice(0,2),r=n[0],a=n[1],(i=2===t.rank?1:t.shape[2])>4||2===i)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+i);return o=t.min(),u=t.max(),[4,o.data()];case 1:return l=g.sent()[0],[4,u.data()];case 2:if(c=g.sent()[0],o.dispose(),u.dispose(),"float32"===t.dtype){if(l<0||c>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+l+" - "+c+"].")}else{if("int32"!==t.dtype)throw new Error("Unsupported type for toPixels: "+t.dtype+". Please use float32 or int32 tensors.");if(l<0||c>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+l+" - "+c+"].")}return[4,t.data()];case 3:for(p=g.sent(),f="float32"===t.dtype?255:1,h=new Uint8ClampedArray(a*r*4),d=0;d<r*a;++d)m=void 0,y=void 0,v=void 0,b=void 0,1===i?(m=p[d]*f,y=p[d]*f,v=p[d]*f,b=255):3===i?(m=p[3*d]*f,y=p[3*d+1]*f,v=p[3*d+2]*f,b=255):4===i&&(m=p[4*d]*f,y=p[4*d+1]*f,v=p[4*d+2]*f,b=p[4*d+3]*f),h[(w=4*d)+0]=Math.round(m),h[w+1]=Math.round(y),h[w+2]=Math.round(v),h[w+3]=Math.round(b);return null!=e&&(e.width=a,e.height=r,x=e.getContext("2d"),O=new ImageData(h,a,r),x.putImageData(O,0,0)),[2,h]}})})},t.reshape=function(t,e){s.assertArgumentsAreTensors({x:t},"reshape"),e=s.inferFromImplicitShape(e,t.size),s.assert(t.size===s.sizeFromShape(e),"new shape and old shape must have the same number of elements.");return a.ENV.engine.runKernel(function(n){return n.reshape(t,e)},{x:t},function(e){return{x:function(){return e.reshape(t.shape)}}})},t.squeeze=function(e,n){return s.assertArgumentsAreTensors({x:e},"squeeze"),t.reshape(e,s.squeezeShape(e.shape,n).newShape)},t.cast=function(t,e){s.assertArgumentsAreTensors({x:t},"cast");return a.ENV.engine.runKernel(function(n){return n.cast(t,e)},{x:t},function(t){return{x:function(){return t.clone()}}})},t.tile=function(e,n){s.assertArgumentsAreTensors({x:e},"tile"),s.assert(e.rank===n.length,"Error in transpose: rank of input "+e.rank+" must match length of reps "+n+".");return a.ENV.engine.runKernel(function(t){return t.tile(e,n)},{x:e},function(r){return{x:function(){var a=t.zerosLike(e);if(1===e.rank)for(var i=0;i<n[0];++i)a=a.add(r.slice([i*e.shape[0]],[e.shape[0]]));else if(2===e.rank)for(i=0;i<n[0];++i)for(var o=0;o<n[1];++o)a=a.add(r.slice([i*e.shape[0],o*e.shape[1]],[e.shape[0],e.shape[1]]));else if(3===e.rank)for(i=0;i<n[0];++i)for(o=0;o<n[1];++o)for(var s=0;s<n[2];++s)a=a.add(r.slice([i*e.shape[0],o*e.shape[1],s*e.shape[2]],[e.shape[0],e.shape[1],e.shape[2]]));else{if(4!==e.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+e.rank+" tensors yet.");for(i=0;i<n[0];++i)for(o=0;o<n[1];++o)for(s=0;s<n[2];++s)for(var u=0;u<n[3];++u)a=a.add(r.slice([i*e.shape[0],o*e.shape[1],s*e.shape[2],u*e.shape[3]],[e.shape[0],e.shape[1],e.shape[2],e.shape[3]]))}return a}}})},t.gather=function(t,e,n){void 0===n&&(n=0),s.assertArgumentsAreTensors({x:t,indices:e},"gather"),s.assert("int32"===e.dtype,"Indices must be of dtype `int32`"),n=Object(u.g)(n,t.shape)[0];return a.ENV.engine.runKernel(function(r){return r.gather(t,e,n)},{x:t},function(r){return{x:function(){return h.a.unsortedSegmentSum(r,e,t.shape[n],n)}}})},t.pad1d=function(e,n,r){return void 0===r&&(r=0),s.assert(2===n.length,"Invalid number of paddings. Must be length of 2."),t.pad(e,[n],r)},t.pad2d=function(e,n,r){return void 0===r&&(r=0),s.assert(2===n.length&&2===n[0].length&&2===n[1].length,"Invalid number of paddings. Must be length of 2 each."),t.pad(e,n,r)},t.pad3d=function(e,n,r){return void 0===r&&(r=0),s.assert(3===n.length&&2===n[0].length&&2===n[1].length&&2===n[2].length,"Invalid number of paddings. Must be length of 2 each."),t.pad(e,n,r)},t.pad4d=function(e,n,r){return void 0===r&&(r=0),s.assert(4===n.length&&2===n[0].length&&2===n[1].length&&2===n[2].length&&2===n[3].length,"Invalid number of paddings. Must be length of 2 each."),t.pad(e,n,r)},t.pad=function(t,e,n){if(void 0===n&&(n=0),s.assertArgumentsAreTensors({x:t},"pad"),0===t.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var r=e.map(function(t){return t[0]});return a.ENV.engine.runKernel(function(r){return r.pad(t,e,n)},{x:t},function(e){return{x:function(){return e.slice(r,t.shape)}}})},t.stack=function(t,e){if(void 0===e&&(e=0),s.assertArgumentsAreTensors({tensors:t},"stack"),s.assert(t.length>=1,"Pass at least one tensor to tf.stack"),1===t.length)return t[0].expandDims(e);var n=t[0].rank,r=t[0].shape,a=t[0].dtype;s.assert(e<=n,"Axis must be <= rank of the tensor"),t.forEach(function(t){s.assertShapesMatch(r,t.shape,"All tensors passed to stack must have matching shapes")}),t.forEach(function(t){s.assert(a===t.dtype,"All tensors passed to stack must have matching dtypes")});var i=t.map(function(t){return t.expandDims(e)});return l.a.concat(i,e)},t.unstack=function(t,e){void 0===e&&(e=0);for(var n,r=t.shape[e],a=Array(t.rank-1).fill(0),i=0,o=0;o<t.rank;o++)o!==e&&(a[i]=t.shape[o],i++);n=Array(r).fill(1);var s=Array(t.rank).fill(0),u=t.shape.slice();return n.map(function(n){u[e]=n;var r=t.slice(s,u);return s[e]+=n,r.reshape(a)})},t.split=function(t,e,n){var r;void 0===n&&(n=0),s.assertArgumentsAreTensors({x:t},"split"),n=Object(u.g)(n,t.shape)[0],"number"==typeof e?(s.assert(t.shape[n]%e==0,"Number of splits must evenly divide the axis."),r=Array(e).fill(t.shape[n]/e)):(s.assert(t.shape[n]===e.reduce(function(t,e){return t+e}),"The sum of sizes must match the size of the axis dimension."),r=e);var a=Array(t.rank).fill(0),i=t.shape.slice();return r.map(function(e){i[n]=e;var r=t.slice(a,i);return a[n]+=e,r})},t.cumsum=function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1),s.assertArgumentsAreTensors({x:t},"cumsum");var i=Object(u.d)([e],t.rank),o=t;null!=i&&(o=t.transpose(i));var l=a.ENV.engine.runKernel(function(t){return t.cumsum(o,e,n,r)},{permutedX:o},function(t){return{permutedX:function(){return t.cumsum(e,n,!r)}}});return null!=i&&(l=l.transpose(i)),l},t.expandDims=function(e,n){void 0===n&&(n=0),s.assertArgumentsAreTensors({x:e},"expandDims"),s.assert(n<=e.rank,"Axis must be <= rank of the tensor");var r=e.shape.slice();return r.splice(n,0,1),t.reshape(e,r)},t.linspace=function(e,n,r){if(0===r)throw new Error("Cannot request zero samples");var a=(n-e)/(r-1),i=v(r,"float32");i[0]=e;for(var o=1;o<i.length;o++)i[o]=i[o-1]+a;return t.tensor1d(i,"float32")},t.range=function(e,n,r,a){if(void 0===r&&(r=1),void 0===a&&(a="float32"),0===r)throw new Error("Cannot have a step of zero");if(e===n||e<n&&r<0||n<e&&r>1)return t.zeros([0],a);var i=v(Math.abs(Math.ceil((n-e)/r)),a);n<e&&1===r&&(r=-1),i[0]=e;for(var o=1;o<i.length;o++)i[o]=i[o-1]+r;return t.tensor1d(i,a)},t.buffer=function(t,e,n){return void 0===e&&(e="float32"),new i.b(t,e,n)},t.print=function(t,e){void 0===e&&(e=!1),console.log(o.a(t,e))},d([Object(r.a)({heading:"Tensors",subheading:"Creation"})],t,"tensor",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"})],t,"scalar",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"})],t,"tensor1d",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"})],t,"tensor2d",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"})],t,"tensor3d",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"})],t,"tensor4d",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"ones",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"zeros",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"fill",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"onesLike",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"zerosLike",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"clone",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"eye",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"randomNormal",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"truncatedNormal",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"randomUniform",null),d([c.a],t,"rand",null),d([c.a],t,"multinomial",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"oneHot",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"}),c.a],t,"fromPixels",null),d([Object(r.a)({heading:"Visualization"})],t,"toPixels",null),d([Object(r.a)({heading:"Tensors",subheading:"Transformations"}),c.a],t,"reshape",null),d([Object(r.a)({heading:"Tensors",subheading:"Transformations"})],t,"squeeze",null),d([Object(r.a)({heading:"Tensors",subheading:"Transformations"}),c.a],t,"cast",null),d([Object(r.a)({heading:"Tensors",subheading:"Slicing and Joining"}),c.a],t,"tile",null),d([Object(r.a)({heading:"Tensors",subheading:"Slicing and Joining"}),c.a],t,"gather",null),d([Object(r.a)({heading:"Tensors",subheading:"Transformations"}),c.a],t,"pad",null),d([Object(r.a)({heading:"Tensors",subheading:"Slicing and Joining"}),c.a],t,"stack",null),d([Object(r.a)({heading:"Tensors",subheading:"Slicing and Joining"}),c.a],t,"unstack",null),d([Object(r.a)({heading:"Tensors",subheading:"Slicing and Joining"}),c.a],t,"split",null),d([Object(r.a)({heading:"Operations",subheading:"Scan"})],t,"cumsum",null),d([Object(r.a)({heading:"Tensors",subheading:"Transformations"}),c.a],t,"expandDims",null),d([c.a,Object(r.a)({heading:"Tensors",subheading:"Creation"})],t,"linspace",null),d([c.a,Object(r.a)({heading:"Tensors",subheading:"Creation"})],t,"range",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"})],t,"buffer",null),d([Object(r.a)({heading:"Tensors",subheading:"Creation"})],t,"print",null),t}();function v(t,e){if(null==e||"float32"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type $ {dtype}")}},function(t,e,n){"use strict";function r(t,e){for(var n=t.length,r=[],a=0;a<n;a++){var i=n-1-a,o=t[i]||1;(e[e.length-1-a]||1)>1&&1===o&&r.unshift(i)}return r}function a(t,e){for(var n=[],r=0;r<e.length;r++){var a=t[t.length-r-1],i=e.length-r-1,o=e[i];(null==a||1===a&&o>1)&&n.unshift(i)}return n}function i(t){for(var e=0;e<t.length;e++)if(t[e]!==e)return!1;return!0}function o(t,e){for(var n=[],r="Operands could not be broadcast together with shapes "+t+" and "+e+".",a=Math.max(t.length,e.length),i=0;i<a;i++){var o=t[t.length-i-1]||1,s=e[e.length-i-1]||1;if(o>1&&s>1&&o!==s)throw Error(r);n.unshift(Math.max(o,s))}return n}n.d(e,"c",function(){return r}),n.d(e,"d",function(){return a}),n.d(e,"b",function(){return i}),n.d(e,"a",function(){return o})},function(t,e,n){"use strict";var r,a,i,o,s;n.d(e,"a",function(){return a}),n.d(e,"c",function(){return l}),n.d(e,"b",function(){return c}),function(t){t.float32="float32",t.int32="int32",t.bool="bool"}(r||(r={})),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4"}(a||(a={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32"}(i||(i={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool"}(o||(o={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32"}(s||(s={}));var u={float32:s,int32:i,bool:o};function l(t,e){return u[t][e]}function c(t){return l(t,"int32")}},function(t,e,n){"use strict";var r=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o};function a(t,e,n){var a=r(o(t),2),s=a[0],u=a[1],l=n.currentContextIds.find(function(t){return!!e[i(s,t)]});return void 0!==l?e[i(s,l)][u]:void 0}function i(t,e){return e?t+"-"+e:t}function o(t){var e=t.lastIndexOf(":");return-1===e?[t,0]:[t.substring(0,e),Number(t.substring(e+1))]}Object.defineProperty(e,"__esModule",{value:!0}),e.getParamValue=function(t,e,n,r){var i=e.params[t];if(i&&void 0!==i.inputIndex){if("tensor"===i.type)return a(e.inputNames[i.inputIndex],n,r);if("tensors"===i.type)return(0===i.inputIndex?e.inputNames.slice(i.inputIndex,-i.inputParamLength):e.inputNames.splice(i.inputIndex)).map(function(t){return a(t,n,r)});var o=Array.prototype.slice.call(a(e.inputNames.slice(i.inputIndex)[0],n,r).dataSync());return"number"===i.type?o[0]:o}return i&&i.value},e.getTensor=a,e.getNodeNameAndIndex=function(t,e){var n=r(o(t),2),a=n[0],s=n[1];return[i(a,e&&e.currentContextId),s]},e.parseNodeName=o,e.split=function(t,e){for(var n=[],r=0;r<t.length;r+=e)n.push(t.slice(r,r+e));return n}},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e,n){"use strict";n.d(e,"a",function(){return p});var r=n(3),a=n(4),i=n(7),o=n(1),s=n(8),u=n(5),l=n(2),c=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},p=function(){function t(){}return t.logSumExp=function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1),o.assertArgumentsAreTensors({x:t},"logSumExp");var r=s.g(e,t.shape),a=t.max(r,!0),i=t.sub(a).exp().sum(r).log(),u=a.reshape(i.shape).add(i);if(n){var l=s.c(u.shape,r);return u.reshape(l)}return u},t.sum=function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1),o.assertArgumentsAreTensors({x:t},"sum"),"bool"===t.dtype&&(t=t.toInt());var r=s.g(e,t.shape);return Object(i.a)(function(t){var e=s.d(r,t.rank),i=r,o=t;null!=e&&(o=t.transpose(e),i=s.e(i.length,t.rank));var u=a.ENV.engine.runKernel(function(t){return t.sum(o,i)},{permutedX:o});if(n){var c=s.c(u.shape,r);u=u.reshape(c)}return{value:u,gradFunc:function(e){var n=t.shape.slice();return r.forEach(function(t){n[t]=1}),e.reshape(n).mul(l.qb(t.shape,"float32"))}}})(t)},t.mean=function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1),o.assertArgumentsAreTensors({x:t},"mean");var r=s.g(e,t.shape),a=s.b(t.shape,r)[1],u=o.sizeFromShape(a);return Object(i.a)(function(t){var a=l.Rb(u);return{value:(a.dtype===t.dtype?t:t.cast(a.dtype)).div(a).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return r.forEach(function(t){n[t]=1}),e.reshape(n).mul(l.qb(t.shape,"float32")).div(a)}}})(t)},t.min=function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1),o.assertArgumentsAreTensors({x:t},"min");var r=s.g(e,t.shape),i=r,u=s.d(i,t.rank);null!=u&&(t=t.transpose(u),i=s.e(i.length,t.rank));var l=a.ENV.engine.runKernel(function(e){return e.min(t,i)},{x:t});if(n){var c=s.c(l.shape,r);return l.reshape(c)}return l},t.max=function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1),o.assertArgumentsAreTensors({x:t},"max");var r=s.g(e,t.shape),i=r,u=s.d(i,t.rank);null!=u&&(t=t.transpose(u),i=s.e(i.length,t.rank));var l=a.ENV.engine.runKernel(function(e){return e.max(t,i)},{x:t});if(n){var c=s.c(l.shape,r);return l.reshape(c)}return l},t.argMin=function(t,e){void 0===e&&(e=0),o.assertArgumentsAreTensors({x:t},"argMin"),null==e&&(e=0);var n=s.g(e,t.shape),r=s.d(n,t.rank);return null!=r&&(t=t.transpose(r),n=s.e(n.length,t.rank)),a.ENV.engine.runKernel(function(e){return e.argMin(t,n[0])},{x:t})},t.argMax=function(t,e){void 0===e&&(e=0),o.assertArgumentsAreTensors({x:t},"argMax"),null==e&&(e=0);var n=s.g(e,t.shape),r=s.d(n,t.rank);return null!=r&&(t=t.transpose(r),n=s.e(n.length,t.rank)),a.ENV.engine.runKernel(function(e){return e.argMax(t,n[0])},{x:t})},t.moments=function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1),o.assertArgumentsAreTensors({x:t},"moments");var r=s.g(e,t.shape),a=t.mean(r,n),i=a.shape;return n||(i=s.c(a.shape,r)),{mean:a,variance:t.toFloat().sub(a.reshape(i)).square().mean(r,n)}},t.unsortedSegmentSum=function(t,e,n,r){void 0===r&&(r=0),o.assertArgumentsAreTensors({x:t,segmentIds:e},"unsortedSegmentSum"),o.assert("int32"===e.dtype,"Segment Ids must be of dtype `int32`"),r=s.g(r,t.shape)[0];for(var a=[],i=e.shape[0],u=[],c=0;c<t.shape.length;c++)c===r?u.push(i):u.push(1);var p=l.Jb(e,u);for(c=0;c<n;c++){var f=l.Rb(c,"int32"),h=l.M(f,p).asType("float32").mul(t).sum(r);a.push(h)}return l.lc(a,r)},c([Object(r.a)({heading:"Operations",subheading:"Reduction"}),u.a],t,"logSumExp",null),c([Object(r.a)({heading:"Operations",subheading:"Reduction"}),u.a],t,"sum",null),c([Object(r.a)({heading:"Operations",subheading:"Reduction"}),u.a],t,"mean",null),c([Object(r.a)({heading:"Operations",subheading:"Reduction"}),u.a],t,"min",null),c([Object(r.a)({heading:"Operations",subheading:"Reduction"}),u.a],t,"max",null),c([Object(r.a)({heading:"Operations",subheading:"Reduction"}),u.a],t,"argMin",null),c([Object(r.a)({heading:"Operations",subheading:"Reduction"}),u.a],t,"argMax",null),c([Object(r.a)({heading:"Operations",subheading:"Normalization"}),u.a],t,"moments",null),c([Object(r.a)({heading:"Operations",subheading:"Reduction"}),u.a],t,"unsortedSegmentSum",null),t}()},function(t,e,n){"use strict";n.d(e,"b",function(){return r}),n.d(e,"a",function(){return l});var r,a=n(3),i=n(1),o=n(5),s=n(2),u=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o};!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}));var l=function(){function t(){}return t.computeWeightedLoss=function(t,e,n){void 0===n&&(n=r.SUM_BY_NONZERO_WEIGHTS),i.assertArgumentsAreTensors({losses:t},"computeWeightedLoss"),null!=e&&i.assertArgumentsAreTensors({weights:e},"computeWeightedLoss");var a=null==e?t:t.mul(e);if(n===r.NONE)return a;if(n===r.SUM)return a.sum();if(n===r.MEAN)return null==e?a.mean():a.sum().div(e.sum());if(n===r.SUM_BY_NONZERO_WEIGHTS){if(null==e)return a.sum().div(s.Rb(t.size));var o=e.notEqual(s.Rb(0)).sum().toFloat();return a.sum().div(o)}throw Error("Unknown reduction: "+n)},t.absoluteDifference=function(e,n,a,o){void 0===o&&(o=r.SUM_BY_NONZERO_WEIGHTS),i.assertArgumentsAreTensors({labels:e,predictions:n},"absoluteDifference"),null!=a&&i.assertArgumentsAreTensors({weights:a},"absoluteDifference"),i.assertShapesMatch(e.shape,n.shape,"Error in absoluteDifference: ");var s=e.sub(n).abs();return t.computeWeightedLoss(s,a,o)},t.meanSquaredError=function(e,n,a,o){void 0===o&&(o=r.SUM_BY_NONZERO_WEIGHTS),i.assertArgumentsAreTensors({labels:e,predictions:n},"meanSquaredError"),null!=a&&i.assertArgumentsAreTensors({weights:a},"meanSquaredError"),i.assertShapesMatch(e.shape,n.shape,"Error in meanSquaredError: ");var s=e.squaredDifference(n);return t.computeWeightedLoss(s,a,o)},t.cosineDistance=function(e,n,a,o,u){void 0===u&&(u=r.SUM_BY_NONZERO_WEIGHTS),i.assertArgumentsAreTensors({labels:e,predictions:n},"cosineDistance"),null!=o&&i.assertArgumentsAreTensors({weights:o},"cosineDistance"),i.assertShapesMatch(e.shape,n.shape,"Error in cosineDistance: ");var l=s.Rb(1).sub(e.mul(n).sum(a,!0));return t.computeWeightedLoss(l,o,u)},t.hingeLoss=function(e,n,a,o){void 0===o&&(o=r.SUM_BY_NONZERO_WEIGHTS),i.assertArgumentsAreTensors({labels:e,predictions:n},"hingeLoss"),null!=a&&i.assertArgumentsAreTensors({weights:a},"hingeLoss"),i.assertShapesMatch(e.shape,n.shape,"Error in hingeLoss: ");var u=s.Rb(1);e=s.Rb(2).mul(e).sub(u);var l=u.sub(e.mul(n)).relu();return t.computeWeightedLoss(l,a,o)},t.logLoss=function(e,n,a,o,u){void 0===o&&(o=1e-7),void 0===u&&(u=r.SUM_BY_NONZERO_WEIGHTS),i.assertArgumentsAreTensors({labels:e,predictions:n},"logLoss"),null!=a&&i.assertArgumentsAreTensors({weights:a},"logLoss"),i.assertShapesMatch(e.shape,n.shape,"Error in logLoss: ");var l=s.Rb(1),c=s.Rb(o),p=e.mul(n.add(c).log()).neg().sub(l.sub(e).mul(l.sub(n).add(c).log()));return t.computeWeightedLoss(p,a,u)},u([Object(a.a)({heading:"Training",subheading:"Losses",namespace:"losses"}),o.a],t,"computeWeightedLoss",null),u([Object(a.a)({heading:"Training",subheading:"Losses",namespace:"losses"}),o.a],t,"absoluteDifference",null),u([Object(a.a)({heading:"Training",subheading:"Losses",namespace:"losses"}),o.a],t,"meanSquaredError",null),u([Object(a.a)({heading:"Training",subheading:"Losses",namespace:"losses"}),o.a],t,"cosineDistance",null),u([Object(a.a)({heading:"Training",subheading:"Losses",namespace:"losses"}),o.a],t,"hingeLoss",null),u([Object(a.a)({heading:"Training",subheading:"Losses",namespace:"losses"}),o.a],t,"logLoss",null),t}()},function(t,e,n){"use strict";n.d(e,"b",function(){return r}),n.d(e,"a",function(){return a});var r=1.7580993408473768,a=1.0507009873554805},function(t,e,n){"use strict";n.d(e,"a",function(){return a}),n.d(e,"c",function(){return i}),n.d(e,"b",function(){return o});var r=n(1);function a(t,e,n){var a=t.length,i=e.length;r.assert(t.length===e.length,"Error in concat"+a+"D: rank of x1 ("+a+") and x2 ("+i+") must be the same."),r.assert(n>=0&&n<a,"Error in concat"+a+"D: axis must be between 0 and "+(a-1)+".");for(var o=0;o<a;o++)r.assert(o===n||t[o]===e[o],"Error in concat"+a+"D: Shape ("+t+") does not match ("+e+") along the non-concatenated axis "+o+".")}function i(t,e,n){r.assert(t.length===e.length,"x1 and x2 should have the same rank.");var a=t.slice();return a[n]+=e[n],a}function o(t,e){return{aBegin:[0,0],aSize:t,bBegin:[0,t[1]],bSize:e}}},function(t,e,n){"use strict";n.d(e,"a",function(){return c});var r=n(3),a=n(4),i=n(1),o=n(8),s=n(17),u=n(5),l=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},c=function(){function t(){}return t.concat1d=function(e){return t.concat(e,0)},t.concat2d=function(e,n){return t.concat(e,n)},t.concat3d=function(e,n){return t.concat(e,n)},t.concat4d=function(e,n){return t.concat(e,n)},t.concat=function(t,e){void 0===e&&(e=0),i.assert(t.length>=1,"Pass at least one tensor to concat"),i.assertArgumentsAreTensors({tensors:t},"concat");var n=t[0];if(1===t.length)return n;for(var r=Object(o.g)(e,n.shape),a=1;a<t.length;++a)n=p(n,t[a],r[0]);return n},l([Object(r.a)({heading:"Tensors",subheading:"Slicing and Joining"}),u.a],t,"concat",null),t}();function p(t,e,n){s.a(t.shape,e.shape,n);var r=s.c(t.shape,e.shape,n),o=t.as2D(-1,i.sizeFromShape(t.shape.slice(n))),u=e.as2D(-1,i.sizeFromShape(e.shape.slice(n))),l=s.b(o.shape,u.shape),c=l.aBegin,p=l.aSize,f=l.bBegin,h=l.bSize;return a.ENV.engine.runKernel(function(t){return t.concat(o,u)},{a:o,b:u},function(t){return{a:function(){return t.slice(c,p)},b:function(){return t.slice(f,h)}}}).reshape(r)}},function(t,e,n){"use strict";(function(t){var r=e;function a(t,e,n){for(var r=Object.keys(e),a=0;a<r.length;++a)void 0!==t[r[a]]&&n||(t[r[a]]=e[r[a]]);return t}function i(t){function e(t,n){if(!(this instanceof e))return new e(t,n);Object.defineProperty(this,"message",{get:function(){return t}}),Error.captureStackTrace?Error.captureStackTrace(this,e):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),n&&a(this,n)}return(e.prototype=Object.create(Error.prototype)).constructor=e,Object.defineProperty(e.prototype,"name",{get:function(){return t}}),e.prototype.toString=function(){return this.name+": "+this.message},e}r.asPromise=n(93),r.base64=n(92),r.EventEmitter=n(91),r.float=n(90),r.inquire=n(89),r.utf8=n(88),r.pool=n(87),r.LongBits=n(86),r.emptyArray=Object.freeze?Object.freeze([]):[],r.emptyObject=Object.freeze?Object.freeze({}):{},r.isNode=Boolean(t.process&&t.process.versions&&t.process.versions.node),r.isInteger=Number.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},r.isString=function(t){return"string"==typeof t||t instanceof String},r.isObject=function(t){return t&&"object"==typeof t},r.isset=r.isSet=function(t,e){var n=t[e];return!(null==n||!t.hasOwnProperty(e))&&("object"!=typeof n||(Array.isArray(n)?n.length:Object.keys(n).length)>0)},r.Buffer=function(){try{var t=r.inquire("buffer").Buffer;return t.prototype.utf8Write?t:null}catch(t){return null}}(),r._Buffer_from=null,r._Buffer_allocUnsafe=null,r.newBuffer=function(t){return"number"==typeof t?r.Buffer?r._Buffer_allocUnsafe(t):new r.Array(t):r.Buffer?r._Buffer_from(t):"undefined"==typeof Uint8Array?t:new Uint8Array(t)},r.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,r.Long=t.dcodeIO&&t.dcodeIO.Long||r.inquire("long"),r.key2Re=/^true|false|0|1$/,r.key32Re=/^-?(?:0|[1-9][0-9]*)$/,r.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,r.longToHash=function(t){return t?r.LongBits.from(t).toHash():r.LongBits.zeroHash},r.longFromHash=function(t,e){var n=r.LongBits.fromHash(t);return r.Long?r.Long.fromBits(n.lo,n.hi,e):n.toNumber(Boolean(e))},r.merge=a,r.lcFirst=function(t){return t.charAt(0).toLowerCase()+t.substring(1)},r.newError=i,r.ProtocolError=i("ProtocolError"),r.oneOfGetter=function(t){for(var e={},n=0;n<t.length;++n)e[t[n]]=1;return function(){for(var t=Object.keys(this),n=t.length-1;n>-1;--n)if(1===e[t[n]]&&void 0!==this[t[n]]&&null!==this[t[n]])return t[n]}},r.oneOfSetter=function(t){return function(e){for(var n=0;n<t.length;++n)t[n]!==e&&delete this[t[n]]}},r.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},r._configure=function(){var t=r.Buffer;t?(r._Buffer_from=t.from!==Uint8Array.from&&t.from||function(e,n){return new t(e,n)},r._Buffer_allocUnsafe=t.allocUnsafe||function(e){return new t(e)}):r._Buffer_from=r._Buffer_allocUnsafe=null}}).call(this,n(24))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(3),a=n(4),i=n(1),o=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},s=function(){function t(){}return t.tidy=function(t,e,n){void 0===n&&(n=!1);var r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}a.ENV.engine.startScope(r,n);var i=e();return i instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),a.ENV.engine.endScope(i,n),i},t.dispose=function(t){Object(i.extractTensorsFromAny)(t).forEach(function(t){return t.dispose()})},t.keep=function(t){return a.ENV.engine.keep(t)},t.time=function(t){return a.ENV.engine.time(t)},o([Object(r.a)({heading:"Performance",subheading:"Memory"})],t,"tidy",null),o([Object(r.a)({heading:"Performance",subheading:"Memory"})],t,"keep",null),o([Object(r.a)({heading:"Performance",subheading:"Timing"})],t,"time",null),t}()},function(t,e){(function(e){t.exports=e}).call(this,{})},function(t,e,n){"use strict";n.d(e,"a",function(){return a}),n.d(e,"b",function(){return i});var r=n(1);function a(t,e,n){r.assert(t.rank===e.length,"Error in slice"+t.rank+"D: Length of begin "+e+" must match the rank of the array ("+t.rank+")."),r.assert(t.rank===n.length,"Error in slice"+t.rank+"D: Length of size "+n+" must match the rank of the array ("+t.rank+").");for(var a=0;a<t.rank;++a)r.assert(e[a]+n[a]<=t.shape[a],"Error in slice"+t.rank+"D: begin["+a+"] + size["+a+"] ("+(e[a]+n[a])+") would overflow input.shape["+a+"] ("+t.shape[a]+")")}function i(t,e,n,r,a,i){void 0===a&&(a=0),void 0===i&&(i=0);for(var u=[],l=[],c=0;c<t.length;c++)u[c]=o(a,e,r,t,c),l[c]=s(i,n,r,t,c);var p=new Array(t.length).fill(0);return p=p.map(function(t,e){for(var n=0,a=u[e];!(r[e]>0?a>=l[e]:a<=l[e]);a+=r[e])n+=1;return n}),[u,p]}function o(t,e,n,a,i){var o=e[i];t&1<<i&&(o=n[i]>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=a[i];return o<0&&(o+=s),o=r.clamp(0,o,s-1)}function s(t,e,n,a,i){var o=e[i];t&1<<i&&(o=n[i]>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=a[i];return o<0&&(o+=s),o=n[i]>0?r.clamp(0,o,s):r.clamp(-1,o,s-1)}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(105),a=n(104),i=n(103),o=n(102),s=n(101),u=n(100),l=n(99);l.alea=r,l.xor128=a,l.xorwow=i,l.xorshift7=o,l.xor4096=s,l.tychei=u,t.exports=l},function(t,e,n){"use strict";n.d(e,"a",function(){return s});var r=n(1),a=20,i=3,o=7;function s(t,e){var n=t.dataSync(),r=function(t){var e=t.dataSync(),n=t.size,r=t.strides[t.strides.length-1],a=new Array(r).fill(0);if(t.rank>1)for(var i=0;i<n/r;i++)for(var o=i*r,s=0;s<r;s++)a[s]=Math.max(a[s],u(e[o+s],0).length);return a}(t),o=function t(e,n,r,o,s){void 0===s&&(s=!0);var l=n[0];var c=n.length;if(0===c)return[e[0].toString()];if(1===c){if(l>a){var p=Array.from(e.subarray(0,i)),f=Array.from(e.subarray(l-i,l));return["["+p.map(function(t,e){return u(t,o[e])}).join(", ")+", ..., "+f.map(function(t,e){return u(t,o[l-i+e])}).join(", ")+"]"]}return["["+Array.from(e).map(function(t,e){return u(t,o[e])}).join(", ")+"]"]}var h=n.slice(1);var d=r.slice(1);var m=r[0];var g=[];if(l>a){for(var y=0;y<i;y++){var v=y*m,b=v+m;g.push.apply(g,t(e.subarray(v,b),h,d,o,!1))}g.push("...");for(var y=l-i;y<l;y++){var v=y*m,b=v+m;g.push.apply(g,t(e.subarray(v,b),h,d,o,y===l-1))}}else for(var y=0;y<l;y++){var v=y*m,b=v+m;g.push.apply(g,t(e.subarray(v,b),h,d,o,y===l-1))}var w=2===c?",":"";g[0]="["+g[0]+w;for(var y=1;y<g.length-1;y++)g[y]=" "+g[y]+w;var x=",\n";for(var y=2;y<c;y++)x+="\n";g[g.length-1]=" "+g[g.length-1]+"]"+(s?"":x);return g}(n,t.shape,t.strides,r),s=["Tensor"];return e&&(s.push("  dtype: "+t.dtype),s.push("  rank: "+t.rank),s.push("  shape: ["+t.shape+"]"),s.push("  values:")),s.push(o.map(function(t){return"    "+t}).join("\n")),s.join("\n")}function u(t,e){return r.rightPad(parseFloat(t.toFixed(o)).toString(),e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.weightMap=t,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return t.prototype.newFrame=function(t,e){return{id:t,frameName:e,iterationId:0}},Object.defineProperty(t.prototype,"currentContext",{get:function(){return this.contexts},set:function(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentContextId",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentContextIds",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),t.prototype.generateCurrentContextIds=function(){for(var t=[],e=0;e<this.contexts.length-1;e++){var n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t},t.prototype.contextIdforContexts=function(t){return t?t.map(function(t){return 0===t.id&&0===t.iterationId?"":t.frameName+"-"+t.iterationId}).join("/"):""},t.prototype.enterFrame=function(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},t.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},t.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");this.contexts=this.contexts.slice(),this.lastId++;var t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},t.prototype.getWeight=function(t){return this.weightMap[t]},t}();e.ExecutionContext=r},function(t,e,n){"use strict";t.exports=u;var r,a=n(19),i=a.LongBits,o=a.utf8;function s(t,e){return RangeError("index out of range: "+t.pos+" + "+(e||1)+" > "+t.len)}function u(t){this.buf=t,this.pos=0,this.len=t.length}var l,c="undefined"!=typeof Uint8Array?function(t){if(t instanceof Uint8Array||Array.isArray(t))return new u(t);throw Error("illegal buffer")}:function(t){if(Array.isArray(t))return new u(t);throw Error("illegal buffer")};function p(){var t=new i(0,0),e=0;if(!(this.len-this.pos>4)){for(;e<3;++e){if(this.pos>=this.len)throw s(this);if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t}return t.lo=(t.lo|(127&this.buf[this.pos++])<<7*e)>>>0,t}for(;e<4;++e)if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t;if(t.lo=(t.lo|(127&this.buf[this.pos])<<28)>>>0,t.hi=(t.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return t;if(e=0,this.len-this.pos>4){for(;e<5;++e)if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}else for(;e<5;++e){if(this.pos>=this.len)throw s(this);if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}throw Error("invalid varint encoding")}function f(t,e){return(t[e-4]|t[e-3]<<8|t[e-2]<<16|t[e-1]<<24)>>>0}function h(){if(this.pos+8>this.len)throw s(this,8);return new i(f(this.buf,this.pos+=4),f(this.buf,this.pos+=4))}u.create=a.Buffer?function(t){return(u.create=function(t){return a.Buffer.isBuffer(t)?new r(t):c(t)})(t)}:c,u.prototype._slice=a.Array.prototype.subarray||a.Array.prototype.slice,u.prototype.uint32=(l=4294967295,function(){if(l=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return l;if((this.pos+=5)>this.len)throw this.pos=this.len,s(this,10);return l}),u.prototype.int32=function(){return 0|this.uint32()},u.prototype.sint32=function(){var t=this.uint32();return t>>>1^-(1&t)|0},u.prototype.bool=function(){return 0!==this.uint32()},u.prototype.fixed32=function(){if(this.pos+4>this.len)throw s(this,4);return f(this.buf,this.pos+=4)},u.prototype.sfixed32=function(){if(this.pos+4>this.len)throw s(this,4);return 0|f(this.buf,this.pos+=4)},u.prototype.float=function(){if(this.pos+4>this.len)throw s(this,4);var t=a.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t},u.prototype.double=function(){if(this.pos+8>this.len)throw s(this,4);var t=a.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t},u.prototype.bytes=function(){var t=this.uint32(),e=this.pos,n=this.pos+t;if(n>this.len)throw s(this,t);return this.pos+=t,Array.isArray(this.buf)?this.buf.slice(e,n):e===n?new this.buf.constructor(0):this._slice.call(this.buf,e,n)},u.prototype.string=function(){var t=this.bytes();return o.read(t,0,t.length)},u.prototype.skip=function(t){if("number"==typeof t){if(this.pos+t>this.len)throw s(this,t);this.pos+=t}else do{if(this.pos>=this.len)throw s(this)}while(128&this.buf[this.pos++]);return this},u.prototype.skipType=function(t){switch(t){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;;){if(4==(t=7&this.uint32()))break;this.skipType(t)}break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+t+" at offset "+this.pos)}return this},u._configure=function(t){r=t;var e=a.Long?"toLong":"toNumber";a.merge(u.prototype,{int64:function(){return p.call(this)[e](!1)},uint64:function(){return p.call(this)[e](!0)},sint64:function(){return p.call(this).zzDecode()[e](!1)},fixed64:function(){return h.call(this)[e](!0)},sfixed64:function(){return h.call(this)[e](!1)}})}},function(t,e,n){"use strict";t.exports=c;var r,a=n(19),i=a.LongBits,o=a.base64,s=a.utf8;function u(t,e,n){this.fn=t,this.len=e,this.next=void 0,this.val=n}function l(){}function c(){this.len=0,this.head=new u(l,0,0),this.tail=this.head,this.states=null}function p(t,e,n){e[n]=255&t}function f(t,e){this.len=t,this.next=void 0,this.val=e}function h(t,e,n){for(;t.hi;)e[n++]=127&t.lo|128,t.lo=(t.lo>>>7|t.hi<<25)>>>0,t.hi>>>=7;for(;t.lo>127;)e[n++]=127&t.lo|128,t.lo=t.lo>>>7;e[n++]=t.lo}function d(t,e,n){e[n]=255&t,e[n+1]=t>>>8&255,e[n+2]=t>>>16&255,e[n+3]=t>>>24}c.create=a.Buffer?function(){return(c.create=function(){return new r})()}:function(){return new c},c.alloc=function(t){return new a.Array(t)},a.Array!==Array&&(c.alloc=a.pool(c.alloc,a.Array.prototype.subarray)),c.prototype._push=function(t,e,n){return this.tail=this.tail.next=new u(t,e,n),this.len+=e,this},f.prototype=Object.create(u.prototype),f.prototype.fn=function(t,e,n){for(;t>127;)e[n++]=127&t|128,t>>>=7;e[n]=t},c.prototype.uint32=function(t){return this.len+=(this.tail=this.tail.next=new f((t>>>=0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this},c.prototype.int32=function(t){return t<0?this._push(h,10,i.fromNumber(t)):this.uint32(t)},c.prototype.sint32=function(t){return this.uint32((t<<1^t>>31)>>>0)},c.prototype.uint64=function(t){var e=i.from(t);return this._push(h,e.length(),e)},c.prototype.int64=c.prototype.uint64,c.prototype.sint64=function(t){var e=i.from(t).zzEncode();return this._push(h,e.length(),e)},c.prototype.bool=function(t){return this._push(p,1,t?1:0)},c.prototype.fixed32=function(t){return this._push(d,4,t>>>0)},c.prototype.sfixed32=c.prototype.fixed32,c.prototype.fixed64=function(t){var e=i.from(t);return this._push(d,4,e.lo)._push(d,4,e.hi)},c.prototype.sfixed64=c.prototype.fixed64,c.prototype.float=function(t){return this._push(a.float.writeFloatLE,4,t)},c.prototype.double=function(t){return this._push(a.float.writeDoubleLE,8,t)};var m=a.Array.prototype.set?function(t,e,n){e.set(t,n)}:function(t,e,n){for(var r=0;r<t.length;++r)e[n+r]=t[r]};c.prototype.bytes=function(t){var e=t.length>>>0;if(!e)return this._push(p,1,0);if(a.isString(t)){var n=c.alloc(e=o.length(t));o.decode(t,n,0),t=n}return this.uint32(e)._push(m,e,t)},c.prototype.string=function(t){var e=s.length(t);return e?this.uint32(e)._push(s.write,e,t):this._push(p,1,0)},c.prototype.fork=function(){return this.states=new function(t){this.head=t.head,this.tail=t.tail,this.len=t.len,this.next=t.states}(this),this.head=this.tail=new u(l,0,0),this.len=0,this},c.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new u(l,0,0),this.len=0),this},c.prototype.ldelim=function(){var t=this.head,e=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=t.next,this.tail=e,this.len+=n),this},c.prototype.finish=function(){for(var t=this.head.next,e=this.constructor.alloc(this.len),n=0;t;)t.fn(t.val,e,n),n+=t.len,t=t.next;return e},c._configure=function(t){r=t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(96))},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(97)),r(n(67))},function(t,e,n){"use strict";var r=this&&this.__assign||Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t},a=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},o=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},s=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(o(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0});var u=n(0),l=n(12),c=n(31),p=n(27),f=function(){function t(t){this.graph=t,this.compiledOrder=[],this._weightMap={},this.placeholders=t.placeholders.map(function(t){return t.name}),this.outputs=t.outputs.map(function(t){return t.name}),this.compile()}return Object.defineProperty(t.prototype,"weightMap",{get:function(){return this._weightMap},set:function(t){var e=Object.keys(t).map(function(e){return t[e].map(function(t){return t.id})});this.weightIds=[].concat.apply([],e),this._weightMap=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputNodes",{get:function(){return this.placeholders},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputNodes",{get:function(){return this.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isControlFlowModel",{get:function(){return this.graph.withControlFlow},enumerable:!0,configurable:!0}),t.prototype.compile=function(){if(!this.graph.withControlFlow)for(var t=s(this.graph.inputs),e={};t.length>0;){var n=t.pop();e[n.name]=!0,this.compiledOrder.push(n),n.children.forEach(function(n){!e[n.name]&&n.inputNames.every(function(t){var n=o(l.getNodeNameAndIndex(t),1)[0];return e[n]})&&t.push(n)})}},t.prototype.execute=function(t,e){var n=this;return this.checkInput(t),u.tidy(function(){var a=new p.ExecutionContext(n._weightMap),i=n.compiledOrder.reduce(function(t,e){return t[e.name]=c.executeOp(e,t,a),t},r({},n.weightMap,t));return n.findOutputs(i,a,e)})},t.prototype.executeAsync=function(t,e){return a(this,void 0,void 0,function(){var n,r,a,o,s,u,l=this;return i(this,function(i){switch(i.label){case 0:return n=new p.ExecutionContext(this._weightMap),[4,this.executeWithControlFlow(t,n)];case 1:return r=i.sent(),a=this.findOutputs(r,n,e),o=Object.keys(a).map(function(t){return a[t].id}),s=Object.keys(t).map(function(e){return t[e].map(function(t){return t.id})}),u=[].concat.apply([],s),Object.keys(r).forEach(function(t){r[t].forEach(function(t){t&&-1===o.indexOf(t.id)&&-1===u.indexOf(t.id)&&-1===l.weightIds.indexOf(t.id)&&t.dispose()})}),[2,a]}})})},t.prototype.executeWithControlFlow=function(t,e){return a(this,void 0,void 0,function(){var n,a,s,u,p,f,h,d,m;return i(this,function(i){switch(i.label){case 0:n=this.graph.inputs.map(function(t){return{node:t,contexts:e.currentContext}}),a=r({},this.weightMap,t),s={},i.label=1;case 1:return n.length>0?(u=n.pop(),e.currentContext=u.contexts,p=c.executeOp(u.node,a,e),f=o(l.getNodeNameAndIndex(u.node.name,e),1),h=f[0],d=a,m=h,[4,p]):[3,3];case 2:return d[m]=i.sent(),u.node.children.forEach(function(t){var r=o(l.getNodeNameAndIndex(t.name,e),1)[0];s[r]||("merge"===t.op?t.inputNames.some(function(t){return!!l.getTensor(t,a,e)})&&(s[r]=!0,n.push({contexts:e.currentContext,node:t})):t.inputNames.every(function(t){return!!l.getTensor(t,a,e)})&&(s[r]=!0,n.push({contexts:e.currentContext,node:t})))}),[3,1];case 3:return[2,a]}})})},t.prototype.findOutputs=function(t,e,n){return!n||n instanceof Array||(n=[n]),(n||this.graph.outputs.map(function(t){return t.name})).reduce(function(n,r){return n[r]=l.getTensor(r,t,e),n},{})},t.prototype.dispose=function(){var t=this;Object.keys(this.weightMap).forEach(function(e){return t.weightMap[e].forEach(function(t){return t.dispose()})})},t.prototype.checkInput=function(t){var e=this,n=Object.keys(t),r=[],a=[];if(this.placeholders.forEach(function(t){-1===n.indexOf(t)&&r.push(t)}),n.forEach(function(t){-1===e.placeholders.indexOf(t)&&a.push(t)}),r.length>0)throw new Error("Missing input placeholders: "+r);if(a.length>0)throw new Error("Extra input tensors: "+a)},t}();e.GraphExecutor=f},function(t,e,n){"use strict";var r=n(4),a=n(7),i=n(2),o=n(1),s=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new u)}return t.prototype.profileKernel=function(t,e){var n,r=this,a=this.backendTimer.time(function(){n=e()}),i=n.dataSync();return o.checkForNaN(i,n.dtype,t),a.then(function(e){r.logger.logKernelProfile(t,n,i,e.kernelMs)}),n},t}(),u=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r){var a=o.rightPad(r+"ms",9),i=o.rightPad(t,25),s=e.rank,u=e.size,l=o.rightPad(e.shape.toString(),14);console.log("%c"+i+"\t%c"+a+"\t%c"+s+"D "+l+"\t%c"+u,"font-weight:bold","color:red","color:blue","color: orange")},t}();var l=n(6);n.d(e,"a",function(){return f});var c=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},p=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},f=function(){function t(t,e){this.backend=t,this.safeMode=e,this.registeredVariables={},this.refCounter=new WeakMap,this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numDataBuffers=0,this.gradientScopeCount=0,this.customGradientDepth=0,this.activeScope={keep:[],track:[]},this.scopeStack=[this.activeScope],this.profiler=new s(t)}return t.prototype.runKernel=function(t,e,n){var a,i=this,o=[],s=function(t){return o.push(t),t},u=this.activeScope.name;if(this.customGradientDepth++,a=r.ENV.get("DEBUG")?this.profiler.profileKernel(u,function(){return t(i.backend,s)}):t(this.backend,s),this.customGradientDepth--,this.shouldRecord()){var l={id:this.nextTapeNodeId++,name:u,inputs:e,output:a};null!=n&&(l.gradient=function(t){return n(t,o)}),this.activeTape.push(l)}return a},t.prototype.registerTensor=function(t){var e=this.refCounter.has(t.dataId)?this.refCounter.get(t.dataId):0;this.numTensors++,0===e&&(this.numDataBuffers++,this.numBytes+=o.sizeFromShape(t.shape)*o.bytesPerElement(t.dtype),this.backend.register(t.dataId,t.shape,t.dtype)),this.refCounter.set(t.dataId,e+1),t instanceof l.c||this.track(t)},t.prototype.registerVariable=function(t){if(null!=this.registeredVariables[t.name])throw new Error("Variable with name "+t.name+" was already registered");this.registeredVariables[t.name]=t},t.prototype.disposeTensor=function(t){if(this.refCounter.has(t.dataId)){this.numTensors--;var e=this.refCounter.get(t.dataId);e<=1?(this.refCounter.delete(t.dataId),this.backend.disposeData(t.dataId),this.numDataBuffers--,this.numBytes-=o.sizeFromShape(t.shape)*o.bytesPerElement(t.dtype)):this.refCounter.set(t.dataId,e-1)}},t.prototype.disposeVariables=function(){for(var t in this.registeredVariables){var e=this.registeredVariables[t];this.disposeTensor(e),delete this.registeredVariables[t]}},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.numTensors,t.numDataBuffers=this.numDataBuffers,t.numBytes=this.numBytes,t},t.prototype.shouldRecord=function(){return null!=this.activeTape&&0===this.customGradientDepth},t.prototype.addTapeNode=function(t,e,n){var r={};t.forEach(function(t,e){r[e]=t});var a={id:this.nextTapeNodeId++,name:this.activeScope.name,inputs:r,output:e,gradient:function(t){var e={};return n(t).forEach(function(t,n){e[n]=function(){return t}}),e}};this.activeTape.push(a)},t.prototype.keep=function(t){if(1===this.scopeStack.length&&r.ENV.engine.safeMode)throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {...}) to avoid memory leaks.");return this.activeScope.keep.push(t),t},t.prototype.startScope=function(t,e){void 0===e&&(e=!1),e&&0===this.gradientScopeCount&&(this.activeTape=[]),e&&this.gradientScopeCount++;var n={keep:[],track:[]};t&&(n.name=t),this.scopeStack.push(n),this.activeScope=n},t.prototype.endScope=function(t,e){var n=this;void 0===e&&(e=!1),e&&(this.gradientScopeCount--,0===this.gradientScopeCount&&(this.activeTape=null));var r=this.activeScope.keep,a=o.extractTensorsFromContainer(t);r=r.concat(a);for(var i=0;i<this.activeScope.track.length;i++){var s=this.activeScope.track[i];o.isTensorInList(s,r)||(null!=this.activeTape?a.push(s):s.dispose())}this.scopeStack.pop(),this.activeScope=0===this.scopeStack.length?{keep:[],track:[]}:this.scopeStack[this.scopeStack.length-1],a.forEach(function(t){o.isTensorInList(t,n.activeScope.keep)||n.track(t)})},t.prototype.dispose=function(){},t.prototype.gradients=function(t,e,n,r){var s=this;return void 0===r&&(r=!1),o.assert(e.length>0,"gradients() received an empty list of xs."),Object(a.f)("gradients",function(){var a=t();o.assert(a instanceof l.a,"The result y returned by f() must be a tensor.");var u=function(t,e,n){for(var r={},a={},i=0;i<e.length;i++)r[e[i].id]=!0;for(i=0;i<t.length;i++){var o=(m=t[i]).inputs;for(var s in o){for(var u=o[s],l=!1,c=0;c<e.length;c++)if(r[u.id]){r[m.output.id]=!0,l=!0,a[m.id]=!0;break}if(l)break}}var p={};p[n.id]=!0;var f={};for(i=t.length-1;i>=0;i--){o=(m=t[i]).inputs;var h=[];for(h.push(m.output),c=0;c<h.length;c++)if(p[h[c].id]){for(var s in o)p[o[s].id]=!0,f[m.id]=!0;break}}var d=[];for(i=0;i<t.length;i++){var m;if(a[(m=t[i]).id]&&f[m.id]){var g={};for(var s in m.inputs){var y=m.inputs[s];r[y.id]&&(g[s]=y)}var v=Object.assign({},m);v.inputs=g,v.output=m.output,d.push(v)}}return d}(s.activeTape,e,a);if(!r&&0===u.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");var c={};return c[a.id]=null==n?i.qb(a.shape):n,function(t,e){for(var n=e.length-1;n>=0;n--){var r=e[n],a=t[r.output.id];if(null==r.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+r.name+".");var i=r.gradient(a);for(var s in r.inputs){if(!(s in i))throw new Error("Cannot backprop through input "+s+". Available gradients found: "+Object.keys(i)+".");var u=i[s](),l=r.inputs[s];if(!o.arraysEqual(u.shape,l.shape))throw new Error("Error in gradient for op "+r.name+". The gradient of input '"+s+"' has shape '"+u.shape+"', which does not match the shape of the input '"+l.shape+"'");if(null==t[l.id])t[l.id]=u;else{var c=t[l.id];t[l.id]=c.add(u),c.dispose()}}}}(c,u),{value:a,grads:e.map(function(t){return c[t.id]})}},!0)},t.prototype.customGrad=function(t){var e=this;return o.assert(o.isFunction(t),"The f passed in customGrad(f) must be a function."),function(){for(var n,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];o.assert(r.every(function(t){return t instanceof l.a}),"The args passed in customGrad(f)(x1, x2,...) must all be tensors"),e.customGradientDepth++;var s=Object(a.f)(t.name,function(){var e=t.apply(void 0,r),a=e.value,i=e.gradFunc;return o.assert(a instanceof l.a,"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),o.assert(o.isFunction(i),"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n=i,a},!0);if(e.customGradientDepth--,e.shouldRecord()){e.addTapeNode(r,s,function(t){var e=n(t),a=Array.isArray(e)?e:[e];return o.assert(a.length===r.length,"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),o.assert(a.every(function(t){return t instanceof l.a}),"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."),a})}return s}},t.prototype.write=function(t,e){this.backend.write(t,e)},t.prototype.readSync=function(t){return this.backend.readSync(t)},t.prototype.read=function(t){return this.backend.read(t)},t.prototype.fromPixels=function(t,e){return this.backend.fromPixels(t,e)},t.prototype.time=function(t){return c(this,void 0,void 0,function(){var e,n;return p(this,function(r){switch(r.label){case 0:return e=performance.now(),[4,this.backend.time(t)];case 1:return(n=r.sent()).wallMs=performance.now()-e,[2,n]}})})},t.prototype.track=function(t){if(1===this.scopeStack.length&&this.safeMode)throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {op();...}); to avoid memory leaks.");return this.activeScope.track.push(t),t},t}()},function(t,e,n){"use strict";function r(){var t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";n.r(e);var r,a=n(0),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return i(e,t),e}(Error),s=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return i(e,t),e}(Error),u=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return i(e,t),e}(Error),l=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return i(e,t),e}(Error),c=function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}return i(e,t),e}(Error),p=(function(t){function e(n){var r=t.call(this,n)||this;return Object.setPrototypeOf(r,e.prototype),r}i(e,t)}(Error),Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t});function f(t,e){if(Array.isArray(t)){for(var n=[],r=0;r<e;r++)n=n.concat(t);return n}return(n=new Array(e)).fill(t),n}function h(t,e){if(!t)throw new c(e)}function d(t,e){for(var n=0,r=0,a=t;r<a.length;r++){a[r]===e&&n++}return n}function m(t){return 1===t.length?t[0]:t}function g(t){return Array.isArray(t)?t:[t]}function y(t){return Array.isArray(t)&&Array.isArray(t[0])}function v(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function b(t){var e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function w(t){return t.length<=1?t:-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,function(t,e){return e.toUpperCase()})}var x={};function O(t){return null===t||void 0===t?null:{className:t.getClassName(),config:t.getConfig()}}function N(t,e,n,r){if(void 0===e&&(e={}),void 0===n&&(n={}),void 0===r&&(r="object"),"string"==typeof t){var a=t,i=void 0;if(a in n)i=n[a];else if(a in x)i=x[a];else if(null==(i=e[a]))throw new u("Unknown "+r+": "+t);return i}var o=t;if(null==o.className||null==o.config)throw new u(r+": Improper config format: "+JSON.stringify(o)+".\n'className' and 'config' must set.");var s=o.className,l=void 0,c=void 0;if(s in n?(l=(E=n.get(s))[0],c=E[1]):s in x?(l=(A=x.className)[0],c=A[1]):s in e&&(l=(I=e[s])[0],c=I[1]),null==l)throw new u("Unknown "+r+": "+s);if(null!=c){for(var f={},h=0,d=Object.keys(x);h<d.length;h++){f[w=d[h]]=x[w]}for(var m=0,g=Object.keys(n);m<g.length;m++){f[w=g[m]]=n[w]}o.config.customObjects=f;for(var y=p({},x),v=0,b=Object.keys(n);v<b.length;v++){var w=b[v];x[w]=n[w]}var O=c(l,o.config);return x=p({},y),O}y=p({},x);for(var N=0,S=Object.keys(n);N<S.length;N++){w=S[N];x[w]=n[w]}var E,A,I;O=new l(o.config);return x=p({},y),O}function S(t){var e;if(Array.isArray(t)){if(1!==t.length)throw new u("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function E(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new u("Expected exactly 1 Shape; got "+t.length)}return t}function A(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function I(t){if(null==t)return t;for(var e=[],n=0,r=t;n<r.length;n++){var a=r[n];-1===e.indexOf(a)&&e.push(a)}return e}function T(t){if(null==t)throw new u("Invalid value in obj: "+JSON.stringify(t));for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function k(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new u(n+" is not a valid "+e+".  Valid values are "+t+" or null/undefined.")}var P=new Map,R=["channelsFirst","channelsLast"];function C(t){k(R,"DataFormat",t)}var D=["valid","same","causal"];function _(t){k(D,"PaddingMode",t)}var M=["max","avg"];var z=[],j="/";function L(t){if(!B(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===z.length?"":z.join(j)+j)+t}function F(t){if(!B(t))throw new Error("Not a valid tensor name: '"+t+"'");P.has(t)||P.set(t,0);var e=P.get(t);if(P.set(t,P.get(t)+1),e>0){var n=t+"_"+e;return P.set(n,1),n}return t}var V=new RegExp(/^[A-Za-z][A-Za-z0-9\._\/]*$/);function B(t){return!!t.match(V)}function U(t,e,n){null==e&&(e=0),null==n&&(n=t.length);for(var r=1,a=e;a<n;++a)r*=t[a];return r}function W(t){return t=Array.isArray(t)?new Float32Array(t):t,Object(a.tensor1d)(t)}function q(t){return a.min(W(t)).dataSync()[0]}function G(t){return a.max(W(t)).dataSync()[0]}function H(t,e){if(e<t)throw new u("end ("+e+") < begin ("+t+") is forbidden.");for(var n=[],r=t;r<e;++r)n.push(r);return n}var K=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},X=0;function Y(){return X++}var J=function(){function t(t,e,n,r,a,i,o){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=a,this.outputTensorIndex=o,this.id=Y(),null!=i&&(this.originalName=L(i),this.name=F(this.originalName))}return t=K([Object(a.doc)({heading:"Models",subheading:"Classes"})],t)}(),Q="Variable",Z=function(){function t(t,e,n,r,i){void 0===e&&(e="float32"),void 0===n&&(n=Q),void 0===r&&(r=!0),void 0===i&&(i=null),this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Y(),n=null==n?Q:n,this.originalName=L(n),this.name=F(this.originalName),this.trainable=r,this.constraint=i,this.val=a.variable(t,this.trainable,this.name,this.dtype)}return t.prototype.read=function(){return this.val},t.prototype.write=function(t){return function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val)),this},t}();function $(t){return t.map(function(t){return t.read()})}function tt(t){t.map(function(t){t[0].write(t[1])})}var et=1e-7;var nt="float32";var rt={float32:{},int32:{}};function at(t,e){return void 0===e&&(e=nt),null==rt[e][t]&&(rt[e][t]=Object(a.scalar)(t,e),a.keep(rt[e][t])),rt[e][t]}var it=function(){return et};function ot(t){return t.shape}function st(t){return t.shape}function ut(t){return t.shape.length}function lt(t){return t instanceof a.Tensor?nt:t.dtype}function ct(t,e){return t.asType(e)}function pt(t,e){void 0===e&&(e=-1);var n=ot(t).slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function ft(t,e,n){return Object(a.tidy)(function(){switch(t.rank){case 1:return a.slice1d(t,e,n);case 2:return a.slice2d(t,[e,0],[n,t.shape[1]]);case 3:return a.slice3d(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return a.slice4d(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);default:throw new u("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function ht(t,e,n){return Object(a.tidy)(function(){switch(t.rank){case 1:return a.slice1d(t,e,n);case 2:return a.slice2d(t,[0,e],[t.shape[0],n]);case 3:return a.slice3d(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return a.slice4d(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new u("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function dt(t,e,n,r){return Object(a.tidy)(function(){switch(t.rank){case 1:return a.slice1d(t,e,n);case 2:switch(r){case 1:return ft(t,e,n);case 2:return ht(t,e,n);default:throw new u("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return ft(t,e,n);case 2:return a.slice3d(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return ht(t,e,n);default:throw new u("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return ft(t,e,n);case 2:return a.slice4d(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return a.slice4d(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return ht(t,e,n);default:throw new u("The axis is not within the rank of the tensor "+r)}default:throw new u("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function mt(t,e,n,r,i){return void 0===i&&(i=.001),a.util.arraysEqual(r.slice().sort(),H(0,ut(t)-1))?function(t,e,n,r,i){return void 0===i&&(i=.001),Object(a.tidy)(function(){var o=a.moments(t,r),s=o.mean,u=o.variance;return[At(t,s,u,n,e,i),s,u]})}(t,e,n,r,i):function(t,e,n,r,i){return void 0===i&&(i=.001),Object(a.tidy)(function(){for(var o=a.moments(t,r),s=o.mean,u=o.variance,l=[],c=0,p=H(0,ut(t));c<p.length;c++){var f=p[c];-1!==r.indexOf(f)?l.push(1):l.push(t.shape[f])}var h=s.reshape(l),d=u.reshape(l),m=null==e?null:e.reshape(l),g=null==n?null:n.reshape(l);return[At(t,h,d,g,m,i),s,u]})}(t,e,n,r,i)}function gt(t,e){var n;return void 0===e&&(e=-1),e<0&&(e=0!==(n=ut(t[0]))?n:0),e===ut(t[0])&&(e=-1),a.concat(t,e)}function yt(t,e){switch(t.rank){case 1:return a.concat1d([t,e]);case 2:return a.concat2d([t,e],0);case 3:return a.concat3d([t,e],0);case 4:return a.concat4d([t,e],0);default:throw new u("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function vt(t,e){if(Array.isArray(e)||(e=[e]),ut(t)!==e.length)throw new u("The length of input n ("+e.length+") does not match the number of dimensions in input x ("+ut(t)+")");return a.tile(t,e)}function bt(t){return t.clone()}function wt(t,e){return a.mul(t,e)}function xt(t,e){return a.add(t,e)}function Ot(t,e,n,r,i){return void 0===e&&(e=0),void 0===n&&(n=1),a.randomNormal(t,e,n,r,i)}function Nt(t,e){if(2!==ut(e))throw new l("dot support for y other than rank 2 is not yet implemented: y shape = "+ot);if(2===ut(t))return a.matMul(t,e);if(3===ut(t)){var n=t.shape[0],r=t.shape[1],i=t.shape[2];return t=t.reshape([n*r,i]),a.matMul(t,e).reshape([n,r,e.shape[1]])}throw new l("dot support for x of rank "+ut(t)+" is not yet implemented: x shape = "+ot)}function St(t,e,n){return Object(a.tidy)(function(){return e=Array.isArray(e)?Object(a.tensor1d)(e,"int32"):e.toInt(),a.gather(t,e,n)})}function Et(t){return a.mulStrict(t,t)}function At(t,e,n,r,i,o){var s;if(void 0===o&&(o=.001),2===ut(t))s=a.batchNormalization2d(t,e,n,o,i,r);else if(3===ut(t))s=a.batchNormalization3d(t,e,n,o,i,r);else{if(4!==ut(t))throw new l("batchNormalization is not implememnted for array of rank "+ut(t)+" yet");s=a.batchNormalization4d(t,e,n,o,i,r)}return s}function It(t,e,n){return Object(a.tidy)(function(){if(null==n&&(n="channelsLast"),C(n),1!==ut(e)&&ut(e)!==ut(t))throw new u("Unexpected bias dimensions: "+ut(e)+"; expected it to be 1 or "+ut(t));var r,a=e.shape;if(5===ut(t))"channelsFirst"===n?r=1===a.length?t.add(e.reshape([1,a[0],1,1,1])):t.add(e.reshape([1,a[3],a[0],a[1],a[2]])):"channelsLast"===n&&(r=1===a.length?t.add(e.reshape([1,1,1,1,a[0]])):t.add(e.reshape([1].concat(a))));else if(4===ut(t))"channelsFirst"===n?r=1===a.length?t.add(e.reshape([1,a[0],1,1])):t.add(e.reshape([1,a[2],a[0],a[1]])):"channelsLast"===n&&(r=1===a.length?t.add(e.reshape([1,1,1,a[0]])):t.add(e.reshape([1].concat(a))));else if(3===ut(t))"channelsFirst"===n?r=1===a.length?t.add(e.reshape([1,a[0],1])):t.add(e.reshape([1,a[1],a[0]])):"channelsLast"===n&&(r=1===a.length?t.add(e.reshape([1,1,a[0]])):t.add(e.reshape([1].concat(a))));else{if(!(ut(t)<3))throw new u("Unsupported input rank by biasAdd: "+ut(t));r=t.add(e)}return r})}function Tt(t,e){return Object(a.tidy)(function(){var n=a.sum(Et(t),e,!0),r=wt(Object(a.scalar)(it()),a.onesLike(t)),i=a.sqrt(a.maximum(n,r));return a.div(t,i)})}function kt(t,e){return function(t,e){z.push(t);try{var n=e();return z.pop(),n}catch(t){throw z.pop(),t}}(t,e)}var Pt={};function Rt(t){return void 0===t&&(t=""),t in Pt||(Pt[t]=0),Pt[t]+=1,t+Pt[t].toString()}function Ct(t,e,n){return void 0===n&&(n=!1),Object(a.tidy)(function(){if(n)e=a.softmax(e);else{var r=a.sum(e,ot(e).length-1,!0);e=a.div(e,r)}return e=a.clipByValue(e,it(),1-it()),a.neg(a.sum(a.mul(t.toFloat(),a.log(e)),ot(e).length-1))})}function Dt(t,e,n){return void 0===n&&(n=!1),Object(a.tidy)(function(){var r,i,o=a.floor((r=t,i=[U(r.shape)],r.reshape(i))).toInt(),s=ot(e);return Ct(a.oneHot(o,s[s.length-1]).reshape(s),e,n)})}function _t(t,e,n){return void 0===n&&(n=!1),Object(a.tidy)(function(){var r;return n?r=e:(r=a.clipByValue(e,it(),1-it()),r=a.log(a.div(r,a.sub(a.onesLike(r),r)))),function(t,e){return Object(a.tidy)(function(){var n=a.maximum(e,a.zerosLike(e)),r=a.mul(e,t),i=a.log(a.add(at(1),a.exp(a.neg(a.abs(e))))),o=a.add(a.sub(n,r),i);return o})}(t,r)})}var Mt=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),zt=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o};function jt(t,e){return Object(a.tidy)(function(){return a.sqrt(a.sum(Et(t),e,!0))})}var Lt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Mt(e,t),e.prototype.getConfig=function(){return{}},e=zt([Object(a.doc)({heading:"Constraints",subheading:"Classes",namespace:"constraints"})],e)}(a.serialization.Serializable),Ft=function(t){function e(e){var n=t.call(this)||this;return n.defaultMaxValue=2,n.defaultAxis=0,n.maxValue=null!=e.maxValue?e.maxValue:n.defaultMaxValue,n.axis=null!=e.axis?e.axis:n.defaultAxis,n}return Mt(e,t),e.prototype.apply=function(t){var e=this;return Object(a.tidy)(function(){var n=jt(t,e.axis),r=a.clipByValue(n,0,e.maxValue);return a.mul(t,a.div(r,xt(at(it()),n)))})},e.prototype.getConfig=function(){return{maxValue:this.maxValue,axis:this.axis}},e.className="MaxNorm",e}(Lt);a.serialization.SerializationMap.register(Ft);var Vt=function(t){function e(e){var n=t.call(this)||this;return n.defaultAxis=0,n.axis=null!=e.axis?e.axis:n.defaultAxis,n}return Mt(e,t),e.prototype.apply=function(t){var e=this;return Object(a.tidy)(function(){return a.div(t,xt(at(it()),jt(t,e.axis)))})},e.prototype.getConfig=function(){return{axis:this.axis}},e.className="UnitNorm",e}(Lt);a.serialization.SerializationMap.register(Vt);var Bt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Mt(e,t),e.prototype.apply=function(t){return a.relu(t)},e.className="NonNeg",e}(Lt);a.serialization.SerializationMap.register(Bt);var Ut=function(t){function e(e){var n=t.call(this)||this;return n.defaultMinValue=0,n.defaultMaxValue=1,n.defaultRate=1,n.defaultAxis=0,n.minValue=null!=e.minValue?e.minValue:n.defaultMinValue,n.maxValue=null!=e.maxValue?e.maxValue:n.defaultMaxValue,n.rate=null!=e.rate?e.rate:n.defaultRate,n.axis=null!=e.axis?e.axis:n.defaultAxis,n}return Mt(e,t),e.prototype.apply=function(t){var e=this;return Object(a.tidy)(function(){var n=jt(t,e.axis),r=a.add(wt(at(e.rate),a.clipByValue(n,e.minValue,e.maxValue)),wt(at(1-e.rate),n));return a.mul(t,a.div(r,xt(at(it()),n)))})},e.prototype.getConfig=function(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}},e.className="MinMaxNorm",e}(Lt);a.serialization.SerializationMap.register(Ut);var Wt={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function qt(t){return O(t)}function Gt(t,e){return void 0===e&&(e={}),N(t,a.serialization.SerializationMap.getMap().classNameMap,e,"constraint")}function Ht(t){return null==t?null:"string"==typeof t?Gt({className:t in Wt?Wt[t]:t,config:{}}):t instanceof Lt?t:Gt(t)}function Kt(t,e){return void 0===e&&(e={}),N(t,a.serialization.SerializationMap.getMap().classNameMap,e,"layer")}function Xt(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function Yt(t,e){if(null===t)return null;if("string"==typeof t)return w(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){for(var n=[],r=t.length,a=0;a<r;++a){var i=t[a];Xt(e,a,i)?n.push(i):n.push(Yt(i,e))}return n}for(var o={},s=0,u=Object.keys(t);s<u.length;s++){var l=u[s],c=t[l];if("name"===l&&"string"==typeof c)o[l]=c;else{var p=w(l);o[p]=Yt(c,p)}}return o}var Jt=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Qt=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},Zt=function(){return function(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}(),$t=0,te=function(){function t(t,e){this.callArgs=e,this.id=$t++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(var n=0,r=t.inboundLayers;n<r.length;n++){var a=r[n];null!=a&&a.outboundNodes.push(this)}t.outboundLayer.inboundNodes.push(this)}return t.prototype.getConfig=function(){for(var t=[],e=0,n=this.inboundLayers;e<n.length;e++){var r=n[e];null!=r?t.push(r.name):t.push(null)}return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}},t}(),ee=0,ne=function(t){function e(e){var n=t.call(this)||this;n._callHook=null,n._addedWeightNames=[],n._stateful=!1,n.id=ee++,n.activityRegularizer=null,n.inputSpec=null,n.supportsMasking=!1,n._trainableWeights=[],n._nonTrainableWeights=[],n._losses=[],n._updates=[],n._built=!1,n.inboundNodes=[],n.outboundNodes=[];var r=e.name;if(!r){var a=n.getClassName();r=b(a)+"_"+Rt(a)}if(n.name=r,n.trainable=null==e.trainable||e.trainable,n.updatable=null==e.updatable||e.updatable,null!=e.inputShape||null!=e.batchInputShape){var i=void 0;if(null!=e.batchInputShape)i=e.batchInputShape;else if(null!=e.inputShape){var o=null;null!=e.batchSize&&(o=e.batchSize),i=[o].concat(e.inputShape)}n.batchInputShape=i;var s=e.dtype;null==s&&(s=e.inputDType),null==s&&(s="float32"),n.dtype=s}return null!=e.weights?n.initialWeights=e.weights:n.initialWeights=null,n}return Jt(e,t),e.nodeKey=function(t,e){return t.name+"_ib-"+e.toString()},e.prototype.getNodeAtIndex=function(t,e){if(0===this.inboundNodes.length)throw new s("The layer has never been called and thus has no defined "+e+".");if(this.inboundNodes.length<=t)throw new u("Asked to get "+e+" at node "+t+", but the layer has only "+this.inboundNodes.length+" inbound nodes.");return this.inboundNodes[t]},e.prototype.getInputAt=function(t){return m(this.getNodeAtIndex(t,"input").inputTensors)},e.prototype.getOutputAt=function(t){return m(this.getNodeAtIndex(t,"output").outputTensors)},Object.defineProperty(e.prototype,"input",{get:function(){if(this.inboundNodes.length>1)throw new o("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new o("Layer "+this.name+" is not connected, no input to return.");return m(this.getNodeAtIndex(0,"input").inputTensors)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"output",{get:function(){if(0===this.inboundNodes.length)throw new o("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new o("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return m(this.getNodeAtIndex(0,"output").outputTensors)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"losses",{get:function(){return this._losses},enumerable:!0,configurable:!0}),e.prototype.calculateLosses=function(){return this.losses.map(function(t){return t()})},Object.defineProperty(e.prototype,"updates",{get:function(){return this._updates},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"built",{get:function(){return this._built},set:function(t){this._built=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.trainable?this._trainableWeights:[]},set:function(t){this._trainableWeights=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.trainable?this._nonTrainableWeights:this._trainableWeights.concat(this._nonTrainableWeights)},set:function(t){this._nonTrainableWeights=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"weights",{get:function(){return this.trainableWeights.concat(this.nonTrainableWeights)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"stateful",{get:function(){return this._stateful},enumerable:!0,configurable:!0}),e.prototype.assertInputCompatibility=function(t){if(t=g(t),null!=this.inputSpec&&0!==this.inputSpec.length){var e=g(this.inputSpec);if(t.length!==e.length)throw new u("Layer "+this.name+" expects "+e.length+" inputs, but it received "+t.length+" input tensors. Input received: "+t);for(var n=0;n<t.length;n++){var r=t[n],a=e[n];if(null!=a){var i=ut(r);if(null!=a.ndim&&i!==a.ndim)throw new u("Input "+n+" is incompatible with layer "+this.name+": expected ndim="+a.ndim+", found ndim="+i);if(null!=a.maxNDim&&i>a.maxNDim)throw new u("Input "+n+" is incompatible with layer "+this.name+": expected max_ndim="+a.maxNDim+", found ndim="+i);if(null!=a.minNDim&&i<a.minNDim)throw new u("Input "+n+" is incompatible with layer "+this.name+": expected min_ndim="+a.minNDim+", found ndim="+i+".");if(null!=a.dtype&&lt(r)!==a.dtype){var o=lt(r);throw new u("Input "+n+" is incompatible with layer "+this.name+" : expected dtype="+a.dtype+", found dtype="+o+".")}if(a.axes){var s=st(r);for(var l in a.axes){var c=Number(l),p=a.axes[l],f=c>=0?s[c]:s[s.length+c];if(null!=p&&-1===[p,null].indexOf(f))throw new u("Input "+n+" is incompatible with layer "+this.name+": expected axis "+c+" of input shape to have value "+p+" but got shape "+s+".")}}if(null!=a.shape){s=st(r);for(var h=0;h<a.shape.length;++h){var d=a.shape[h],m=s[h];if(null!=d&&null!=m&&d!==m)throw new u("Input "+n+" is incompatible with layer "+this.name+": expected shape="+a.shape+", found shape=${xShape}.")}}}}}},e.prototype.call=function(t,e){return t},e.prototype.invokeCallHook=function(t,e){null!=this._callHook&&this._callHook(t,e)},e.prototype.setCallHook=function(t){this._callHook=t},e.prototype.clearCallHook=function(){this._callHook=null},e.prototype.apply=function(t,e){var n=this;e=e||{};for(var r=g(t),a=!0,i=0,o=r;i<o.length;i++){if(!(o[i]instanceof J)){a=!1;break}}for(var s=!0,c=0,p=r;c<p.length;c++){if(p[c]instanceof J){s=!1;break}}if(a===s)throw new u("Arguments to apply() must be all SymbolicTensors or all Tensors");return kt(this.name,function(){if(!n.built){n.assertInputCompatibility(t);for(var a=[],i=0,o=g(t);i<o.length;i++){var u=o[i];a.push(st(u))}n.build(m(a)),n.built=!0,n.initialWeights&&n.setWeights(n.initialWeights)}if(n.assertInputCompatibility(t),s){for(var c=[],p=0,f=g(v=n.call(t,e));p<f.length;p++){var h=f[p];-1!==r.indexOf(h)&&(h=bt(h)),c.push(h)}if(v=m(c),null!=n.activityRegularizer)throw new l("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return v}var d=function(t){for(var e=[],n=0,r=t=g(t);n<r.length;n++){var a=r[n];e.push(st(a))}return m(e)}(t),y=n.computeOutputShape(d),v=void 0;if(v=null!=y&&y.length>0&&Array.isArray(y[0])?y.map(function(r,a){return new J("float32",r,n,g(t),e,n.name,a)}):new J("float32",y,n,g(t),e,n.name),n.addInboundNode(t,v,null,null,d,y,e),null!=n.activityRegularizer)throw new l("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return v})},e.prototype.build=function(t){this.built=!0},e.prototype.getWeights=function(t){return void 0===t&&(t=!1),$(t?this.trainableWeights:this.weights)},e.prototype.setWeights=function(t){var e=this;Object(a.tidy)(function(){var n=e.weights;if(n.length!==t.length)throw new u('You called setWeights(weights) on layer "'+e.name+'" with a weight list of length '+t.length+", but the layer was expecting "+n.length+" weights. Provided weights: "+t+"...");if(0!==n.length){for(var r=[],i=$(n),o=0;o<i.length;++o){var s=i[o],l=n[o],c=t[o];if(!a.util.arraysEqual(s.shape,c.shape))throw new u("Layer weight shape "+s.shape+" not compatible with provided weight shape "+c.shape);r.push([l,c])}tt(r)}})},e.prototype.addWeight=function(t,e,n,r,a,i,o){if(-1!==this._addedWeightNames.indexOf(t))throw new u("Duplicate weight name "+t+" for layer "+this.name);this._addedWeightNames.push(t),null==n&&(n="float32");var s=new Z(r.apply(e,n),n,t,i,o);return null!=a&&this.addLoss(function(){return a.apply(s.read())}),null==i&&(i=!0),i?this._trainableWeights.push(s):this._nonTrainableWeights.push(s),s},e.prototype.addLoss=function(t){var e;null==t||Array.isArray(t)&&0===t.length||(t=g(t),void 0!==this._losses&&null!==this._losses&&(e=this.losses).push.apply(e,t))},e.prototype.computeOutputShape=function(t){return t},e.prototype.computeMask=function(t,e){var n=this;if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError("Layer "+this.name+" does not support masking,but was passed an inputMask.");e.forEach(function(t){if(null!=t)throw new TypeError("Layer "+n.name+" does not support masking,but was passed an inputMask.")})}return null}return e},e.prototype.addInboundNode=function(t,e,n,r,a,i,o){void 0===o&&(o=null);var s=g(t);e=g(e),n=g(n),r=g(r),a=v(a),i=v(i);for(var u=[],l=[],c=[],p=0,f=s;p<f.length;p++){var h=f[p];u.push(h.sourceLayer),l.push(h.nodeIndex),c.push(h.tensorIndex)}new te({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:s,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:a,outputShapes:i},o);for(var d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d},e.prototype.getConfig=function(){var t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t},Qt([Object(a.doc)({heading:"Models",subheading:"Classes"})],e.prototype,"apply",null),e=Qt([Object(a.doc)({heading:"Layers",subheading:"Classes",namespace:"layers"})],e)}(a.serialization.Serializable);var re=function(t){function e(e){var n=t.call(this,{dtype:e.dtype,name:null!=e.name?e.name:Rt("input").toString()})||this;if(null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),n.trainable=!1,n.built=!0,n.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new u("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");var r=e.batchInputShape;if(null==r){if(null==e.inputShape)throw new u("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");r=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new u("Cannot specify batchSize if batchInputShape isspecified when creating an InputLayer.");var a=e.dtype||"float32";n.batchInputShape=r,n.dtype=a,n.inputSpec=[{shape:r}];var i=new J(n.dtype,n.batchInputShape,n,[],{},n.name);return i.nodeIndex=0,i.tensorIndex=0,new te({outboundLayer:n,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[i],outputTensors:[i],inputMasks:[null],outputMasks:[null],inputShapes:[r],outputShapes:[r]}),n}return Jt(e,t),e.prototype.apply=function(t,e){throw new u("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)},e.prototype.getConfig=function(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}},e.className="InputLayer",e}(ne);function ae(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new u("Please provide either a `shape` or `batchShape` argument to Input, but not both.");var e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));var n=t.dtype;return null==n&&(n="float32"),new re({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}a.serialization.SerializationMap.register(re);var ie=function(t){function e(n){var r=t.call(this,{})||this;if(r.containerNodes=new Set,r.name=n.name,null==r.name){var a=r.getClassName().toLowerCase();r.name=Rt(a)}if(r.supportsMasking=!1,r.trainable=!0,r.updatable=!0,Array.isArray(n.inputs)?r.inputs=n.inputs.slice():r.inputs=[n.inputs],Array.isArray(n.outputs)?r.outputs=n.outputs.slice():r.outputs=[n.outputs],I(r.inputs).length!==r.inputs.length)throw new u("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+r.inputs.map(function(t){return t.name}));I(r.outputs).length!==r.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+r.outputs.map(function(t){return t.name})),r.inputLayers=[],r.inputLayersNodeIndices=[],r.inputLayersTensorIndices=[],r.outputLayers=[],r.outputLayersNodeIndices=[],r.outputLayersTensorIndices=[],r.layers=[];for(var i=0,o=r.outputs;i<o.length;i++){var l=(R=o[i]).sourceLayer,c=R.nodeIndex,p=R.tensorIndex;r.outputLayers.push(l),r.outputLayersNodeIndices.push(c),r.outputLayersTensorIndices.push(p)}for(var f=0,d=r.inputs;f<d.length;f++){l=(R=d[f]).sourceLayer,c=R.nodeIndex,p=R.tensorIndex;h(0===c,"input layer has >1 nodes"),h(0===p,"input layer has >1 tensors"),r.inputLayers.push(l),r.inputLayersNodeIndices.push(c),r.inputLayersTensorIndices.push(p)}r.inputNames=[],r.outputNames=[],r.feedInputShapes=[],r.feedInputNames=[],r.feedOutputNames=[];for(var m=0;m<r.inputLayers.length;m++){if(!((l=r.inputLayers[m])instanceof re))throw new TypeError("Input layers to a Model must be InputLayer objects. Received inputs: "+n.inputs+". Input "+m+" (0-based) originates from layer type "+l.getClassName()+".");r.inputNames.push(l.name),r.feedInputShapes.push(l.batchInputShape),r.feedInputNames.push(l.name)}for(var g=0,y=r.outputLayers;g<y.length;g++){l=y[g];r.outputNames.push(l.name)}r.internalInputShapes=r.inputs.map(function(t){return t.shape}),r.internalOutputShapes=r.outputs.map(function(t){return t.shape});for(var v={},b={},w={},x={},O={},N=[],S=function(t,n,a,i,o,u){null!=i&&null!=o&&null!=u||(i=t.sourceLayer,o=t.nodeIndex,u=t.tensorIndex);var l=i.inboundNodes[o];if(-1!==a.indexOf(l))throw new s("The tensor "+t.name+' at layer "'+i.name+'" is part of a cycle.');if(-1===n.indexOf(l)){r.containerNodes.add(e.nodeKey(i,o)),i.id in O||(O[i.id]=Object.keys(O).length),-1===a.indexOf(l)&&a.push(l);for(var c=l.inboundLayers.length,p=0;p<c;p++){var f=l.inputTensors[p],h=l.inboundLayers[p],d=l.nodeIndices[p],m=l.tensorIndices[p];S(f,n,a,h,d,m)}for(n.push(l);a.indexOf(l)>=0;)a.splice(a.indexOf(l),1);N.push(l)}},E=[],T=[],k=0,P=r.outputs;k<P.length;k++){var R=P[k];S(R,E,T)}for(var C=0,D=N.slice().reverse();C<D.length;C++){b[(et=D[C]).id]=et,et.id in v||(v[et.id]=0);var _=v[et.id],M=null==w[et.outboundLayer.id]?0:w[et.outboundLayer.id];_=Math.max(_,M),w[et.outboundLayer.id]=_,x[et.outboundLayer.id]=et.outboundLayer,v[et.id]=_;for(m=0;m<et.inboundLayers.length;m++){var z=et.inboundLayers[m],j=(c=et.nodeIndices[m],z.inboundNodes[c]),L=null==v[j.id]?0:v[j.id];v[j.id]=Math.max(_+1,L),b[j.id]=j}}var F={};for(var V in v){(_=v[V])in F||(F[_]=[]),F[_].push(b[V])}var B={};for(var U in w){(_=w[U])in B||(B[_]=[]),B[_].push(x[U])}var W=Object.keys(B).map(function(t){return parseInt(t,10)}).sort(A);r.layers=[];for(var q=0,G=W;q<G.length;q++){var H=B[_=G[q]];H.sort(function(t,e){var n=O[t.id],r=O[e.id];return n<r?-1:n>r?1:0});for(var K=0,X=H;K<X.length;K++){l=X[K];r.layers.push(l)}}r.layersByDepth=B,W=Object.keys(F).map(function(t){return parseInt(t,10)}).sort(A);for(var Y=r.inputs.slice(),J=[],Q=0,Z=W;Q<Z.length;Q++)for(var $=0,tt=F[_=Z[Q]];$<tt.length;$++){var et;if(null!=(l=(et=tt[$]).outboundLayer)){for(var nt=0,rt=et.inputTensors;nt<rt.length;nt++){R=rt[nt];if(-1===Y.indexOf(R))throw new s("Graph disconnected: cannot obtain value for tensor "+R+' at layer "'+l.name+'". The following previous layers were accessed without issue: '+J)}for(var at=0,it=et.outputTensors;at<it.length;at++){R=it[at];Y.push(R)}J.push(l.name)}}r.nodesByDepth=F;for(var ot=r.layers.map(function(t){return t.name}),st=function(t){var e=ot.filter(function(e){return e===t}).length;if(1!==e)throw new s('The name "'+t+'" is used '+e+" times in the model. All layer names should be unique. Layer names: "+JSON.stringify(ot))},ut=0,lt=ot;ut<lt.length;ut++){st(lt[ut])}return r.outboundNodes=[],r.inboundNodes=[],new te({outboundLayer:r,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:r.inputs,outputTensors:r.outputs,inputMasks:r.inputs.map(function(t){return null}),outputMasks:r.outputs.map(function(t){return null}),inputShapes:r.inputs.map(function(t){return t.shape}),outputShapes:r.outputs.map(function(t){return t.shape})}),r.built=!0,r}return Jt(e,t),Object.defineProperty(e.prototype,"trainableWeights",{get:function(){if(this._trainableWeights.length>0)throw new u("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];for(var t=[],e=0,n=this.layers;e<n.length;e++){var r=n[e];t=t.concat(r.trainableWeights)}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){for(var t=[],e=0,n=this.layers;e<n.length;e++){var r=n[e];t.push.apply(t,r.nonTrainableWeights)}if(!this.trainable){for(var a=[],i=0,o=this.layers;i<o.length;i++){r=o[i];a.push.apply(a,r.trainableWeights)}return a.concat(t)}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"weights",{get:function(){return this.trainableWeights.concat(this.nonTrainableWeights)},enumerable:!0,configurable:!0}),e.prototype.loadWeights=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!1),n?function(t,e){for(var n={},r=0,a=0,i=e;a<i.length;a++)for(var o=i[a],s=0,l=o.weights;s<l.length;s++){var c=l[s];if(null!=n[c.originalName])throw new u("Duplicate weight name: "+c.originalName);n[c.originalName]=c,r++}var p=[];for(var f in t)p.push([n[f],t[f]]),delete n[f];var h=[];for(var d in n)h.push(d);if(h.length>0)throw new u(h.length+" of "+r+" weights are not set: "+h);tt(p)}(t,this.layers):function(t,e,n){void 0===n&&(n=!1);for(var r=t.keras_version,i=t.backend,o=e.map(function(t){return t.name}),s={},l=0,c=e;l<c.length;l++){var p=c[l];null!=p.name&&(null==s[p.name]&&(s[p.name]=[]),s[p.name].push(p))}for(var f=t.weights,h=[],d=0;d<o.length;++d){var m=o[d],g=f[m];null==g&&(g=[]);for(var y=[],v=0;v<g.length;++v){var b=g[v];y.push(new Z((S=b.dtype,E=b.shape,A=b.value,void 0,I=function(t){switch(t){case"float32":return"float32";default:throw new u("Invalid dtype: "+t)}}(S),a.Tensor.make(E,{values:0===E.length?A:a.util.flatten(A)},I))))}for(var w=0,x=s[m];w<x.length;w++){var p=x[w],O=p.weights;if((y=oe(p,y,r,i)).length!==O.length){if(!n)throw new u("Layer #"+d+' (named "'+p.name+'") expects '+O.length+" weight(s), but the saved weights have "+y.length+" element(s).");console.warn("Skipping loading of weights of layer "+p.name+" due to mismatch in number of weights: ("+y.length+" vs "+O.length+").")}for(var N=0;N<y.length;++N)!n||a.util.arraysEqual(O[N].shape,y[N].shape)?h.push([O[N],y[N].read()]):console.warn("Skipping loading of weights for layer "+p.name+" due to mismatch in shape ("+O[N].shape+" vs "+y[N].shape+")")}}var S,E,A,I;tt(h)}(t,this.layers,e)},e.prototype.updatedConfig=function(){var t=this.getConfig();return{className:this.getClassName(),config:t,kerasVersion:"tfjs-layers 0.6.1",backend:"TensorFlow.js"}},e.prototype.toJSON=function(t,e){void 0===e&&(e=!0);var n=function t(e,n){if(null===e||void 0===e)return null;if("string"==typeof e)return b(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){for(var r=[],a=e.length,i=0;i<a;++i){var o=e[i];Xt(n,i,o)?r.push(o):r.push(t(o,n))}return r}for(var s={},u=0,l=Object.keys(e);u<l.length;u++){var c=l[u],p=e[c],f=b(c);s[f]="name"!==c&&"className"!==c||"string"!=typeof p?t(p,c):p}return s}(this.updatedConfig());return e?JSON.stringify(n):n},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){var r;return t=g(t),r="mask"in e?g(e.mask):f(null,t.length),n.runInternalGraph(t,r)[0]})},e.prototype.computeMask=function(t,e){var n=this;return Object(a.tidy)(function(){var r;return t=g(t),r=null==e?f(null,t.length):g(e),n.runInternalGraph(t,r)[1]})},e.prototype.computeOutputShape=function(t){var e=v(t);if(e.length!==this.inputLayers.length)throw new u("Invalid inputShape argument "+t+": model has "+this.inputLayers.length+" tensor inputs.");for(var n={},r=0;r<e.length;r++){var a=this.inputLayers[r],i=e[r];n[T=a.name+"_0_0"]=i}var o=Object.keys(this.nodesByDepth).map(function(t){return parseInt(t,10)}).sort(A);if(o.length>1)for(var s=0,l=o;s<l.length;s++)for(var c=l[s],p=0,f=this.nodesByDepth[c];p<f.length;p++){var d=f[p];a=d.outboundLayer;if(-1===this.inputLayers.map(function(t){return t.id}).indexOf(a.id)){for(var g=[],y=0;y<d.inboundLayers.length;y++){var b=d.inboundLayers[y],w=d.nodeIndices[y],x=d.tensorIndices[y],O=n[T=b.name+"_"+w+"_"+x];g.push(O)}var N=v(a.computeOutputShape(m(g))),S=a.inboundNodes.indexOf(d);for(y=0;y<N.length;y++){n[T=a.name+"_"+S+"_"+y]=N[y]}}}var E=[],I=[];for(r=0;r<this.outputLayers.length;r++){a=this.outputLayers[r],S=this.outputLayersNodeIndices[r],x=this.outputLayersTensorIndices[r];var T=a.name+"_"+S+"_"+x;I.push(T)}for(r=0;r<I.length;r++){var k=I[r];h(k in n),E.push(n[k])}return m(E)},e.prototype.runInternalGraph=function(t,e){null==e&&(e=f(null,t.length));for(var n={},r=0;r<this.inputs.length;++r){var a=this.inputs[r],i=t[r],o=e[r];n[a.id]=[i,o]}for(var s=0,u=Object.keys(this.nodesByDepth).map(function(t){return parseInt(t,10)}).sort(A);s<u.length;s++)for(var c=u[s],p=0,d=this.nodesByDepth[c];p<d.length;p++){for(var m=d[p],y=m.outboundLayer,v=m.inputTensors,b=m.outputTensors,w=new Array,x=0,O=v;x<O.length;x++){(a=O[x]).id in n&&w.push(n[a.id])}if(w.length===v.length){var N={},S=void 0,E=void 0,I=void 0,T=void 0;if(null!=m.callArgs&&(N=m.callArgs),1===w.length){var k=w[0],P=k[0],R=k[1];null==N.mask&&(N.mask=R),I=g(y.call(P,N)),T=g(y.computeMask(P,R)),S=[P],E=[R]}else S=w.map(function(t){return t[0]}),E=w.map(function(t){return t[1]}),null==N.mask&&(N.mask=E),I=g(y.call(S,N)),T=g(y.computeMask(S,E));if(y.activityRegularizer)throw new l("Model invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(r=0;r<b.length;++r){a=b[r],i=I[r],o=T[r];n[a.id]=[i,o]}}}for(var C=[],D=[],_=[],M=0,z=this.outputs;M<z.length;M++){h((a=z[M]).id in n,"Could not compute output "+a.name+" : "+a.id);var j=n[a.id],L=j[0];o=j[1];_.push(L.shape),C.push(L),D.push(o)}return[C,D,_]},e.prototype.buildNodeConversionMap=function(t){for(var n,r={},a=0,i=this.layers;a<i.length;a++){var o=i[a];n=o instanceof e?1:0;for(var s=0;s<o.inboundNodes.length;s++){var u=e.nodeKey(o,s);u in this.containerNodes&&(r[u]=n,n+=1)}}return r},e.prototype.getLayer=function(t,e){if(null!=e){if(this.layers.length<=e)throw new u("Was asked to retrieve layer at index "+e+", but model only has "+this.layers.length+" layer(s).");return this.layers[e]}if(null==t)throw new u("Provide either a layer name or layer index");for(var n=0,r=this.layers;n<r.length;n++){var a=r[n];if(a.name===t)return a}throw new u("No such layer: "+t)},e.prototype.calculateLosses=function(){var t=this;return Object(a.tidy)(function(){for(var n=[],r=0,a=t.layers;r<a.length;r++)for(var i=a[r],o=0;o<i.inboundNodes.length;++o){var s=e.nodeKey(i,o);t.containerNodes.has(s)&&n.push.apply(n,i.calculateLosses())}return n})},e.prototype.getConfig=function(){for(var t={name:this.name},n=this.buildNodeConversionMap(this.layers),r=[],a=0,i=this.layers;a<i.length;a++){for(var o=(b=i[a]).getClassName(),s=b.getConfig(),u=[],l=0;l<b.inboundNodes.length;l++){var c=b.inboundNodes[l],p=e.nodeKey(b,l),f={};if(this.containerNodes.has(p)){if(c.callArgs)-1===JSON.stringify(c.callArgs).indexOf("undefined")?f=c.callArgs:(console.warn("Layer "+b.name+" was passed non-serializable keyword arguments: "+c.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),f={});if(c.inboundLayers.length>0){for(var h=[],d=0;d<c.inboundLayers.length;d++){var m=c.inboundLayers[d],g=c.nodeIndices[d],y=c.tensorIndices[d];null!==(x=n[e.nodeKey(m,g)])&&void 0!==x||(x=0),h.push([m.name,x,y,f])}u.push(h)}}}r.push({name:b.name,className:o,config:s,inboundNodes:u})}t.layers=r;var v=[];for(d=0;d<this.inputLayers.length;d++){var b=this.inputLayers[d];g=this.inputLayersNodeIndices[d],p=e.nodeKey(b,g);if(this.containerNodes.has(p)){null!==(x=n[p])&&void 0!==x||(x=0);y=this.inputLayersTensorIndices[d];v.push([b.name,x,y])}}t.inputLayers=v;var w=[];for(d=0;d<this.outputLayers.length;d++){b=this.outputLayers[d],g=this.outputLayersNodeIndices[d],p=e.nodeKey(b,g);if(this.containerNodes.has(p)){var x;null!==(x=n[p])&&void 0!==x||(x=0);y=this.outputLayersTensorIndices[d];w.push([b.name,x,y])}}return t.outputLayers=w,t},e.fromConfig=function(t,e){var n={},r={};function a(t,e){t.name in r?r[t.name].push(e):r[t.name]=[e]}function i(t,e){for(var r,i=[],o=0,s=e;o<s.length;o++){var l=s[o],c=l[0],p=l[1],f=l[2];if(3===l.length)r={};else{if(4!==l.length)throw new u("Improperly formatted model config for layer "+JSON.stringify(t)+": "+JSON.stringify(l));r=l[3]}if(!(c in n))return void a(t,e);var h=n[c];if(h.inboundNodes.length<=p)return void a(t,e);var d=h.inboundNodes[p];i.push(d.outputTensors[f])}i.length>0&&t.apply(m(i),r)}function o(t){var r=t.name,i=Kt(t,null!=e.customObjects?e.customObjects:{});n[r]=i;for(var o=0,s=t.inboundNodes;o<s.length;o++){var l=s[o];if(!(l instanceof Array))throw new u("Corrupted configuration, expected array for nodeData: "+l);a(i,l)}}for(var s=e.name,l=e.layers,c=0,p=l;c<p.length;c++){o(g=p[c])}for(;!T(r);)for(var f=0,d=l;f<d.length;f++){var g=d[f];if((P=n[g.name]).name in r){for(var y=0,v=r[P.name];y<v.length;y++){i(P,v[y])}delete r[P.name]}}for(var b=[],w=[],x=0,O=e.inputLayers;x<O.length;x++){var N=(g=O[x])[0],S=g[1],E=g[2];h(N in n);var A=(P=n[N]).inboundNodes[S].outputTensors;b.push(A[E])}for(var I=0,k=e.outputLayers;I<k.length;I++){N=(g=k[I])[0],S=g[1],E=g[2];h(N in n);var P;A=(P=n[N]).inboundNodes[S].outputTensors;w.push(A[E])}return new t({inputs:b,outputs:w,name:s})},Object.defineProperty(e.prototype,"stateful",{get:function(){if(this._stateful)throw new u("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(var t=0,e=this.layers;t<e.length;t++){if(e[t].stateful)return!0}return!1},enumerable:!0,configurable:!0}),Qt([Object(a.doc)({heading:"Layers",subheading:"Classes",namespace:"layers",subclasses:["Model"]})],e.prototype,"getLayer",null),e}(ne);function oe(t,e,n,r){if(!n.startsWith("2."))throw new u("Unsupported Keras version in weights being loaded: "+n);return e}var se=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ue=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},le=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},ce=function(){function t(){this.validationData=null,this.model=null}return t.prototype.setParams=function(t){this.params=t},t.prototype.setModel=function(t){this.model=t},t.prototype.onEpochBegin=function(t,e){return ue(this,void 0,void 0,function(){return le(this,function(t){return[2]})})},t.prototype.onEpochEnd=function(t,e){return ue(this,void 0,void 0,function(){return le(this,function(t){return[2]})})},t.prototype.onBatchBegin=function(t,e){return ue(this,void 0,void 0,function(){return le(this,function(t){return[2]})})},t.prototype.onBatchEnd=function(t,e){return ue(this,void 0,void 0,function(){return le(this,function(t){return[2]})})},t.prototype.onTrainBegin=function(t){return ue(this,void 0,void 0,function(){return le(this,function(t){return[2]})})},t.prototype.onTrainEnd=function(t){return ue(this,void 0,void 0,function(){return le(this,function(t){return[2]})})},t}(),pe=function(){function t(t,e){void 0===e&&(e=10),null==t&&(t=[]),this.callbacks=t,this.queueLength=e}return t.prototype.append=function(t){this.callbacks.push(t)},t.prototype.setParams=function(t){for(var e=0,n=this.callbacks;e<n.length;e++){n[e].setParams(t)}},t.prototype.setModel=function(t){for(var e=0,n=this.callbacks;e<n.length;e++){n[e].setModel(t)}},t.prototype.onEpochBegin=function(t,e){return ue(this,void 0,void 0,function(){var n,r;return le(this,function(a){switch(a.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,a.label=1;case 1:return n<r.length?[4,r[n].onEpochBegin(t,e)]:[3,4];case 2:a.sent(),a.label=3;case 3:return n++,[3,1];case 4:return[2]}})})},t.prototype.onEpochEnd=function(t,e){return ue(this,void 0,void 0,function(){var n,r;return le(this,function(a){switch(a.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,a.label=1;case 1:return n<r.length?[4,r[n].onEpochEnd(t,e)]:[3,4];case 2:a.sent(),a.label=3;case 3:return n++,[3,1];case 4:return[2]}})})},t.prototype.onBatchBegin=function(t,e){return ue(this,void 0,void 0,function(){var n,r;return le(this,function(a){switch(a.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,a.label=1;case 1:return n<r.length?[4,r[n].onBatchBegin(t,e)]:[3,4];case 2:a.sent(),a.label=3;case 3:return n++,[3,1];case 4:return[2]}})})},t.prototype.onBatchEnd=function(t,e){return ue(this,void 0,void 0,function(){var n,r;return le(this,function(a){switch(a.label){case 0:null==e&&(e={}),n=0,r=this.callbacks,a.label=1;case 1:return n<r.length?[4,r[n].onBatchEnd(t,e)]:[3,4];case 2:a.sent(),a.label=3;case 3:return n++,[3,1];case 4:return[2]}})})},t.prototype.onTrainBegin=function(t){return ue(this,void 0,void 0,function(){var e,n;return le(this,function(r){switch(r.label){case 0:null==t&&(t={}),e=0,n=this.callbacks,r.label=1;case 1:return e<n.length?[4,n[e].onTrainBegin(t)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}})})},t.prototype.onTrainEnd=function(t){return ue(this,void 0,void 0,function(){var e,n;return le(this,function(r){switch(r.label){case 0:null==t&&(t={}),e=0,n=this.callbacks,r.label=1;case 1:return e<n.length?[4,n[e].onTrainEnd(t)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}})})},t}(),fe=function(t){function e(){return t.call(this)||this}return se(e,t),e.prototype.onEpochBegin=function(t,e){return ue(this,void 0,void 0,function(){return le(this,function(t){return this.seen=0,this.totals={},[2]})})},e.prototype.onBatchEnd=function(t,e){return ue(this,void 0,void 0,function(){var t,n,r,i,o=this;return le(this,function(s){for(i in null==e&&(e={}),t=null==e.size?0:e.size,this.seen+=t,n=function(n){var i=e[n];"number"==typeof i?(r.totals.hasOwnProperty(n)||(r.totals[n]=0),r.totals[n]=r.totals[n]+i*t):(r.totals.hasOwnProperty(n)||(r.totals[n]=at(0)),Object(a.tidy)(function(){o.totals[n]=xt(o.totals[n],Object(a.mul)(i,at(t))),Object(a.keep)(o.totals[n])}))},r=this,e)n(i);return[2]})})},e.prototype.onEpochEnd=function(t,e){return ue(this,void 0,void 0,function(){var t,n,r,i,o,s=this;return le(this,function(u){if(null!=e)for(t=function(t){if(null==n.totals[t])return"continue";"number"==typeof n.totals[t]?e[t]=n.totals[t]/n.seen:Object(a.tidy)(function(){e[t]=wt(Object(a.div)(at(1),at(s.seen)),s.totals[t]),Object(a.keep)(e[t])})},n=this,r=0,i=this.params.metrics;r<i.length;r++)o=i[r],t(o);return[2]})})},e}(ce);function he(t){return ue(this,void 0,void 0,function(){var e,n,r,a,i,o,s;return le(this,function(u){switch(u.label){case 0:if(null==t)return[2];for(r in e=[],n=[],t)"number"!=typeof(a=t[r])&&(i=a,e.push(i.data()),n.push(r));return[4,Promise.all(e)];case 1:for(o=u.sent(),s=0;s<o.length;++s)t[n[s]]=o[s][0];return[2]}})})}var de=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return se(e,t),e.prototype.onTrainBegin=function(t){return ue(this,void 0,void 0,function(){return le(this,function(t){return this.epoch=[],this.history={},[2]})})},e.prototype.onEpochEnd=function(t,e){return ue(this,void 0,void 0,function(){var n;return le(this,function(r){for(n in null==e&&(e={}),this.epoch.push(t),e)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(e[n]);return[2]})})},e.prototype.syncData=function(){return ue(this,void 0,void 0,function(){var t,e,n,r,a,i,o,s,u;return le(this,function(l){switch(l.label){case 0:for(r in t=[],e=[],n=[],this.history)for(a=this.history[r],i=0;i<a.length;++i)"number"!=typeof a[i]&&(o=a[i],t.push(o.data()),e.push(r),n.push(i));return[4,Promise.all(t)];case 1:for(s=l.sent(),u=0;u<s.length;++u)this.history[e[u]][n[u]].dispose(),this.history[e[u]][n[u]]=s[u][0];return[2]}})})},e}(ce),me=function(t){function e(e){var n=t.call(this)||this;return n.trainBegin=e.onTrainBegin,n.trainEnd=e.onTrainEnd,n.epochBegin=e.onEpochBegin,n.epochEnd=e.onEpochEnd,n.batchBegin=e.onBatchBegin,n.batchEnd=e.onBatchEnd,n}return se(e,t),e.prototype.onEpochBegin=function(t,e){return ue(this,void 0,void 0,function(){return le(this,function(n){switch(n.label){case 0:return null==this.epochBegin?[3,3]:[4,he(e)];case 1:return n.sent(),[4,this.epochBegin(t,e)];case 2:n.sent(),n.label=3;case 3:return[2]}})})},e.prototype.onEpochEnd=function(t,e){return ue(this,void 0,void 0,function(){return le(this,function(n){switch(n.label){case 0:return null==this.epochEnd?[3,3]:[4,he(e)];case 1:return n.sent(),[4,this.epochEnd(t,e)];case 2:n.sent(),n.label=3;case 3:return[2]}})})},e.prototype.onBatchBegin=function(t,e){return ue(this,void 0,void 0,function(){return le(this,function(n){switch(n.label){case 0:return null==this.batchBegin?[3,3]:[4,he(e)];case 1:return n.sent(),[4,this.batchBegin(t,e)];case 2:n.sent(),n.label=3;case 3:return[2]}})})},e.prototype.onBatchEnd=function(t,e){return ue(this,void 0,void 0,function(){return le(this,function(n){switch(n.label){case 0:return null==this.batchEnd?[3,3]:[4,he(e)];case 1:return n.sent(),[4,this.batchEnd(t,e)];case 2:n.sent(),n.label=3;case 3:return[2]}})})},e.prototype.onTrainBegin=function(t){return ue(this,void 0,void 0,function(){return le(this,function(e){switch(e.label){case 0:return null==this.trainBegin?[3,3]:[4,he(t)];case 1:return e.sent(),[4,this.trainBegin(t)];case 2:e.sent(),e.label=3;case 3:return[2]}})})},e.prototype.onTrainEnd=function(t){return ue(this,void 0,void 0,function(){return le(this,function(e){switch(e.label){case 0:return null==this.trainEnd?[3,3]:[4,he(t)];case 1:return e.sent(),[4,this.trainEnd(t)];case 2:e.sent(),e.label=3;case 3:return[2]}})})},e}(ce);function ge(t,e){return Object(a.tidy)(function(){return a.mean(Et(a.sub(e,t)),-1)})}function ye(t,e){return Object(a.tidy)(function(){return a.mean(a.abs(a.sub(e,t)),-1)})}function ve(t,e){return Object(a.tidy)(function(){var n=a.sub(t,e),r=a.clipByValue(a.abs(t),it(),Number.MAX_VALUE),i=a.abs(a.div(n,r));return wt(at(100),a.mean(i,-1))})}function be(t,e){return Object(a.tidy)(function(){var n=at(1),r=a.clipByValue(e,it(),Number.MAX_VALUE),i=a.log(xt(n,r)),o=a.clipByValue(t,it(),Number.MAX_VALUE),s=a.log(xt(n,o));return a.mean(Et(a.sub(i,s)),-1)})}function we(t,e){return Object(a.tidy)(function(){var n=at(0),r=at(1),i=a.maximum(n,a.sub(r,a.mul(t,e)));return a.mean(Et(i),-1)})}function xe(t,e){return Object(a.tidy)(function(){var n=at(0),r=at(1),i=a.maximum(n,a.sub(r,a.mul(t,e)));return a.mean(i,-1)})}function Oe(t,e){return Object(a.tidy)(function(){var n=at(0),r=at(1),i=a.sum(a.mul(t,e),-1),o=a.max(a.mul(a.sub(r,t),e),-1);return a.maximum(n,xt(r,a.sub(o,i)))})}function Ne(t,e){return Object(a.tidy)(function(){var n=at(Math.log(2)),r=a.sub(e,t),i=a.sub(a.add(r,a.softplus(wt(at(-2),r))),n);return a.mean(i,-1)})}function Se(t,e){return Object(a.tidy)(function(){return Ct(t,e)})}function Ee(t,e){return Object(a.tidy)(function(){return Dt(t,e)})}function Ae(t,e){return Object(a.tidy)(function(){return a.mean(_t(t,e),-1)})}function Ie(t,e){return Object(a.tidy)(function(){var n=a.clipByValue(t,it(),1),r=a.clipByValue(e,it(),1);return a.sum(a.mul(t,a.log(a.div(n,r))),-1)})}function Te(t,e){return Object(a.tidy)(function(){var n=a.log(xt(at(it()),e));return a.mean(a.sub(e,a.mul(t,n)),-1)})}function ke(t,e){return Object(a.tidy)(function(){var n=Tt(t,-1),r=Tt(e,-1),i=a.mul(n,r);return a.neg(a.sum(i,-1))})}function Pe(t){var e={meanSquaredError:ge,meanAbsoluteError:ye,meanAbsolutePercentageError:ve,meanSquaredLogarithmicError:be,squaredHinge:we,hinge:xe,categoricalHinge:Oe,logcosh:Ne,categoricalCrossentropy:Se,sparseCategoricalCrossentropy:Ee,binaryCrossentropy:Ae,kullbackLeiblerDivergence:Ie,poisson:Te,cosineProximity:ke};if("string"==typeof t){if(t in e)return e[t];throw new u("Unknown loss "+t)}return t}function Re(t,e){return Object(a.tidy)(function(){var n=wt(at(.5),a.onesLike(e)),r=ct(a.greater(e,n),t.dtype);return a.mean(a.equal(t,r),-1)})}function Ce(t,e){return Object(a.tidy)(function(){return ct(a.equal(a.argMax(t,-1),a.argMax(e,-1)),"float32")})}function De(t,e){return Object(a.tidy)(function(){return a.mean(_t(t,e),-1)})}function _e(t,e){throw new l}var Me=ge,ze=ge,je=ye,Le=ye,Fe=ve,Ve=ve,Be=Se,Ue=ke,We=Ee;var qe=function(){function t(e){if(this.id2Value={},e instanceof t)for(var n in e.id2Value)this.id2Value[n]=e.id2Value[n];else{if(null==e)return;for(var r=0,a=e;r<a.length;r++){var i=a[r];this.add(i.key,i.value)}}}return t.prototype.add=function(t,e){if(function(t,e){if(null!=t.dtype&&t.dtype!==e.dtype)throw new u("The dtype of the feed ("+e.dtype+") is incompatible with that of the key '"+t.name+"' ("+t.dtype+").");if(null!=t.shape){if(t.shape.length!==e.shape.length)throw new u("The rank of feed ("+e.shape.length+") does not match the rank of the key ("+t.shape.length+").");for(var n=0;n<t.shape.length;++n)if(null!=t.shape[n]&&t.shape[n]!==e.shape[n])throw new u("The "+n+"-th dimension of the feed ("+e.shape[n]+") is incompatible with that of the key ("+t.shape[n]+").")}}(t,e),null!=this.id2Value[t.id])throw new u("Duplicate key: name="+t.name+", id="+t.id);return this.id2Value[t.id]=e,this},t.prototype.addFeed=function(t){this.add(t.key,t.value)},t.prototype.hasKey=function(t){return null!=this.id2Value[t.id]},t.prototype.getValue=function(t){if(null==this.id2Value[t.id])throw new u("Nonexistent key: "+JSON.stringify(t));return this.id2Value[t.id]},t}();function Ge(t,e,n){for(var r=Array.isArray(t),a=r?t:[t],i=[],o=new qe(e),s=0,u=a;s<u.length;s++){var l=u[s];i.push(He(l,o,n))}return r?i:i[0]}function He(t,e,n){if(e.hasKey(t))return e.getValue(t);if(t.sourceLayer instanceof re)throw new u("Missing a feed value for SymbolicTensor from InputLayer '"+re.name+"'");for(var r=[],a=0,i=t.inputs;a<i.length;a++){var o=He(i[a],e,n);r.push(o)}var s=t.sourceLayer.apply(r,n);Array.isArray(s)||(s=[s]);for(var l=function(t){var e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{for(var n=null,r=0;r<t.sourceLayer.inboundNodes.length;++r)for(var a=0,i=t.sourceLayer.inboundNodes[r].outputTensors;a<i.length;a++){var o=i[a];if(o.id===t.id){n=r;break}}e=t.sourceLayer.getOutputAt(n)}return e}(t),c=Array.isArray(l)?l:[l],p=0;p<c.length;++p)e.add(c[p],s[p]);return 1===s.length?s[0]:s[t.outputTensorIndex]}var Ke,Xe=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ye=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},Je=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},Qe=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};function Ze(t){return Array.isArray(t)}function $e(t){return!function(t){return t instanceof a.Tensor}(t)&&!Ze(t)}function tn(t,e,n,r,a){if(void 0===r&&(r=!0),void 0===a&&(a=""),null==e||0===e.length){if(null!=t){var i=!1;if(Ze(t)&&t.length>0)i=!0;else if($e(t)){for(var o in t)if(t.hasOwnProperty(o)){i=!0;break}}else i=!0;if(i)throw new u("Error when checking model "+a+" expected no data, but got "+t)}return[]}if(null==t)return e.map(function(t){return null});var s;if($e(t)){t=t,s=[];for(var l=0,c=e;l<c.length;l++){var p=c[l];if(null==t[p])throw new u('No data provided for "'+p+'". Need data for each key in: '+e);s.push(t[p])}}else if(Ze(t)){if((t=t).length!==e.length)throw new u("Error when checking model "+a+": the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see "+e.length+" Tensor(s), but instead got the following list of Tensor(s): "+t);s=t}else{if(t=t,e.length>1)throw new u("The model "+a+" expects "+e.length+" Tensor(s), but only received one Tensor. Found: Tensor with shape "+t.shape);s=[t]}for(var f=0;f<e.length;++f){1===(h=s[f]).shape.length&&(s[f]=pt(h,1))}if(null!=n)for(f=0;f<e.length;++f)if(null!=n[f]){var h;if((h=s[f]).shape.length!==n[f].length)throw new u("Error when checking "+a+": expected "+e[f]+" to have "+n[f].length+" dimension(s). but got array with shape "+h.shape);for(var d=0;d<n[f].length;++d)if(0!==d||r){var m=h.shape[d],g=n[f][d];if(null!=g&&g>=0&&m!==g)throw new u("Error when checking "+a+": expected "+e[f]+" to have shape ["+n[f]+"], but got array with shape ["+h.shape+"].")}}return s}function en(t,e){for(var n=[],r=0,a=null;r<t;)(a=r+e)>=t&&(a=t),n.push([r,a]),r=a;return n}function nn(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(function(t){return ft(t,e,n-e)}):ft(t,e,n-e)}function rn(t,e){return null==t?null:Array.isArray(t)?t.map(function(t){return rn(t,e)}):St(t,"int32"===e.dtype?e:e.toInt())}function an(t,e,n,r,a){var i;if(void 0===r&&(r=!0),void 0===a&&(a=""),Array.isArray(t)){if(t.length!==e.length)throw new u("Error when checking model "+a+": the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see "+e.length+" Tensor(s), but instead got "+t.length+" Tensors(s).");i=t}else{if(e.length>1)throw new u("The model expects "+e.length+" "+a+" Tensors, but only received one Tensor. Found: array with shape "+JSON.stringify(t.shape)+".");i=[t]}if(null!=n)for(var o=0;o<e.length;++o)if(null!=n[o]){var s=i[o];if(s.shape.length!==n[o].length)throw new u("Error when checking "+a+": expected "+e[o]+" to have "+n[o].length+" dimension(s), but got array with shape "+JSON.stringify(s.shape));for(var l=0;l<n[o].length;++l)if(0!==l||r){var c=s.shape[l],p=n[o][l];if(null!=p&&p!==c)throw new u("Error when checking "+a+": expected "+e[o]+" to have shape "+JSON.stringify(n[o])+" but got array with shape "+JSON.stringify(s.shape)+".")}}}!function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(Ke||(Ke={}));var on=function(t){function e(e){return t.call(this,e)||this}return Xe(e,t),e.prototype.compile=function(t){var e=this;if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer=function(t){var e={Adagrad:function(){return a.train.adagrad(.01)},Adam:function(){return a.train.adam(.001,.9,.999,it())},RMSProp:function(){return a.train.rmsprop(.001,.9,null,it())},SGD:function(){return a.train.sgd(.01)}};if(e.adagrad=e.Adagrad,e.adam=e.Adam,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new u("Unknown Optimizer "+t)}(t.optimizer);else{if(!(t.optimizer instanceof a.Optimizer))throw new u("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer=t.optimizer}var n=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new u("When passing an Array as loss, it should have one entry per model output. The model has "+this.outputs.length+" output(s), but you passed loss="+t.loss+".");var r=t.loss;n=r.map(function(t){return Pe(t)})}else{var i=Pe(t.loss);this.outputs.map(function(t){n.push(i)})}else{for(var o in t.loss=t.loss,t.loss)if(-1===this.outputNames.indexOf(o))throw new u('Unknown entry in loss dictionary: "'+o+'". Only expect the following keys: '+this.outputNames);for(var s in this.outputNames)null==t.loss[s]&&console.warn('Output "'+s+'" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to '+s+" during training"),n.push(Pe(t.loss[s]))}this.lossFunctions=n,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(var l=0;l<this.outputs.length;++l){var c=this.internalOutputShapes[l],p=this.outputNames[l];this.feedOutputNames.push(p),this.feedOutputShapes.push(c),this.feedLossFns.push(this.lossFunctions[l])}var f=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],kt("loss",function(){for(var t=0;t<e.outputs.length;++t)if(-1===f.indexOf(t)){var n=e.lossFunctions[t];e.outputs.length>1&&(e.metricsTensors.push([n,t]),e.metricsNames.push(e.outputNames[t]+"_loss"))}});var h=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(function(t){return[]});if(Array.isArray(t))return e.map(function(e){return t});if(null!=t){for(var n=[],r=0,a=e;r<a.length;r++){var i=a[r],o=t.hasOwnProperty(i)?t[i]:[];Array.isArray(o)||(o=[o]),n.push(o)}return n}throw new TypeError("Type of metrics argument not understood. Expected an Array or Object, found: "+t)}(t.metrics,this.outputNames);kt("metric",function(){for(var t=function(t){if(-1!==f.indexOf(t))return"continue";!function(n){for(var r,a,i,o=function(n){if(-1!==["accuracy","acc","crossentropy","ce"].indexOf(n)){var o=e.internalOutputShapes[t];1===o[o.length-1]||e.lossFunctions[t]===Ae?-1!==["accuracy","acc"].indexOf(n)?a=Re:-1!==["crossentropy","ce"].indexOf(n)&&(a=De):e.lossFunctions[t]===Ee?-1!==["accuracy","acc"].indexOf(n)?a=_e:-1!==["crossentropy","ce"].indexOf(n)&&(a=We):-1!==["accuracy","acc"].indexOf(n)?a=Ce:-1!==["crossentropy","ce"].indexOf(n)&&(a=Be);var s=void 0;-1!==["accuracy","acc"].indexOf(n)?s="acc":-1!==["crossentropy","ce"].indexOf(n)&&(s="ce"),i=a,r=""+s}else{var l=function(t){var e={binaryAccuracy:Re,categoricalAccuracy:Ce,categoricalCrossentropy:Be,sparseCategoricalCrossentropy:We,mse:Me,MSE:ze,mae:je,MAE:Le,mape:Fe,MAPE:Ve,cosine:Ue};if("string"==typeof t&&t in e)return e[t];if("string"!=typeof t&&null!=t)return t;throw new u("Unknown metric "+t)}(n);i=l,r=""+n}var c;kt(r,function(){c=i}),function(t,n,r){e.outputNames.length>1&&(n=e.outputNames[t]+"_"+n),e.metricsNames.push(n),e.metricsTensors.push([r,t])}(t,r,c)},s=0,l=n;s<l.length;s++)o(l[s])}(h[t])},n=0;n<e.outputs.length;++n)t(n)}),this.collectedTrainableWeights=this.trainableWeights},e.prototype.checkTrainableWeightsConsistency=function(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")},e.prototype.evaluate=function(t,e,n){void 0===n&&(n={});var r=null==n.batchSize?32:n.batchSize,a=this.standardizeUserData(t,e,!0,r),i=a[0].concat(a[1]);this.makeTestFunction();var o=this.testFunction;return m(this.testLoop(o,i,r,n.verbose,n.steps))},e.prototype.checkNumSamples=function(t,e,n,r){var a;if(void 0===r&&(r="steps"),null!=n){if(a=null,null!=e)throw new u("If "+r+" is set, batchSize must be null or undefined.Got batchSize = "+e)}else{if(null==t)throw new u("Either the input data should have a defined shape, or "+r+" shoud be specified.");a=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return a},e.prototype.predictLoop=function(t,e,n){var r=this;void 0===e&&(e=32),void 0===n&&(n=!1);var i=this.checkNumSamples(t);if(n)throw new l("Verbose predictLoop() is not implemented yet.");for(var o=en(i,e),s=[],u=function(e){var n=a.tidy(function(){var n=o[e][0],a=o[e][1],i=nn(t,n,a),s=[];if(Array.isArray(i))for(var u=0;u<i.length;++u)s.push({key:r.inputs[u],value:i[u]});else s.push({key:r.inputs[0],value:i});var l=new qe(s);return Ge(r.outputs,l)});if(0===e)for(var i=0,u=n;i<u.length;i++){var l=u[i];s.push(l)}else for(var c=0;c<n.length;++c)s[c]=yt(s[c],n[c])},c=0;c<o.length;++c)u(c);return m(s)},e.prototype.predict=function(t,e){void 0===e&&(e={}),an(t,this.inputNames,this.feedInputShapes,!1);var n=null==e.batchSize?32:e.batchSize;return this.predictLoop(t,n)},e.prototype.predictOnBatch=function(t){return an(t,this.inputNames,this.feedInputShapes,!0),this.predictLoop(t,t.shape[0])},e.prototype.standardizeUserData=function(t,e,n,r){if(void 0===n&&(n=!0),null==this.optimizer)throw new s("You must compile a model before training/testing. Use Model.compile(modelCompileConfig).");for(var i=[],o=0;o<this.feedOutputShapes.length;++o){var l=this.feedOutputShapes[o];this.feedLossFns[o]===Ee?i.push(l.slice(0,l.length-1).concat([1])):i.push(l)}if(function(t,e,n){var r=I(t.map(function(t){return t.shape[0]}));r.sort();var i=I(e.map(function(t){return t.shape[0]}));if(i.sort(),r.length>1)throw new u("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(function(t){return t.shape})));if(i.length>1)throw new u("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(function(t){return t.shape})));if(r.length>0&&i.length>0&&!a.util.arraysEqual(r,i))throw new u("Input Tensors should have the same number of samples as target Tensors. Found "+r[0]+" input sample(s) and "+i[0]+" target sample(s).")}(t=tn(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=tn(e,this.feedOutputNames,i,!1,"target")),function(t,e,n){for(var r=[ge,Ae,Se],a=0;a<t.length;++a){var i=t[a],o=e[a],s=n[a];if(null!=o){if(o===Se&&1===i.shape[i.shape.length-1])throw new u("You are passing a target array of shape "+i.shape+" while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");if(-1!==r.indexOf(o))for(var l=i.shape.slice(1),c=s.slice(1),p=0;p<l.length;++p){var f=l[p],h=c[p];if(null!=h&&f!==h)throw new u("A target Tensor with shape "+i.shape+" was passed for an output of shape "+s+", while using a loss function that expects targets to have the same shape as the output.")}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new u("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size "+r+". Found: "+t[0].shape[0]+" sample(s).");return[t,e,null]},e.prototype.fitLoop=function(t,e,n,r,i,o,s,c,p,f,h,d,m,g){return void 0===d&&(d=0),Je(this,void 0,void 0,function(){var y,v,b,w,x,O,N=this;return Qe(this,function(S){switch(S.label){case 0:if(null==r&&(r=32),null==i&&(i=1),null==f&&(f=!0),null==d&&(d=0),y=!1,null!=c&&null!=p&&(y=!0),null!=g&&(y=!0,null==m))throw new u("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");if(null!=(v=this.checkNumSamples(e,r,m,"steps_per_epoch"))&&(b=H(0,v)),this.history=new de,s=(s=null==s?[new fe]:[new fe].concat(s)).concat([this.history]),o>0)throw new l("Verbose mode is not implemented yet.");return(w=new pe(s)).setModel(this),w.setParams({epochs:i,steps:m,verbose:o,doValidation:y,metrics:h}),[4,w.onTrainBegin()];case 1:S.sent(),x=function(i){var o,s,u,h,d;return Qe(this,function(g){switch(g.label){case 0:return[4,w.onEpochBegin(i)];case 1:if(g.sent(),o={},null==m)return[3,2];throw new l("stepsPerEpoch mode is not implemented yet.");case 2:if("batch"===f)throw new l("batch shuffling is not implemneted yet");f&&a.util.shuffle(b),s=Object(a.tensor1d)(b),u=en(v,r),h=function(i){var l;return Qe(this,function(f){switch(f.label){case 0:return l={},[4,w.onBatchBegin(i,l)];case 1:return f.sent(),a.tidy(function(){var f=u[i][0],h=u[i][1],d=ft(s,f,h-f);l.batch=i,l.size=h-f;for(var m=rn(e,d),g=t(m),v=0;v<n.length;++v){var b=n[v],w=g[v];l[b]=w,a.keep(w)}if(i===u.length-1&&y){var x=N.testLoop(c,p,r);for(v=0;v<n.length;++v){b=n[v],w=x[v];a.keep(w),o["val_"+b]=w}}}),[4,w.onBatchEnd(i,l)];case 2:return f.sent(),function(t){if(null!=t)for(var e in t){var n=t[e];"number"!=typeof n&&n.dispose()}}(l),[2]}})},d=0,g.label=3;case 3:return d<u.length?[5,h(d)]:[3,6];case 4:g.sent(),g.label=5;case 5:return++d,[3,3];case 6:s.dispose(),g.label=7;case 7:return[4,w.onEpochEnd(i,o)];case 8:return g.sent(),[2]}})},O=d,S.label=2;case 2:return O<i?[5,x(O)]:[3,5];case 3:S.sent(),S.label=4;case 4:return++O,[3,2];case 5:return[4,w.onTrainEnd()];case 6:return S.sent(),[4,this.history.syncData()];case 7:return S.sent(),[2,this.history]}})})},e.prototype.testLoop=function(t,e,n,r,i){void 0===r&&(r=0);var o=this.checkNumSamples(e,n,i,"steps"),s=[];if(1===r)throw new l("Verbose mode is not implemented yet.");if(null!=i)throw new l("steps mode in testLoop() is not implemented yet");for(var u=en(o,n),c=Object(a.tensor1d)(H(0,o)),p=0;p<u.length;++p){var f=u[p][0],h=u[p][1],d=t(rn(e,ft(c,f,h-f)));if(0===p)for(var m=0;m<d.length;++m)s.push(at(0));for(m=0;m<d.length;++m){var g=d[m];s[m]=a.add(s[m],wt(at(h-f),g))}}for(m=0;m<s.length;++m)s[m]=a.div(s[m],at(o));return s},e.prototype.getDedupedMetricsNames=function(){for(var t=this.metricsNames,e=[],n=0;n<t.length;++n){var r=t[n],a=r;if(d(t,r)>1)a+="_"+d(t.slice(0,n),r);e.push(a)}return e},e.prototype.makeTestFunction=function(){var t=this;this.testFunction=function(e){return a.tidy(function(){for(var n,r=[],i=e.slice(0,t.inputs.length),o=e.slice(t.inputs.length,t.inputs.length+t.outputs.length),s=[],u=0;u<t.inputs.length;++u)s.push({key:t.inputs[u],value:i[u]});var l=new qe(s),c=Ge(t.outputs,l);for(u=0;u<t.lossFunctions.length;++u){var p=t.lossFunctions[u],f=a.mean(p(o[u],c[u]));n=0===u?f:a.add(n,f),r.push(n)}for(u=0;u<t.metricsTensors.length;++u){var h=t.metricsTensors[u][0],d=t.metricsTensors[u][1],m=a.mean(h(o[d],c[d]));r.push(m)}return r})}},e.prototype.fit=function(t,e,n){return void 0===n&&(n={}),Je(this,void 0,void 0,function(){var r,i,o,s,c,p,f,h,d,m,y,v,b,w,x,O,N,S=this;return Qe(this,function(E){if(r=null==n.batchSize?32:n.batchSize,i=this.standardizeUserData(t,e,!1,r),o=i[0],s=i[1],c=!1,null!=n.validationData&&n.validationData.length>0){if(c=!0,2!==n.validationData.length)throw 3===n.validationData.length?new l("validationData including sample weights is not supported yet."):new u("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+n.validationData+" is invalid.");p=n.validationData[0],f=n.validationData[1],d=this.standardizeUserData(p,f,!0,r),p=d[0],f=d[1],h=p.concat(f)}else null!=n.validationSplit&&n.validationSplit>0&&n.validationSplit<1?(c=!0,m=Math.floor(o[0].shape[0]*(1-n.validationSplit)),y=o[0].shape[0],p=nn(o,m,y),o=nn(o,0,m),f=nn(s,m,y),s=nn(s,0,m),h=p.concat(f)):null!=n.validationSteps&&(c=!0);return v=o.concat(s),this.checkTrainableWeightsConsistency(),b=function(t){var e=[],n=[],r=t.slice(0,S.inputs.length),i=t.slice(S.inputs.length,S.inputs.length+S.outputs.length),o=[],s=S.collectedTrainableWeights.map(function(t){return t.read()});return[S.optimizer.minimize(function(){for(var t=[],s=0;s<S.inputs.length;++s)t.push({key:S.inputs[s],value:r[s]});var u,l=new qe(t),c=Ge(S.outputs,l,{training:!0});for(s=0;s<S.lossFunctions.length;++s){var p=(0,S.lossFunctions[s])(i[s],c[s]);e.push(p);var f=a.mean(p);n.push(f),u=0===s?p:a.add(u,p)}for(s=0;s<S.metricsTensors.length;++s){var h=S.metricsTensors[s][0],d=S.metricsTensors[s][1],m=a.mean(h(i[d],c[d]));a.keep(m),o.push(m)}return u=a.mean(u),S.calculateLosses().forEach(function(t){u=a.add(u,t)}),u},!0,s)].concat(o)},w=this.getDedupedMetricsNames(),c?(this.makeTestFunction(),x=this.testFunction,O=w.slice().concat(w.map(function(t){return"val_"+t}))):(x=null,h=[],O=w.slice()),N=function(t){return null==t?null:t instanceof ce?[t]:Array.isArray(t)&&t[0]instanceof ce?t:g(t).map(function(t){return new me(t)})}(n.callbacks),[2,this.fitLoop(b,v,w,r,n.epochs,n.verbose,N,x,h,n.shuffle,O,null,null,null)]})})},e.prototype.getNamedWeights=function(t){for(var e={},n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,a=this.getWeights(n),i=0;i<r.length;++i)n&&!r[i].trainable||(e[r[i].originalName]=a[i]);return e},e.prototype.save=function(t,e){return Je(this,void 0,void 0,function(){var n,r,i,o,s;return Qe(this,function(l){switch(l.label){case 0:if("string"==typeof t){if(0===(n=a.io.getSaveHandlers(t)).length)throw new u("Cannot find any save handlers for URL '"+t+"'");if(n.length>1)throw new u("Found more than one ("+n.length+") save handlers for URL '"+t+"'");t=n[0]}if(null==t.save)throw new u("Model.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return[4,a.io.encodeWeights(this.getNamedWeights(e))];case 1:return r=l.sent(),i=!1,o=null,s=this.toJSON(o,i),[2,t.save({modelTopology:s,weightData:r.data,weightSpecs:r.specs})]}})})},e.className="Model",Ye([Object(a.doc)({heading:"Models",subheading:"Classes",configParamIndices:[0]})],e.prototype,"compile",null),Ye([Object(a.doc)({heading:"Models",subheading:"Classes",configParamIndices:[2]})],e.prototype,"evaluate",null),Ye([Object(a.doc)({heading:"Models",subheading:"Classes",configParamIndices:[1]})],e.prototype,"predict",null),Ye([Object(a.doc)({heading:"Models",subheading:"Classes"})],e.prototype,"predictOnBatch",null),Ye([Object(a.doc)({heading:"Models",subheading:"Classes",configParamIndices:[2]})],e.prototype,"fit",null),e=Ye([Object(a.doc)({heading:"Models",subheading:"Classes"})],e)}(ie);a.serialization.SerializationMap.register(on);var sn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),un=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},ln=["fanIn","fanOut","fanAvg"];var cn=["normal","uniform"];var pn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return sn(e,t),e.prototype.fromConfigUsesCustomObjects=function(){return!1},e.prototype.getConfig=function(){return{}},e=un([Object(a.doc)({heading:"Initializers",subheading:"Classes",namespace:"initializers"})],e)}(a.serialization.Serializable),fn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return sn(e,t),e.prototype.apply=function(t,e){return Object(a.zeros)(t,e)},e.className="Zeros",e}(pn);a.serialization.SerializationMap.register(fn);var hn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return sn(e,t),e.prototype.apply=function(t,e){return Object(a.ones)(t,e)},e.className="Ones",e}(pn);a.serialization.SerializationMap.register(hn);var dn=function(t){function e(e){var n=t.call(this)||this;return n.value=e.value,n}return sn(e,t),e.prototype.apply=function(t,e){var n=this;return Object(a.tidy)(function(){return wt(Object(a.scalar)(n.value),Object(a.ones)(t,e))})},e.prototype.getConfig=function(){return{value:this.value}},e.className="Constant",e}(pn);a.serialization.SerializationMap.register(dn);var mn=function(t){function e(e){var n=t.call(this)||this;return n.DEFAULT_MINVAL=-.05,n.DEFAULT_MAXVAL=.05,n.minval=e.minval||n.DEFAULT_MINVAL,n.maxval=e.maxval||n.DEFAULT_MAXVAL,n.seed=e.seed,n}return sn(e,t),e.prototype.apply=function(t,e){return Object(a.randomUniform)(t,this.minval,this.maxval,e)},e.prototype.getConfig=function(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}},e.className="RandomUniform",e}(pn);a.serialization.SerializationMap.register(mn);var gn=function(t){function e(e){var n=t.call(this)||this;return n.DEFAULT_MEAN=0,n.DEFAULT_STDDEV=.05,n.mean=e.mean||n.DEFAULT_MEAN,n.stddev=e.stddev||n.DEFAULT_STDDEV,n.seed=e.seed,n}return sn(e,t),e.prototype.apply=function(t,e){if("bool"===e)throw new l("randomNormal does not support dType bool.");return Ot(t,this.mean,this.stddev,e,this.seed)},e.prototype.getConfig=function(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}},e.className="RandomNormal",e}(pn);a.serialization.SerializationMap.register(gn);var yn=function(t){function e(e){var n=t.call(this)||this;return n.DEFAULT_MEAN=0,n.DEFAULT_STDDEV=.05,n.mean=e.mean||n.DEFAULT_MEAN,n.stddev=e.stddev||n.DEFAULT_STDDEV,n.seed=e.seed,n}return sn(e,t),e.prototype.apply=function(t,e){if("bool"===e)throw new l("truncatedNormal does not support dType bool.");return Object(a.truncatedNormal)(t,this.mean,this.stddev,e,this.seed)},e.prototype.getConfig=function(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}},e.className="TruncatedNormal",e}(pn);a.serialization.SerializationMap.register(yn);var vn=function(t){function e(e){var n=t.call(this)||this;return n.gain=null!=e.gain?Object(a.scalar)(e.gain):at(1),n}return sn(e,t),e.prototype.apply=function(t,e){var n=this;return Object(a.tidy)(function(){if(2!==t.length||t[0]!==t[1])throw new u("Identity matrix initializer can only be used for 2D square matrices.");return wt(n.gain,Object(a.eye)(t[0]))})},e.prototype.getConfig=function(){return{gain:this.gain.get()}},e.className="Identity",e}(pn);a.serialization.SerializationMap.register(vn);var bn=function(t){function e(e){var n,r=t.call(this)||this;if(e.scale<0)throw new u("scale must be a positive float. Got: "+e.scale);return r.scale=null==e.scale?1:e.scale,r.mode=e.mode,n=r.mode,k(ln,"FanMode",n),r.distribution=e.distribution,function(t){k(cn,"Distribution",t)}(r.distribution),r.seed=e.seed,r}return sn(e,t),e.prototype.apply=function(t,e){var n=function(t,e){var n,r;if(void 0===e&&(e="channelsLast"),C(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length))if("channelsFirst"===e){var a=U(t,2);n=t[1]*a,r=t[0]*a}else"channelsLast"===e&&(a=U(t,0,t.length-2),n=t[t.length-2]*a,r=t[t.length-1]*a);else{var i=U(t);n=Math.sqrt(i),r=Math.sqrt(i)}return[n,r]}(t),r=n[0],i=n[1],o=this.scale;if("fanIn"===this.mode?o/=Math.max(1,r):"fanOut"===this.mode?o/=Math.max(1,i):o/=Math.max(1,(r+i)/2),"normal"===this.distribution){var s=Math.sqrt(o);if("bool"===e)throw new l(this.getClassName()+" does not support dType bool.");return Object(a.truncatedNormal)(t,0,s,e,this.seed)}var u=Math.sqrt(3*o);return Object(a.randomUniform)(t,-u,u,e)},e.prototype.getConfig=function(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}},e.className="VarianceScaling",e}(pn);a.serialization.SerializationMap.register(bn);var wn=function(t){function e(e){return t.call(this,{scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})||this}return sn(e,t),e.prototype.getClassName=function(){return bn.className},e}(bn),xn=function(t){function e(e){return t.call(this,{scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})||this}return sn(e,t),e.prototype.getClassName=function(){return bn.className},e}(bn),On=function(t){function e(e){return t.call(this,{scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})||this}return sn(e,t),e.prototype.getClassName=function(){return bn.className},e}(bn),Nn=function(t){function e(e){return t.call(this,{scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})||this}return sn(e,t),e.prototype.getClassName=function(){return bn.className},e}(bn),Sn=function(t){function e(e){var n=t.call(this)||this;if(n.DEFAULT_GAIN=1,n.gain=null==e.gain?n.DEFAULT_GAIN:e.gain,n.seed=e.seed,null!=n.seed)throw new l("Random seed is not implemented for Orthogonal Initializer yet.");return n}return sn(e,t),e.prototype.apply=function(t,e){var n=this;return Object(a.tidy)(function(){if(2!==t.length)throw new l("The Orthogonal Initializer does not support non-2D shapes yet.");t[0]*t[1]>2e3&&console.warn("Orthgonal initializer is being called on a matrix with more  than 2000 ("+t[0]*t[1]+") elements: Slowness may result.");var e=Ot(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32"),r=a.linalg.gramSchmidt(e);return t[0]>t[1]&&(r=r.transpose()),wt(at(n.gain),r)})},e.prototype.getConfig=function(){return{gain:this.gain,seed:this.seed}},e.className="Orthogonal",e}(pn);a.serialization.SerializationMap.register(Sn);var En={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",identity:"Identity",leCunNormal:"LeCunNormal",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function An(t,e){return void 0===e&&(e={}),N(t,a.serialization.SerializationMap.getMap().classNameMap,e,"initializer")}function In(t){return O(t)}function Tn(t){if("string"==typeof t){var e=t in En?En[t]:t;return"GlorotUniform"===e?new wn:"GlorotNormal"===e?new xn:"HeNormal"===e?new On:"LeCunNormal"===e?new Nn:An({className:e,config:{}})}return t instanceof pn?t:An(t)}var kn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Pn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.getConfig=function(){return{}},e}(a.serialization.Serializable),Rn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t,e){return void 0===e&&(e=1),function(t,e){if(void 0===e&&(e=1),1!==e)throw new l("Support for alpha values other than 1 ("+e+") is not implemented yet.");return a.elu(t)}(t,e)},e.className="elu",e}(Pn);a.serialization.SerializationMap.register(Rn);var Cn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t){return a.selu(t)},e.className="selu",e}(Pn);a.serialization.SerializationMap.register(Cn);var Dn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t){return a.relu(t)},e.className="relu",e}(Pn);a.serialization.SerializationMap.register(Dn);var _n=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t){return Object(a.tidy)(function(){return a.minimum(Object(a.scalar)(6),a.relu(t))})},e.className="relu6",e}(Pn);a.serialization.SerializationMap.register(_n);var Mn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t){return t},e.className="linear",e}(Pn);a.serialization.SerializationMap.register(Mn);var zn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t){return a.sigmoid(t)},e.className="sigmoid",e}(Pn);a.serialization.SerializationMap.register(zn);var jn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t){return function(t){return Object(a.tidy)(function(){var e=xt(Object(a.scalar)(.5),wt(Object(a.scalar)(.2),t));return a.clipByValue(e,0,1)})}(t)},e.className="hardSigmoid",e}(Pn);a.serialization.SerializationMap.register(jn);var Ln=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t){return a.softplus(t)},e.className="softplus",e}(Pn);a.serialization.SerializationMap.register(Ln);var Fn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t){return function(t){return Object(a.tidy)(function(){return a.div(t,a.add(at(1),a.abs(t)))})}(t)},e.className="softsign",e}(Pn);a.serialization.SerializationMap.register(Fn);var Vn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t){return a.tanh(t)},e.className="tanh",e}(Pn);a.serialization.SerializationMap.register(Vn);var Bn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return kn(e,t),e.prototype.apply=function(t,e){return void 0===e&&(e=-1),a.softmax(t,e)},e.className="softmax",e}(Pn);function Un(t){return t.getClassName()}function Wn(t,e){return void 0===e&&(e={}),N(t,a.serialization.SerializationMap.getMap().classNameMap,e,"activation")}function qn(t){return null==t?Wn({className:"linear",config:{}}):"string"==typeof t?Wn({className:t,config:{}}):t instanceof Pn?t:Wn(t)}a.serialization.SerializationMap.register(Bn);var Gn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Hn=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.DEFAULT_ALPHA=.3,null==e&&(e={}),n.alpha=null==e.alpha?n.DEFAULT_ALPHA:e.alpha,n}return Gn(e,t),e.prototype.call=function(t,e){var n=S(t);return Object(a.leakyRelu)(n,this.alpha)},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={alpha:this.alpha},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="LeakyReLU",e}(ne);a.serialization.SerializationMap.register(Hn);var Kn=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;if(n.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==n.DEFAULT_ALPHA)throw new l("Non-default alpha value ("+e.alpha+") is not supported by the ELU layer yet.");return n.alpha=null==e.alpha?n.DEFAULT_ALPHA:e.alpha,n}return Gn(e,t),e.prototype.call=function(t,e){var n=S(t);return Object(a.elu)(n)},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={alpha:this.alpha},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ELU",e}(ne);a.serialization.SerializationMap.register(Kn);var Xn=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.DEFAULT_THETA=1,null==e&&(e={}),n.theta=null==e.theta?n.DEFAULT_THETA:e.theta,n.thetaTensor=at(n.theta),n}return Gn(e,t),e.prototype.call=function(t,e){var n=S(t);return n.mul(ct(n.greater(this.thetaTensor),"float32"))},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={theta:this.theta},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ThresholdedReLU",e}(ne);a.serialization.SerializationMap.register(Xn);var Yn=function(t){function e(e){var n=t.call(this,null==e?{}:e)||this;return n.DEFAULT_AXIS=1,null==e&&(e={}),n.softmax=(new Bn).apply,n.axis=null==e.axis?n.DEFAULT_AXIS:e.axis,n}return Gn(e,t),e.prototype.call=function(t,e){var n=S(t);return this.softmax(n,this.axis)},e.prototype.computeOutputShape=function(t){return t},e.prototype.getConfig=function(){var e={axis:this.axis},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Softmax",e}(ne);a.serialization.SerializationMap.register(Yn);var Jn=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Qn=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},Zn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Jn(e,t),e}(a.serialization.Serializable),$n=function(t){function e(e){var n=t.call(this)||this,r=null==e||null==e.l1?.01:e.l1,a=null==e||null==e.l2?.01:e.l2;return n.hasL1=0!==r,n.hasL2=0!==a,n.l1=at(r),n.l2=at(a),n}return Jn(e,t),e.prototype.apply=function(t){var e=this;return Object(a.tidy)(function(){var n=Object(a.zeros)([1]);return e.hasL1&&(n=Object(a.add)(n,Object(a.sum)(wt(e.l1,Object(a.abs)(t))))),e.hasL2&&(n=Object(a.add)(n,Object(a.sum)(wt(e.l2,Et(t))))),n.asScalar()})},e.prototype.getConfig=function(){return{l1:this.l1.dataSync()[0],l2:this.l2.dataSync()[0]}},e.fromConfig=function(t,e){return new t({l1:e.l1,l2:e.l2})},e.className="L1L2",e=Qn([Object(a.doc)({heading:"Regularizers",namespace:"regularizers"})],e)}(Zn);a.serialization.SerializationMap.register($n);var tr={l1l2:"L1L2"};function er(t){return O(t)}function nr(t,e){return void 0===e&&(e={}),N(t,a.serialization.SerializationMap.getMap().classNameMap,e,"regularizer")}function rr(t){return null==t?null:"string"==typeof t?nr({className:t in tr?tr[t]:t,config:{}}):t instanceof Zn?t:nr(t)}function ar(t,e,n){if("number"==typeof t)return f(t,e);if(t.length!==e)throw new u("The "+n+" argument must be a tuple of "+e+" integers. Received: "+t.length+" elements.");for(var r=0;r<e;++r){var a=t[r];if((i=a)!==parseInt(i.toString(),10))throw new u("The "+n+" argument must be a tuple of "+e+" integers. Received: "+JSON.stringify(t)+" including a non-integer number "+a)}return t;var i}function ir(t,e,n,r,a){return void 0===a&&(a=1),null==t?t:(i="same"===n?t:t-(e+(e-1)*(a-1))+1,Math.floor((i+r-1)/r));var i}function or(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+G([n-e,0]);else{if("same"!==r)throw new u("Unsupport padding mode: "+r+".");t*=e}return t}var sr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function ur(t,e){return Object(a.tidy)(function(){return C(e),"channelsFirst"===e?a.transpose(t,[0,2,3,1]):t})}function lr(t,e,n,r,i,o,s){return void 0===r&&(r=1),void 0===i&&(i="valid"),void 0===s&&(s=1),Object(a.tidy)(function(){if(null==o&&(o="channelsLast"),C(o),3!==t.shape.length)throw new u("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new u("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new u("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===o&&(t=a.transpose(t,[0,2,1])),"causal"===i)throw new l("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");var c=a.conv1d(t,e,r,"same"===i?"same":"valid","NWC",s);return null!=n&&(c=It(c,n)),c})}function cr(t,e,n,r,i,o,s){return void 0===r&&(r=[1,1]),void 0===i&&(i="valid"),Object(a.tidy)(function(){if(null==o&&(o="channelsLast"),C(o),3!==ut(t)&&4!==ut(t))throw new u("conv2dWithBias expects input to be of rank 3 or 4, but received "+ut(t)+".");if(3!==ut(e)&&4!==ut(e))throw new u("conv2dWithBias expects kernel to be of rank 3 or 4, but received "+ut(t)+".");var c=ur(t,o);if("causal"===i)throw new l("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return c=a.conv2d(c,e,r,"same"===i?"same":"valid","NHWC",s),null!=n&&(c=It(c,n)),"channelsFirst"===o&&(c=a.transpose(c,[0,3,1,2])),c})}var pr=function(t){function e(e,n){var r=t.call(this,n)||this;if(r.kernel=null,r.bias=null,r.DEFAULT_KERNEL_INITIALIZER="glorotNormal",r.DEFAULT_BIAS_INITIALIZER="zeros",r.rank=e,1!==r.rank&&2!==r.rank)throw new l("Convolution layer for rank other than 1 or 2 ("+r.rank+") is not implemented yet.");if(r.filters=n.filters,r.kernelSize=ar(n.kernelSize,e,"kernelSize"),r.strides=ar(null==n.strides?1:n.strides,e,"strides"),r.padding=null==n.padding?"valid":n.padding,_(r.padding),r.dataFormat=null==n.dataFormat?"channelsLast":n.dataFormat,C(r.dataFormat),r.dilationRate=null==n.dilationRate?1:n.dilationRate,1===r.rank&&Array.isArray(r.dilationRate)&&1!==r.dilationRate.length)throw new u("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(r.dilationRate));if(2===r.rank)if("number"==typeof r.dilationRate)r.dilationRate=[r.dilationRate,r.dilationRate];else if(2!==r.dilationRate.length)throw new u("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(r.dilationRate));return r.activation=qn(n.activation),r.useBias=null==n.useBias||n.useBias,r.kernelInitializer=Tn(n.kernelInitializer||r.DEFAULT_KERNEL_INITIALIZER),r.biasInitializer=Tn(n.biasInitializer||r.DEFAULT_BIAS_INITIALIZER),r.kernelConstraint=Ht(n.kernelConstraint),r.biasConstraint=Ht(n.biasConstraint),r.kernelRegularizer=rr(n.kernelRegularizer),r.biasRegularizer=rr(n.biasRegularizer),r.activityRegularizer=rr(n.activityRegularizer),r}return sr(e,t),e.prototype.build=function(t){t=E(t);var e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new u("The channel dimension of the input should be defined. Found "+t[e]);var n,r=t[e],a=this.kernelSize.concat([r,this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:(n={},n[e]=r,n)}],this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){var e;t=S(t);var r=null==n.bias?null:n.bias.read();if(1===n.rank)e=lr(t,n.kernel.read(),r,n.strides[0],n.padding,n.dataFormat,n.dilationRate);else if(2===n.rank)e=cr(t,n.kernel.read(),r,n.strides,n.padding,n.dataFormat,n.dilationRate);else if(3===n.rank)throw new l("3D convolution is not implemented yet.");return null!=n.activation&&(e=n.activation.apply(e)),e})},e.prototype.computeOutputShape=function(t){t=E(t);for(var e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2),r=0;r<n.length;++r){var a=ir(n[r],this.kernelSize[r],this.padding,this.strides[r],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[r]);e.push(a)}var i=[t[0]];return"channelsLast"===this.dataFormat?(i=i.concat(e)).push(this.filters):(i.push(this.filters),i=i.concat(e)),i},e.prototype.getConfig=function(){var e={rank:this.rank,filters:this.filters,kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Un(this.activation),useBias:this.useBias,kernelInitializer:In(this.kernelInitializer),biasInitializer:In(this.biasInitializer),kernelRegularizer:er(this.kernelRegularizer),biasRegularizer:er(this.biasRegularizer),activityRegularizer:er(this.activityRegularizer),kernelConstraint:qt(this.kernelConstraint),biasConstraint:qt(this.biasConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(ne),fr=function(t){function e(e){return t.call(this,2,e)||this}return sr(e,t),e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.rank,e},e.className="Conv2D",e}(pr);a.serialization.SerializationMap.register(fr);var hr=function(t){function e(e){var n=t.call(this,e)||this;if(n.inputSpec=[new Zt({ndim:4})],"same"!==n.padding&&"valid"!==n.padding)throw new u("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+n.padding);return n}return sr(e,t),e.prototype.build=function(t){if(4!==(t=E(t)).length)throw new u("Input should have rank 4; Received input shape: "+JSON.stringify(t));var e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new u("The channel dimension of the inputs should be defined. Found `None`.");var n,r=t[e],a=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Zt({ndim:4,axes:(n={},n[e]=r,n)})],this.built=!0},e.prototype.call=function(t,e){var n=this;return a.tidy(function(){var e=S(t);if(4!==e.shape.length)throw new u("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);var r,i,o=e.shape,s=o[0];"channelsFirst"===n.dataFormat?(r=2,i=3):(r=1,i=2);var l=o[r],c=o[i],p=n.kernelSize[0],f=n.kernelSize[1],h=n.strides[0],d=n.strides[1],m=[s,or(l,h,p,n.padding),or(c,d,f,n.padding),n.filters];"channelsLast"!==n.dataFormat&&(e=a.transpose(e,[0,2,3,1]));var g=a.conv2dTranspose(e,n.kernel.read(),m,n.strides,n.padding);return"channelsLast"!==n.dataFormat&&(g=a.transpose(g,[0,3,1,2])),null!=n.bias&&(g=It(g,n.bias.read(),n.dataFormat)),null!=n.activation&&(g=n.activation.apply(g)),g})},e.prototype.computeOutputShape=function(t){var e,n,r,a=(t=E(t)).slice();"channelsFirst"===this.dataFormat?(e=1,n=2,r=3):(e=3,n=1,r=2);var i=this.kernelSize[0],o=this.kernelSize[1],s=this.strides[0],u=this.strides[1];return a[e]=this.filters,a[n]=or(a[n],s,i,this.padding),a[r]=or(a[r],u,o,this.padding),a},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.dilationRate,e},e.className="Conv2DTranspose",e}(fr);a.serialization.SerializationMap.register(hr);var dr=function(t){function e(e){return t.call(this,2,e)||this}return sr(e,t),e.className="SeparableConv2D",e}(function(t){function e(e,n){var r=t.call(this,e,n)||this;if(r.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",r.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",r.depthwiseKernel=null,r.pointwiseKernel=null,null==n.filters)throw new u("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=n.kernelInitializer||null!=n.kernelRegularizer||null!=n.kernelConstraint)throw new u("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=n.padding&&"same"!==n.padding&&"valid"!==n.padding)throw new u("SeparableConv"+r.rank+"D supports only padding modes: 'same' and 'valid', but received "+JSON.stringify(n.padding));return r.depthMultiplier=null==n.depthMultiplier?1:n.depthMultiplier,r.depthwiseInitializer=Tn(n.depthwiseInitializer||r.DEFAULT_DEPTHWISE_INITIALIZER),r.depthwiseRegularizer=rr(n.depthwiseRegularizer),r.depthwiseConstraint=Ht(n.depthwiseConstraint),r.pointwiseInitializer=Tn(n.depthwiseInitializer||r.DEFAULT_POINTWISE_INITIALIZER),r.pointwiseRegularizer=rr(n.pointwiseRegularizer),r.pointwiseConstraint=Ht(n.pointwiseConstraint),r}return sr(e,t),e.prototype.build=function(t){if((t=E(t)).length<this.rank+2)throw new u("Inputs to SeparableConv"+this.rank+"D should have rank "+(this.rank+2)+", but received input shape: "+JSON.stringify(t));var e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new u("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));for(var n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),a=[],i=0;i<this.rank;++i)a.push(1);a.push(n*this.depthMultiplier,this.filters);var o;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new Zt({ndim:this.rank+2,axes:(o={},o[e]=n,o)})],this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){var e;if(t=S(t),1===n.rank)throw new l("1D separable convolution is not implemented yet.");return 2===n.rank&&("channelsFirst"===n.dataFormat&&(t=a.transpose(t,[0,2,3,1])),e=a.separableConv2d(t,n.depthwiseKernel.read(),n.pointwiseKernel.read(),n.strides,n.padding,n.dilationRate,"NHWC")),n.useBias&&(e=It(e,n.bias.read(),n.dataFormat)),null!=n.activation&&(e=n.activation.apply(e)),"channelsFirst"===n.dataFormat&&(e=a.transpose(e,[0,3,1,2])),e})},e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=In(this.depthwiseInitializer),e.pointwiseInitializer=In(this.pointwiseInitializer),e.depthwiseRegularizer=er(this.depthwiseRegularizer),e.pointwiseRegularizer=er(this.pointwiseRegularizer),e.depthwiseConstraint=qt(this.depthwiseConstraint),e.pointwiseConstraint=qt(this.pointwiseConstraint),e},e.className="SeparableConv",e}(pr));a.serialization.SerializationMap.register(dr);var mr=function(t){function e(e){var n=t.call(this,1,e)||this;return n.inputSpec=[{ndim:3}],n}return sr(e,t),e.prototype.getConfig=function(){var e=t.prototype.getConfig.call(this);return delete e.rank,delete e.dataFormat,e},e.className="Conv1D",e}(pr);a.serialization.SerializationMap.register(mr);var gr=function(t){function e(e){var n=t.call(this,e)||this;return"number"==typeof e.cropping?n.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?n.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:n.cropping=e.cropping,n.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,n.inputSpec=[{ndim:4}],n}return sr(e,t),e.prototype.computeOutputShape=function(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){return t=S(t),"channelsLast"===n.dataFormat?dt(dt(t,n.cropping[0][0],t.shape[1]-n.cropping[0][0]-n.cropping[0][1],2),n.cropping[1][0],t.shape[2]-n.cropping[1][1]-n.cropping[1][0],3):dt(dt(t,n.cropping[0][0],t.shape[2]-n.cropping[0][0]-n.cropping[0][1],3),n.cropping[1][0],t.shape[3]-n.cropping[1][1]-n.cropping[1][0],4)})},e.prototype.getConfig=function(){var e={cropping:this.cropping,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Cropping2D",e}(ne);a.serialization.SerializationMap.register(gr);var yr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();var vr=function(t){function e(e){var n=t.call(this,e)||this;return n.depthwiseKernel=null,n.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,n.depthwiseInitializer=Tn(e.depthwiseInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.depthwiseConstraint=Ht(e.depthwiseConstraint),n.depthwiseRegularizer=rr(e.depthwiseRegularizer),n}return yr(e,t),e.prototype.build=function(t){if((t=E(t)).length<4)throw new u("Inputs to DepthwiseConv2D should have rank 4. Received input shape: "+JSON.stringify(t)+".");var e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new u("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not ("+t[e]+").");var n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){t=S(t);var e,r,i,o,s,l,c=(e=t,r=n.depthwiseKernel.read(),i=n.strides,o=n.padding,s=n.dataFormat,l=null,void 0===i&&(i=[1,1]),void 0===o&&(o="valid"),Object(a.tidy)(function(){null==s&&(s="channelsLast"),C(s);var t=ur(e,s);if(4!==ut(e))throw new u("Input for depthwiseConv2d is required to be 4-D, but is instead "+ut(e)+"-D");if(4!==ut(r))throw new u("depthwiseKernel is required to be 4-D, but is instead "+ut(r)+"-D");return t=a.depthwiseConv2d(t,r,i,"same"===o?"same":"valid","NHWC",l),"channelsFirst"===s&&(t=a.transpose(t,[0,3,1,2])),t}));return n.useBias&&(c=It(c,n.bias.read(),n.dataFormat)),null!=n.activation&&(c=n.activation.apply(c)),c})},e.prototype.computeOutputShape=function(t){t=E(t);var e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,a=ir(e,this.kernelSize[0],this.padding,this.strides[0]),i=ir(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,a,i]:[t[0],a,i,r]},e.className="DepthwiseConv2D",e}(fr);a.serialization.SerializationMap.register(vr);var br=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),wr=function(t){function e(e){var n=t.call(this,e)||this;if(n.rate=Math.max(Math.min(e.rate,1),0),n.rateScalar=at(n.rate),n.noiseShape=e.noiseShape,n.seed=e.seed,null!=n.seed)throw new l("Non-default seed is not implemented in Dropout layer yet: "+n.seed);return n.supportsMasking=!0,n}return br(e,t),e.prototype.getNoiseShape=function(t){if(null==this.noiseShape)return this.noiseShape;for(var e=t.shape,n=[],r=0;r<this.noiseShape.length;++r)n.push(null==this.noiseShape[r]?e[r]:this.noiseShape[r]);return n},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){n.invokeCallHook(t,e);var r=S(t);if(null!=n.noiseShape&&!a.util.arraysEqual(r.shape,n.noiseShape))throw new l("Non-default noise shape is not implemented in Dropout layer yet: "+JSON.stringify(n.noiseShape));if(0<n.rate&&n.rate<1){var i=null!=e.training&&e.training,o=n.getNoiseShape(r);return function(t,e,n){return void 0===n&&(n=!1),n?t():e()}(function(){return t=r,e=n.rateScalar,i=o,s=n.seed,Object(a.tidy)(function(){if(null!=i&&!a.util.arraysEqual(t.shape,i))throw new l("Non-default noise shape is not implemented yet: "+JSON.stringify(i));if(null!=s)throw new l("seed is not implemented for dropout yet.");var n=a.step(a.add(a.neg(e),a.randomUniform(t.shape,0,1,"float32")));return n=a.mul(a.div(at(1),a.sub(at(1),e)),n),a.mul(t,n)});var t,e,i,s},function(){return r},i)}return t})},e.prototype.getConfig=function(){var e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Dropout",e}(ne);a.serialization.SerializationMap.register(wr);var xr=function(t){function e(e){var n=t.call(this,e)||this;if(n.activation=null,n.useBias=!0,n.kernel=null,n.bias=null,n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){var r=null;null!=e.batchSize&&(r=e.batchSize),n.batchInputShape=[r,e.inputDim]}return n.units=e.units,n.activation=qn(e.activation),null!=e.useBias&&(n.useBias=e.useBias),n.kernelInitializer=Tn(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.biasInitializer=Tn(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelConstraint=Ht(e.kernelConstraint),n.biasConstraint=Ht(e.biasConstraint),n.kernelRegularizer=rr(e.kernelRegularizer),n.biasRegularizer=rr(e.biasRegularizer),n.activityRegularizer=rr(e.activityRegularizer),n.inputSpec=[{minNDim:2}],n}return br(e,t),e.prototype.build=function(t){var e,n=(t=E(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[n,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:(e={},e[-1]=n,e)}],this.built=!0},e.prototype.computeOutputShape=function(t){var e=(t=E(t)).slice();return e[e.length-1]=this.units,e},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){n.invokeCallHook(t,e);var r=Nt(S(t),n.kernel.read());return null!=n.bias&&(r=It(r,n.bias.read())),null!=n.activation&&(r=n.activation.apply(r)),r})},e.prototype.getConfig=function(){var e={units:this.units,activation:Un(this.activation),useBias:this.useBias,kernelInitializer:In(this.kernelInitializer),biasInitializer:In(this.biasInitializer),kernelRegularizer:er(this.kernelRegularizer),biasRegularizer:er(this.biasRegularizer),activityRegularizer:er(this.activityRegularizer),kernelConstraint:qt(this.kernelConstraint),biasConstraint:qt(this.biasConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Dense",e}(ne);a.serialization.SerializationMap.register(xr);var Or=function(t){function e(e){var n=t.call(this,e||{})||this;return n.inputSpec=[{minNDim:3}],n}return br(e,t),e.prototype.computeOutputShape=function(t){for(var e=0,n=(t=E(t)).slice(1);e<n.length;e++){if(null==n[e])throw new u('The shape of the input to "Flatten" is not fully defined (got '+t.slice(1)+'). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.')}return[t[0],U(t,1)]},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){return n.invokeCallHook(t,e),function(t){if(ut(t)<=1)throw new u("batchFlatten requires a minimum rank of 2. Got rank: "+ut(t)+".");var e=[t.shape[0],U(t.shape,1)];return t.reshape(e)}(S(t))})},e.className="Flatten",e}(ne);a.serialization.SerializationMap.register(Or);var Nr=function(t){function e(e){var n=t.call(this,e)||this;return n.supportsMasking=!0,n.activation=qn(e.activation),n}return br(e,t),e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){n.invokeCallHook(t,e);var r=S(t);return n.activation.apply(r)})},e.prototype.getConfig=function(){var e={activation:Un(this.activation)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Activation",e}(ne);a.serialization.SerializationMap.register(Nr);var Sr=function(t){function e(e){var n=t.call(this,e)||this;return n.n=e.n,n.inputSpec=[{ndim:2}],n}return br(e,t),e.prototype.computeOutputShape=function(t){return[t[0],this.n,t[1]]},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){return t=S(t),e=t,r=n.n,Object(a.tidy)(function(){if(2!==e.shape.length)throw new u("repeat() expects a rank-2 tensor, but received a rank-"+e.shape.length+" tensor.");return vt(pt(e,1),[1,r,1])});var e,r})},e.prototype.getConfig=function(){var e={n:this.n},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="RepeatVector",e}(ne);a.serialization.SerializationMap.register(Sr);var Er=function(t){function e(e){var n=t.call(this,e)||this;n.targetShape=e.targetShape;for(var r=0;r<n.targetShape.length;++r)n.isUnknown(n.targetShape[r])&&(n.targetShape[r]=null);return n}return br(e,t),e.prototype.isUnknown=function(t){return t<0||null==t},e.prototype.fixUnknownDimension=function(t,e){for(var n="Total size of new array must be unchanged.",r=e.slice(),a=1,i=null,o=0;o<r.length;++o){var s=r[o];if(this.isUnknown(s)){if(null!==i)throw new u("Can only specifiy one unknown dimension.");i=o}else a*=s}var l=U(t);if(null!==i){if(0===a||l%a!=0)throw new u(n);r[i]=l/a}else if(l!==a)throw new u(n);return r},e.prototype.computeOutputShape=function(t){for(var e=!1,n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){n.invokeCallHook(t,e);var r=S(t),a=ot(r),i=a.slice(0,1).concat(n.fixUnknownDimension(a.slice(1),n.targetShape));return r.reshape(i)})},e.prototype.getConfig=function(){var e={targetShape:this.targetShape},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Reshape",e}(ne);a.serialization.SerializationMap.register(Er);var Ar=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ir=function(t){function e(e){var n=t.call(this,e)||this;if(n.embeddings=null,n.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){var r=null;null!=e.batchSize&&(r=e.batchSize),null==e.inputLength?n.batchInputShape=[r,null]:n.batchInputShape=[r].concat(g(e.inputLength))}return n.inputDim=e.inputDim,n.outputDim=e.outputDim,n.embeddingsInitializer=Tn(e.embeddingsInitializer||n.DEFAULT_EMBEDDINGS_INITIALIZER),n.embeddingsRegularizer=rr(e.embeddingsRegularizer),n.activityRegularizer=rr(e.activityRegularizer),n.embeddingsConstraint=Ht(e.embeddingsConstraint),n.maskZero=e.maskZero,n.inputLength=e.inputLength,n}return Ar(e,t),e.prototype.build=function(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0},e.prototype.computeMask=function(t,e){throw new l("computeMask has not been implemented for Embedding yet")},e.prototype.computeOutputShape=function(t){if(t=E(t),null==this.inputLength)return t.concat([this.outputDim]);var e=g(this.inputLength);if(e.length!==t.length-1)throw new u('"inputLength" is '+this.inputLength+", but received input shape has shape "+t);for(var n=0,r=0;r<e.length;++r){var a=e[r],i=t[r+1];if(null!=a&&null!=i&&a!==i)throw new u('"inputLength" is '+this.inputLength+", but received input shape has shape "+t);null==a&&(e[n]=i),n++}return[t[0]].concat(e,[this.outputDim])},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){n.invokeCallHook(t,e);var r=S(t);return"int32"!==lt(r)&&(r=ct(r,"int32")),St(n.embeddings.read(),r.as1D()).reshape(E(n.computeOutputShape(r.shape)))})},e.prototype.getConfig=function(){var e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:In(this.embeddingsInitializer),embeddingsRegularizer:er(this.embeddingsRegularizer),activityRegularizer:er(this.activityRegularizer),embeddingsConstraint:qt(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="Embedding",e}(ne);a.serialization.SerializationMap.register(Ir);var Tr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),kr=function(t){function e(e){var n=t.call(this,e||{})||this;return n.supportsMasking=!0,n}return Tr(e,t),e.prototype.mergeFunction=function(t){throw new l},e.prototype.computeElementwiseOpOutputShape=function(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;for(var n=t.slice(0,t.length-e.length),r=0;r<e.length;++r){var a=t[t.length-e.length+r],i=e[r];if(null==a||null==i||a<0||i<0)n.push(null);else if(1===a)n.push(i);else if(1===i)n.push(a);else{if(a!==i)throw new u("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(a)}}return n},e.prototype.build=function(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[E(t)]),(t=t).length<2)throw new u("A merge layer should be called on an Array of at least 2 inputs. Got "+t.length+" input(s).");for(var e=[],n=0,r=t;n<r.length;n++){null!=(o=r[n])&&null!==o[0]&&e.push(o[0])}if((e=I(e)).length>1)throw new u("Can not merge tensors with different batch sizes. Got tensors with shapes: "+JSON.stringify(t)+".");for(var a=null==t[0]?null:t[0].slice(1),i=1;i<t.length;++i){var o=null==t[i]?null:t[i].slice(1);a=this.computeElementwiseOpOutputShape(a,o)}var s=t.map(function(t){return t.length});-1===t.indexOf(null)&&1===I(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){if(t=t,n.reshapeRequired){var e=[],r=t.map(function(t){return ut(t)});if(-1===r.indexOf(null)){for(var i=G(r),o=0,s=t;o<s.length;o++){for(var u=ut(h=s[o]),l=0;l<i-u;++l)h=pt(h,1);e.push(h)}return n.mergeFunction(e)}for(var c=!1,p=0,f=t;p<f.length;p++){var h;if(null==(u=ut(h=f[p]))){var d=ot(h),m=d[0],g=d.slice(1).concat([m]),y=h.reshape([m].concat(U(d.slice(1))));y=(y=a.transpose(y,[1,0])).reshape(g),e.push(y),c=!0}else if(u>1){var v=H(1,u).concat([0]);e.push(a.transpose(h,v)),c=!0}else e.push(h)}var b=n.mergeFunction(e),w=ut(b);if(c)if(null==w){var x=ot(b);g=[m=x[x.length-1]].concat(x.slice(0,x.length-1));b=a.transpose(b.reshape([-1,m]),[1,0]).reshape(g)}else if(w>1){v=[w-1].concat(H(0,w-1));b=a.transpose(b,v)}return b}return n.mergeFunction(t)})},e.prototype.computeOutputShape=function(t){var e;e=null==(t=t)[0]?null:t[0].slice(1);for(var n=1;n<t.length;++n){var r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}for(var a=[],i=0,o=t;i<o.length;i++){null!=(r=o[i])&&null!==r[0]&&a.push(r[0])}return e=1===(a=I(a)).length?a.concat(e):[null].concat(e)},e}(ne),Pr=function(t){function e(e){return t.call(this,e)||this}return Tr(e,t),e.prototype.mergeFunction=function(t){return Object(a.tidy)(function(){for(var e=a.zeros(t[0].shape),n=0,r=t;n<r.length;n++){var i=r[n];e=a.add(e,i)}return e})},e.className="Add",e}(kr);a.serialization.SerializationMap.register(Pr);var Rr=function(t){function e(e){return t.call(this,e)||this}return Tr(e,t),e.prototype.mergeFunction=function(t){return Object(a.tidy)(function(){for(var e=a.ones(t[0].shape),n=0,r=t;n<r.length;n++){var i=r[n];e=a.mul(e,i)}return e})},e.className="Multiply",e}(kr);a.serialization.SerializationMap.register(Rr);var Cr=function(t){function e(e){return t.call(this,e)||this}return Tr(e,t),e.prototype.mergeFunction=function(t){return Object(a.tidy)(function(){for(var e=a.zeros(t[0].shape),n=0,r=t;n<r.length;n++){var i=r[n];e=a.add(e,i)}return wt(at(1/t.length),e)})},e.className="Average",e}(kr);a.serialization.SerializationMap.register(Cr);var Dr=function(t){function e(e){return t.call(this,e)||this}return Tr(e,t),e.prototype.mergeFunction=function(t){return Object(a.tidy)(function(){for(var e=t[0],n=1;n<t.length;++n)e=a.maximum(e,t[n]);return e})},e.className="Maximum",e}(kr);a.serialization.SerializationMap.register(Dr);var _r=function(t){function e(e){return t.call(this,e)||this}return Tr(e,t),e.prototype.mergeFunction=function(t){return Object(a.tidy)(function(){for(var e=t[0],n=1;n<t.length;++n)e=a.minimum(e,t[n]);return e})},e.className="Minimum",e}(kr);a.serialization.SerializationMap.register(_r);var Mr=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_AXIS=-1,null==e&&(e={}),n.axis=null==e.axis?n.DEFAULT_AXIS:e.axis,n.supportsMasking=!0,n.reshapeRequired=!1,n}return Tr(e,t),e.prototype.build=function(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new u("A `Concatenate` layer should be called on a list of at least 2 inputs");for(var e=!0,n=0,r=t=t;n<r.length;n++){if(null!=(f=r[n])){e=!1;break}}if(!e){for(var i=[],o=0;o<t.length;++o){var s=t[o].slice();s.splice(this.axis,1);for(var l=!1,c=0,p=i;c<p.length;c++){var f=p[c];if(a.util.arraysEqual(f,s)){l=!0;break}}l||i.push(s)}if(i.length>1)throw new u("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}},e.prototype.mergeFunction=function(t){var e=this;return Object(a.tidy)(function(){return gt(t,e.axis)})},e.prototype.computeOutputShape=function(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new u("A `Concatenate` layer should be called on a list of inputs.");for(var e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis,a=0,i=e.slice(1);a<i.length;a++){var o=i[a];if(null==n[r]||null==o[r]){n[r]=null;break}n[r]+=o[r]}return n},e.className="Concatenate",e}(kr);a.serialization.SerializationMap.register(Mr);var zr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),jr=function(t){function e(e){var n=t.call(this,e)||this;return n.supportsMasking=!0,n.axis=null==e.axis?-1:e.axis,n.momentum=null==e.momentum?.99:e.momentum,n.epsilon=null==e.epsilon?.001:e.epsilon,n.center=null==e.center||e.center,n.scale=null==e.scale||e.scale,n.betaInitializer=Tn(e.betaInitializer||"zeros"),n.gammaInitializer=Tn(e.gammaInitializer||"ones"),n.movingMeanInitializer=Tn(e.movingMeanInitializer||"zeros"),n.movingVarianceInitializer=Tn(e.movingVarianceInitializer||"ones"),n.betaConstraint=Ht(e.betaConstraint),n.gammaConstraint=Ht(e.gammaConstraint),n.betaRegularizer=rr(e.betaRegularizer),n.gammaRegularizer=rr(e.gammaRegularizer),n.stepCount=0,n}return zr(e,t),e.prototype.build=function(t){t=E(t);var e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new u("Axis "+e+" of input tensor should have a defined dimension but the layer received an input with shape "+JSON.stringify(t)+".");this.inputSpec=[new Zt({ndim:t.length,axes:(r={},r[e]=n,r)})];var r,a=[n];this.scale&&(this.gamma=this.addWeight("gamma",a,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",a,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",a,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",a,null,this.movingVarianceInitializer,null,!1),this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){var r=null!=e.training&&e.training,i=S(t),o=ot(i),s=o.length,u=H(0,s),l=n.axis>=0?n.axis:n.axis+s;u.splice(l,1);var c=f(1,s);c[l]=o[l];var p=u.slice();p.sort();var h=!a.util.arraysEqual(p,H(0,s).slice(0,s-1));if(!r)return function(){if(h){var t=n.movingMean.read().reshape(c),e=n.movingVariance.read().reshape(c),r=n.center?n.beta.read().reshape(c):null,a=n.scale?n.gamma.read().reshape(c):null;return At(i,t,e,r,a,n.epsilon)}return At(i,n.movingMean.read(),n.movingVariance.read(),null==n.beta?null:n.beta.read(),null==n.gamma?null:n.gamma.read(),n.epsilon)}();var d=mt(i,n.gamma.read(),n.beta.read(),u,n.epsilon),m=d[0],g=d[1],y=d[2],v=U(u.map(function(t){return i.shape[t]})),b=y.mul(at(v/(v-(1+n.epsilon))));return function(){n.stepCount++;var t=Object(a.movingAverage)(n.movingMean.read(),g,n.momentum,n.stepCount);n.movingMean.write(t);var e=Object(a.movingAverage)(n.movingVariance.read(),b,n.momentum,n.stepCount);n.movingVariance.write(e)}(),m})},e.prototype.getConfig=function(){var e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:In(this.betaInitializer),gammaInitializer:In(this.gammaInitializer),movingMeanInitializer:In(this.movingMeanInitializer),movingVarianceInitializer:In(this.movingVarianceInitializer),betaRegularizer:er(this.betaRegularizer),gammaRegularizer:er(this.gammaRegularizer),betaConstraint:qt(this.betaConstraint),gammaConstraint:qt(this.gammaConstraint)},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="BatchNormalization",e}(ne);a.serialization.SerializationMap.register(jr);var Lr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();var Fr=function(t){function e(e){var n=this;if(null==e&&(e={}),(n=t.call(this,e)||this).dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)n.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)n.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new u("ZeroPadding2D expects padding to be a length-2 array, but received a length-"+e.padding.length+" array.");var r=void 0,a=void 0;if("number"==typeof e.padding[0])r=[e.padding[0],e.padding[0]],a=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new u("ZeroPadding2D expects height padding to be a length-2 array, but received a length-"+e.padding[0].length+" array.");if(r=e.padding[0],2!==e.padding[1].length)throw new u("ZeroPadding2D expects width padding to be a length-2 array, but received a length-"+e.padding[1].length+" array.");a=e.padding[1]}n.padding=[r,a]}return n.inputSpec=[new Zt({ndim:4})],n}return Lr(e,t),e.prototype.computeOutputShape=function(t){var e,n;return t=E(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){return e=S(t),r=n.padding,i=n.dataFormat,Object(a.tidy)(function(){if(4!==ut(e))throw new u("temporalPadding expects input tensor to be 4-D, but received a "+ut(e)+"-D tensor.");if(null==r&&(r=[[1,1],[1,1]]),2!==r.length||2!==r[0].length||2!==r[1].length)throw new u("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==i&&(i="channelsLast"),"channelsLast"!==i&&"channelsFirst"!==i)throw new u("Unknown data format: "+i+". Supported data formats are 'channelsLast' and 'channelsFirst.");var t;return t="channelsFirst"===i?[[0,0],[0,0],r[0],r[1]]:[[0,0],r[0],r[1],[0,0]],a.pad(e,t)});var e,r,i})},e.prototype.getConfig=function(){var e={padding:this.padding,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="ZeroPadding2D",e}(ne);a.serialization.SerializationMap.register(Fr);var Vr=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function Br(t,e,n,r,i,o){return Object(a.tidy)(function(){var s;C(i),k(M,"PoolMode",o),_(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==i&&(i="channelsLast"),null==o&&(o="max"),t=ur(t,i);var u="same"===r?"same":"valid";return s="max"===o?a.maxPool(t,e,n,u):a.avgPool(t,e,n,u),"channelsFirst"===i&&(s=a.transpose(s,[0,3,1,2])),s})}var Ur=function(t){function e(e){var n=this;return null==e.poolSize&&(e.poolSize=2),(n=t.call(this,e)||this).poolSize=[e.poolSize],n.strides=null==e.strides?n.poolSize:[e.strides],n.padding=null==e.padding?"valid":e.padding,_(n.padding),n.inputSpec=[new Zt({ndim:3})],n}return Vr(e,t),e.prototype.computeOutputShape=function(t){var e=ir((t=E(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){n.invokeCallHook(t,e),t=pt(S(t),2);var r=n.poolingFunction(S(t),[n.poolSize[0],1],[n.strides[0],1],n.padding,"channelsLast");return a.squeeze(r,[2])})},e.prototype.getConfig=function(){var e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(ne),Wr=function(t){function e(e){return t.call(this,e)||this}return Vr(e,t),e.prototype.poolingFunction=function(t,e,n,r,a){return C(a),_(r),Br(t,e,n,r,a,"max")},e.className="MaxPooling1D",e}(Ur);a.serialization.SerializationMap.register(Wr);var qr=function(t){function e(e){return t.call(this,e)||this}return Vr(e,t),e.prototype.poolingFunction=function(t,e,n,r,a){return C(a),_(r),Br(t,e,n,r,a,"avg")},e.className="AveragePooling1D",e}(Ur);a.serialization.SerializationMap.register(qr);var Gr=function(t){function e(e){var n=this;return null==e.poolSize&&(e.poolSize=[2,2]),(n=t.call(this,e)||this).poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],n.strides=null==e.strides?n.poolSize:e.strides,n.padding=null==e.padding?"valid":e.padding,n.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,C(n.dataFormat),_(n.padding),n.inputSpec=[new Zt({ndim:4})],n}return Vr(e,t),e.prototype.computeOutputShape=function(t){t=E(t);var e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=ir(e,this.poolSize[0],this.padding,this.strides[0]),n=ir(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){return n.invokeCallHook(t,e),n.poolingFunction(S(t),n.poolSize,n.strides,n.padding,n.dataFormat)})},e.prototype.getConfig=function(){var e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(ne),Hr=function(t){function e(e){return t.call(this,e)||this}return Vr(e,t),e.prototype.poolingFunction=function(t,e,n,r,a){return C(a),_(r),Br(t,e,n,r,a,"max")},e.className="MaxPooling2D",e}(Gr);a.serialization.SerializationMap.register(Hr);var Kr=function(t){function e(e){return t.call(this,e)||this}return Vr(e,t),e.prototype.poolingFunction=function(t,e,n,r,a){return C(a),_(r),Br(t,e,n,r,a,"avg")},e.className="AveragePooling2D",e}(Gr);a.serialization.SerializationMap.register(Kr);var Xr=function(t){function e(e){var n=t.call(this,e)||this;return n.inputSpec=[new Zt({ndim:3})],n}return Vr(e,t),e.prototype.computeOutputShape=function(t){return[t[0],t[2]]},e.prototype.call=function(t,e){throw new l},e}(ne),Yr=function(t){function e(e){return t.call(this,e)||this}return Vr(e,t),e.prototype.call=function(t,e){return Object(a.tidy)(function(){var e=S(t);return a.mean(e,1)})},e.className="GlobalAveragePooling1D",e}(Xr);a.serialization.SerializationMap.register(Yr);var Jr=function(t){function e(e){return t.call(this,e)||this}return Vr(e,t),e.prototype.call=function(t,e){return Object(a.tidy)(function(){var e=S(t);return a.max(e,1)})},e.className="GlobalMaxPooling1D",e}(Xr);a.serialization.SerializationMap.register(Jr);var Qr=function(t){function e(e){var n=t.call(this,e)||this;return n.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,C(n.dataFormat),n.inputSpec=[new Zt({ndim:4})],n}return Vr(e,t),e.prototype.computeOutputShape=function(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]},e.prototype.call=function(t,e){throw new l},e.prototype.getConfig=function(){var e={dataFormat:this.dataFormat},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e}(ne),Zr=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Vr(e,t),e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){var e=S(t);return"channelsLast"===n.dataFormat?a.mean(e,[1,2]):a.mean(e,[2,3])})},e.className="GlobalAveragePooling2D",e}(Qr);a.serialization.SerializationMap.register(Zr);var $r=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Vr(e,t),e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){var e=S(t);return"channelsLast"===n.dataFormat?a.max(e,[1,2]):a.max(e,[2,3])})},e.className="GlobalMaxPooling2D",e}(Qr);a.serialization.SerializationMap.register($r);var ta=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ea=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o};function na(t,e,n,r,i,o,s,c){void 0===r&&(r=!1),void 0===s&&(s=!1);var p=e.shape.length;if(p<3)throw new u("Input should be at least 3D, but is "+p+"D.");var f,h,d=[1,0].concat(H(2,p));if(e=a.transpose(e,d),null!=i)throw new l("The rnn() function of the deeplearn.js backend does not support masking yet.");if(null!=o)throw new l("The rnn() functoin of the deeplearn.js backend does not support constants yet.");s&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),r&&(e=a.reverse(e,0));for(var m=n,g=e.shape[0],y=0;y<g;++y){var v=ft(e,y,1),b=t(v=v.reshape(v.shape.slice(1)),m);h=b[0],f=0===y?h.reshape([1].concat(h.shape)):yt(f,h.reshape([1].concat(h.shape))),m=b[1]}return[h,a.transpose(f,[1,0].concat(H(2,f.shape.length))),m]}var ra=function(t){function e(e){var n,r=t.call(this,e)||this;if(null==e.cell)throw new u("cell property is missing for the constructor of RNN.");if(null==(n=Array.isArray(e.cell)?new pa({cells:e.cell}):e.cell).stateSize)throw new u("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");return r.cell=n,r.returnSequences=null!=e.returnSequences&&e.returnSequences,r.returnState=null!=e.returnState&&e.returnState,r.goBackwards=null!=e.goBackwards&&e.goBackwards,r._stateful=null!=e.stateful&&e.stateful,r.unroll=null!=e.unroll&&e.unroll,r.supportsMasking=!0,r.inputSpec=[new Zt({ndim:3})],r.stateSpec=null,r.states=null,r.numConstants=null,r}return ta(e,t),e.prototype.getStates=function(){return null==this.states?H(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(function(t){return null}):this.states},e.prototype.setStates=function(t){this.states=t},e.prototype.computeOutputShape=function(t){y(t)&&(t=t[0]),t=t;var e=this.cell.stateSize;Array.isArray(e)||(e=[e]);var n,r=e[0];if(n=this.returnSequences?[t[0],t[1],r]:[t[0],r],this.returnState){for(var a=[],i=0,o=e;i<o.length;i++){var s=o[i];a.push([t[0],s])}return[n].concat(a)}return n},e.prototype.computeMask=function(t,e){throw new l("computeMask has not been implemented for RNN yet")},e.prototype.build=function(t){if(null!=this.numConstants)throw new l("Constants support is not implemented in RNN yet.");y(t)&&(t=t[0]),t=t;var e=this.stateful?t[0]:null,n=t[t.length-1];this.inputSpec[0]=new Zt({shape:[e,null,n]});var r,i=[t[0]].concat(t.slice(2));if(this.cell.build(i),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!a.util.arraysEqual(this.stateSpec.map(function(t){return t.shape[t.shape.length-1]}),r))throw new u("An initialState was passed that is not compatible with cell.stateSize. Received stateSpec="+this.stateSpec+"; However cell.stateSize is "+this.cell.stateSize)}else this.stateSpec=r.map(function(t){return new Zt({shape:[null,t]})});if(this.stateful)throw new l("stateful RNN layer is not implemented yet")},e.prototype.resetStates=function(t){var e=this;Object(a.tidy)(function(){if(!e.stateful)throw new o("Cannot call resetState() on an RNN Layer that is not stateful.");var n=e.inputSpec[0].shape[0];if(null==n)throw new u("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==e.states)Array.isArray(e.cell.stateSize)?e.states=e.cell.stateSize.map(function(t){return a.zeros([n,t])}):e.states=[a.zeros([n,e.cell.stateSize])];else if(null==t)Array.isArray(e.cell.stateSize)?e.states=e.cell.stateSize.map(function(t){return a.zeros([n,t])}):e.states[0]=a.zeros([n,e.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==e.states.length)throw new u("Layer "+e.name+" expects "+e.states.length+" state(s), but it received "+t.length+" state value(s). Input received: "+t);for(var r=0;r<e.states.length;++r){var i=t[r],s=Array.isArray(e.cell.stateSize)?e.cell.stateSize[r]:e.cell.stateSize,l=[n,s];if(!a.util.arraysEqual(i.shape,l))throw new u("State "+r+" is incompatible with layer "+e.name+": expected shape="+l+", received shape="+i.shape);e.states[r]=i}}})},e.prototype.standardizeArgs=function(t,e,n){if(Array.isArray(t)){if(null!=e||null!=n)throw new u("When inputs is an array, neither initialState or constants should be provided");null!=this.numConstants&&(n=t.slice(t.length-this.numConstants,t.length),t=t.slice(0,t.length-this.numConstants)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function r(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=r(e),constants:n=r(n)}},e.prototype.apply=function(e,n){var r=null==n?null:n.initialState,a=null==n?null:n.constants;null==n&&(n={});var i=this.standardizeArgs(e,r,a);e=i.inputs,r=i.initialState,a=i.constants;var o=[],s=[];if(null!=r){n.initialState=r,o=o.concat(r),this.stateSpec=[];for(var u=0,l=r;u<l.length;u++){var c=l[u];this.stateSpec.push(new Zt({shape:c.shape}))}s=s.concat(this.stateSpec)}if(null!=a&&(n.constants=a,o=o.concat(a),this.numConstants=a.length),o[0]instanceof J){var p=[e].concat(o),f=this.inputSpec.concat(s),h=this.inputSpec;this.inputSpec=f;var d=t.prototype.apply.call(this,p,n);return this.inputSpec=h,d}return t.prototype.apply.call(this,e,n)},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){var r=null==e?null:e.mask,a=null==e?null:e.training,i=null==e?null:e.initialState;if(t=S(t),null==i){if(n.stateful)throw new l("stateful RNN layer is not implemented yet.");i=n.getInitialState(t)}if(null!=r)throw new l("Masking is not implemented for RNN yet");var o=Array.isArray(n.cell.stateSize)?n.cell.stateSize.length:1;if(i.length!==o)throw new u("RNN Layer has "+o+" state(s) but was passed "+i.length+" initial state(s).");t.shape[1];n.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");var s={training:a},c=na(function(t,e){var r=n.cell.call([t].concat(e),s);return[r[0],r.slice(1)]},t,i,n.goBackwards,null,null,n.unroll),p=c[0],f=c[1],h=c[2];if(n.stateful)throw new l("stateful RNN layer is not implemented yet");var d=n.returnSequences?f:p;return n.returnState?[d].concat(h):d})},e.prototype.getInitialState=function(t){var e=this;return Object(a.tidy)(function(){var n=a.zeros(t.shape);return n=pt(n=a.sum(n,[1,2])),Array.isArray(e.cell.stateSize)?e.cell.stateSize.map(function(t){return t>1?vt(n,[1,t]):n}):e.cell.stateSize>1?[vt(n,[1,e.cell.stateSize])]:[n]})},Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.trainable?this.cell.trainableWeights:[]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){var e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);var n=this.cell.getConfig();e.cell={className:this.cell.getClassName(),config:n};var r=t.prototype.getConfig.call(this);return Object.assign(e,r),e},e.className="RNN",e}(ne);a.serialization.SerializationMap.register(ra);var aa=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ta(e,t),e=ea([Object(a.doc)({heading:"Layers",subheading:"Classes"})],e)}(ne),ia=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=e.units,n.activation=qn(null==e.activation?n.DEFAULT_ACTIVATION:e.activation),n.useBias=null==e.useBias||e.useBias,n.kernelInitializer=Tn(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=Tn(e.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=Tn(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelRegularizer=rr(e.kernelRegularizer),n.recurrentRegularizer=rr(e.recurrentRegularizer),n.biasRegularizer=rr(e.biasRegularizer),n.kernelConstraint=Ht(e.kernelConstraint),n.recurrentConstraint=Ht(e.recurrentConstraint),n.biasConstraint=Ht(e.biasConstraint),n.dropout=q([1,G([0,null==e.dropout?0:e.dropout])]),n.recurrentDropout=q([1,G([0,null==e.recurrentDropout?0:e.recurrentDropout])]),n.stateSize=n.units,n}return ta(e,t),e.prototype.build=function(t){t=E(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){if(2!==(t=t).length)throw new u("SimpleRNNCell expects 2 input Tensors, got "+t.length+".");var e=t[1];if(t=t[0],0!==n.dropout||0!==n.recurrentDropout)throw new l("Dropout is not implemented for SimpleRNNCell yet");var r=Nt(t,n.kernel.read());null!=n.bias&&(r=It(r,n.bias.read()));var i=a.add(r,Nt(e,n.recurrentKernel.read()));return null!=n.activation&&(i=n.activation.apply(i)),[i,i]})},e.prototype.getConfig=function(){var e={units:this.units,activation:Un(this.activation),useBias:this.useBias,kernelInitializer:In(this.kernelInitializer),recurrentInitializer:In(this.recurrentInitializer),biasInitializer:In(this.biasInitializer),kernelRegularizer:er(this.kernelRegularizer),recurrentRegularizer:er(this.recurrentRegularizer),biasRegularizer:er(this.biasRegularizer),activityRegularizer:er(this.activityRegularizer),kernelConstraint:qt(this.kernelConstraint),recurrentConstraint:qt(this.recurrentConstraint),biasConstraint:qt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="SimpleRNNCell",e}(aa);a.serialization.SerializationMap.register(ia);var oa=function(t){function e(e){return e.cell=new ia(e),t.call(this,e)||this}return ta(e,t),e.prototype.call=function(e,n){var r=this;return Object(a.tidy)(function(){var a=null==n?null:n.mask,i=null==n?null:n.training,o=null==n?null:n.initialState;return t.prototype.call.call(r,e,{mask:a,training:i,initialState:o})})},Object.defineProperty(e.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){var e={units:this.units,activation:Un(this.activation),useBias:this.useBias,kernelInitializer:In(this.kernelInitializer),recurrentInitializer:In(this.recurrentInitializer),biasInitializer:In(this.biasInitializer),kernelRegularizer:er(this.kernelRegularizer),recurrentRegularizer:er(this.recurrentRegularizer),biasRegularizer:er(this.biasRegularizer),activityRegularizer:er(this.activityRegularizer),kernelConstraint:qt(this.kernelConstraint),recurrentConstraint:qt(this.recurrentConstraint),biasConstraint:qt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},n=t.prototype.getConfig.call(this);return delete n.cell,Object.assign(e,n),e},e.className="SimpleRNN",e}(ra);a.serialization.SerializationMap.register(oa);var sa=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=e.units,n.activation=qn(void 0===e.activation?n.DEFAULT_ACTIVATION:e.activation),n.recurrentActivation=qn(void 0===e.activation?n.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),n.useBias=null==e.useBias||e.useBias,n.kernelInitializer=Tn(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=Tn(e.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=Tn(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelRegularizer=rr(e.kernelRegularizer),n.recurrentRegularizer=rr(e.recurrentRegularizer),n.biasRegularizer=rr(e.biasRegularizer),n.kernelConstraint=Ht(e.kernelConstraint),n.recurrentConstraint=Ht(e.recurrentConstraint),n.biasConstraint=Ht(e.biasConstraint),n.dropout=q([1,G([0,null==e.dropout?0:e.dropout])]),n.recurrentDropout=q([1,G([0,null==e.recurrentDropout?0:e.recurrentDropout])]),n.implementation=e.implementation,n.stateSize=n.units,n}return ta(e,t),e.prototype.build=function(t){var e=(t=E(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){if(0!==n.dropout||0!==n.recurrentDropout)throw new l("Dropout is not implemented for GRUCell yet");if(2!==(t=t).length)throw new u("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");var e,r,i,o=t[1];if(t=t[0],1===n.implementation){var s=ht(n.kernel.read(),0,n.units),c=ht(n.kernel.read(),n.units,n.units),p=ht(n.kernel.read(),2*n.units,n.units),f=ht(n.recurrentKernel.read(),0,n.units),h=ht(n.recurrentKernel.read(),n.units,n.units),d=ht(n.recurrentKernel.read(),2*n.units,n.units),m=t,g=t,y=Nt(t,s),v=Nt(m,c),b=Nt(g,p);if(n.useBias){var w=ft(n.bias.read(),0,n.units),x=ft(n.bias.read(),n.units,n.units),O=ft(n.bias.read(),2*n.units,n.units);y=It(y,w),v=It(v,x),b=It(b,O)}var N=o,S=o,E=o;e=n.recurrentActivation.apply(a.add(y,Nt(N,f))),r=n.recurrentActivation.apply(a.add(v,Nt(S,h))),i=n.activation.apply(a.add(b,Nt(a.mul(r,E),d)))}else{var A=Nt(t,n.kernel.read());n.useBias&&(A=It(A,n.bias.read()));var I=Nt(o,ht(n.recurrentKernel.read(),0,2*n.units)),T=(y=ht(A,0,n.units),v=ht(A,n.units,n.units),ht(I,0,n.units)),k=ht(I,n.units,n.units);e=n.recurrentActivation.apply(a.add(y,T)),r=n.recurrentActivation.apply(a.add(v,k));b=ht(A,2*n.units,n.units);var P=Nt(a.mul(r,o),ht(n.recurrentKernel.read(),2*n.units,n.units));i=n.activation.apply(a.add(b,P))}var R=a.add(a.mul(e,o),a.mul(xt(at(1),a.neg(e)),i));return[R,R]})},e.prototype.getConfig=function(){var e={units:this.units,activation:Un(this.activation),useBias:this.useBias,kernelInitializer:In(this.kernelInitializer),recurrentInitializer:In(this.recurrentInitializer),biasInitializer:In(this.biasInitializer),kernelRegularizer:er(this.kernelRegularizer),recurrentRegularizer:er(this.recurrentRegularizer),biasRegularizer:er(this.biasRegularizer),activityRegularizer:er(this.activityRegularizer),kernelConstraint:qt(this.kernelConstraint),recurrentConstraint:qt(this.recurrentConstraint),biasConstraint:qt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="GRUCell",e}(aa);a.serialization.SerializationMap.register(sa);var ua=function(t){function e(e){return 0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new sa(e),t.call(this,e)||this}return ta(e,t),e.prototype.call=function(e,n){var r=this;return Object(a.tidy)(function(){var a=null==n?null:n.mask,i=null==n?null:n.training,o=null==n?null:n.initialState;return t.prototype.call.call(r,e,{mask:a,training:i,initialState:o})})},Object.defineProperty(e.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"implementation",{get:function(){return this.cell.implementation},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){var e={units:this.units,activation:Un(this.activation),useBias:this.useBias,kernelInitializer:In(this.kernelInitializer),recurrentInitializer:In(this.recurrentInitializer),biasInitializer:In(this.biasInitializer),kernelRegularizer:er(this.kernelRegularizer),recurrentRegularizer:er(this.recurrentRegularizer),biasRegularizer:er(this.biasRegularizer),activityRegularizer:er(this.activityRegularizer),kernelConstraint:qt(this.kernelConstraint),recurrentConstraint:qt(this.recurrentConstraint),biasConstraint:qt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return delete n.cell,Object.assign(e,n),e},e.fromConfig=function(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)},e.className="GRU",e}(ra);a.serialization.SerializationMap.register(ua);var la=function(t){function e(e){var n=t.call(this,e)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=e.units,n.activation=qn(void 0===e.activation?n.DEFAULT_ACTIVATION:e.activation),n.recurrentActivation=qn(void 0===e.activation?n.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),n.useBias=null==e.useBias||e.useBias,n.kernelInitializer=Tn(e.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=Tn(e.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=Tn(e.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.unitForgetBias=e.unitForgetBias,n.kernelRegularizer=rr(e.kernelRegularizer),n.recurrentRegularizer=rr(e.recurrentRegularizer),n.biasRegularizer=rr(e.biasRegularizer),n.kernelConstraint=Ht(e.kernelConstraint),n.recurrentConstraint=Ht(e.recurrentConstraint),n.biasConstraint=Ht(e.biasConstraint),n.dropout=q([1,G([0,null==e.dropout?0:e.dropout])]),n.recurrentDropout=q([1,G([0,null==e.recurrentDropout?0:e.recurrentDropout])]),n.implementation=e.implementation,n.stateSize=[n.units,n.units],n}return ta(e,t),e.prototype.build=function(t){var e,n,r=(t=E(t))[t.length-1];if(this.kernel=this.addWeight("kernel",[r,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){var a=this.biasInitializer,i=this.units;e=new((n=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ta(e,t),e.prototype.apply=function(t,e){var n=a.apply([i]),r=(new hn).apply([i]),o=a.apply([2*i]);return yt(yt(n,r),o)},e}(pn)).className="CustomInit",n)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,e,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){if(0!==n.dropout||0!==n.recurrentDropout)throw new l("Dropout is not implemented for LSTMCell yet");if(3!==(t=t).length)throw new u("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");var e,r,i,o,s=t[1],c=t[2];if(t=t[0],1===n.implementation){var p=ht(n.kernel.read(),0,n.units),f=ht(n.kernel.read(),n.units,n.units),h=ht(n.kernel.read(),2*n.units,n.units),d=ht(n.kernel.read(),3*n.units,n.units),m=ht(n.recurrentKernel.read(),0,n.units),g=ht(n.recurrentKernel.read(),n.units,n.units),y=ht(n.recurrentKernel.read(),2*n.units,n.units),v=ht(n.recurrentKernel.read(),3*n.units,n.units),b=t,w=t,x=t,O=Nt(t,p),N=Nt(b,f),S=Nt(w,h),E=Nt(x,d);if(n.useBias){var A=ft(n.bias.read(),0,n.units),I=ft(n.bias.read(),n.units,n.units),T=ft(n.bias.read(),2*n.units,n.units),k=ft(n.bias.read(),3*n.units,n.units);O=It(O,A),N=It(N,I),S=It(S,T),E=It(E,k)}var P=s,R=s,C=s,D=s;e=n.recurrentActivation.apply(a.add(O,Nt(P,m))),r=n.recurrentActivation.apply(a.add(N,Nt(R,g))),i=a.add(a.mul(r,c),a.mul(e,n.activation.apply(a.add(S,Nt(C,y))))),o=n.recurrentActivation.apply(a.add(E,Nt(D,v)))}else{var _=Nt(t,n.kernel.read());_=a.add(_,Nt(s,n.recurrentKernel.read())),n.useBias&&(_=It(_,n.bias.read()));var M=ht(_,0,n.units),z=ht(_,n.units,n.units),j=ht(_,2*n.units,n.units),L=ht(_,3*n.units,n.units);e=n.recurrentActivation.apply(M),r=n.recurrentActivation.apply(z),i=a.add(a.mul(r,c),a.mul(e,n.activation.apply(j))),o=n.recurrentActivation.apply(L)}var F=a.mul(o,n.activation.apply(i));return[F,F,i]})},e.prototype.getConfig=function(){var e={units:this.units,activation:Un(this.activation),useBias:this.useBias,kernelInitializer:In(this.kernelInitializer),recurrentInitializer:In(this.recurrentInitializer),biasInitializer:In(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:er(this.kernelRegularizer),recurrentRegularizer:er(this.recurrentRegularizer),biasRegularizer:er(this.biasRegularizer),activityRegularizer:er(this.activityRegularizer),kernelConstraint:qt(this.kernelConstraint),recurrentConstraint:qt(this.recurrentConstraint),biasConstraint:qt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.className="LSTMCell",e}(aa);a.serialization.SerializationMap.register(la);var ca=function(t){function e(e){return 0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new la(e),t.call(this,e)||this}return ta(e,t),e.prototype.call=function(e,n){var r=this;return Object(a.tidy)(function(){var a=null==n?null:n.mask,i=null==n?null:n.training,o=null==n?null:n.initialState;return t.prototype.call.call(r,e,{mask:a,training:i,initialState:o})})},Object.defineProperty(e.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"unitForgetBias",{get:function(){return this.cell.unitForgetBias},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"implementation",{get:function(){return this.cell.implementation},enumerable:!0,configurable:!0}),e.prototype.getConfig=function(){var e={units:this.units,activation:Un(this.activation),useBias:this.useBias,kernelInitializer:In(this.kernelInitializer),recurrentInitializer:In(this.recurrentInitializer),biasInitializer:In(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:er(this.kernelRegularizer),recurrentRegularizer:er(this.recurrentRegularizer),biasRegularizer:er(this.biasRegularizer),activityRegularizer:er(this.activityRegularizer),kernelConstraint:qt(this.kernelConstraint),recurrentConstraint:qt(this.recurrentConstraint),biasConstraint:qt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=t.prototype.getConfig.call(this);return delete n.cell,Object.assign(e,n),e},e.fromConfig=function(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)},e.className="LSTM",e}(ra);a.serialization.SerializationMap.register(ca);var pa=function(t){function e(e){var n=t.call(this,e)||this;return n.cells=e.cells,n}return ta(e,t),Object.defineProperty(e.prototype,"stateSize",{get:function(){for(var t=[],e=0,n=this.cells.slice().reverse();e<n.length;e++){var r=n[e];Array.isArray(r.stateSize)?t.push.apply(t,r.stateSize):t.push(r.stateSize)}return t},enumerable:!0,configurable:!0}),e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){for(var r=(t=t).slice(1),a=[],i=0,o=n.cells.slice().reverse();i<o.length;i++){var s=o[i];Array.isArray(s.stateSize)?a.push(r.splice(0,s.stateSize.length)):a.push(r.splice(0,1))}a.reverse();for(var u,l=[],c=0;c<n.cells.length;++c){s=n.cells[c];r=a[c],u=0===c?[t[0]].concat(r):[u[0]].concat(r),u=s.call(u,e),l.push(u.slice(1))}r=[];for(var p=0,f=l.slice().reverse();p<f.length;p++){var h=f[p];r.push.apply(r,h)}return[u[0]].concat(r)})},e.prototype.build=function(t){var e;y(t)&&(t=t[0]),t=t;for(var n=0,r=this.cells;n<r.length;n++){var a=r[n];a.build(t),e=Array.isArray(a.stateSize)?a.stateSize[0]:a.stateSize,t=[t[0],e]}this.built=!0},e.prototype.getConfig=function(){for(var e=[],n=0,r=this.cells;n<r.length;n++){var a=r[n];e.push({className:this.getClassName(),config:a.getConfig()})}var i={cells:e},o=t.prototype.getConfig.call(this);return Object.assign(i,o),i},e.fromConfig=function(t,e,n){void 0===n&&(n={});for(var r=[],a=0,i=e.cells;a<i.length;a++){var o=i[a];r.push(Kt(o,n))}return new t({cells:r})},Object.defineProperty(e.prototype,"trainableWeights",{get:function(){if(!this.trainable)return[];for(var t=[],e=0,n=this.cells;e<n.length;e++){var r=n[e];t.push.apply(t,r.trainableWeights)}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){for(var t=[],e=0,n=this.cells;e<n.length;e++){var r=n[e];t.push.apply(t,r.nonTrainableWeights)}if(!this.trainable){for(var a=[],i=0,o=this.cells;i<o.length;i++){r=o[i];a.push.apply(a,r.trainableWeights)}return a.concat(t)}return t},enumerable:!0,configurable:!0}),e.prototype.getWeights=function(){for(var t=[],e=0,n=this.cells;e<n.length;e++){var r=n[e];t.push.apply(t,r.weights)}return $(t)},e.prototype.setWeights=function(t){for(var e=[],n=0,r=this.cells;n<r.length;n++)for(var a=r[n],i=a.weights.length,o=t.splice(i),s=0;s<a.weights.length;++s)e.push([a.weights[s],o[s]]);tt(e)},e.className="StackedRNNCells",e}(aa);a.serialization.SerializationMap.register(pa);var fa=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ha=function(t){function e(e){var n=t.call(this,e)||this;return n.layer=e.layer,n}return fa(e,t),e.prototype.build=function(t){this.built=!0},Object.defineProperty(e.prototype,"trainable",{get:function(){return null!=this.layer&&this.layer.trainable},set:function(t){null!=this.layer&&(this.layer.trainable=t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.layer.trainableWeights},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.layer.nonTrainableWeights},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"updates",{get:function(){return this.layer._updates},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"losses",{get:function(){return this.layer.losses},enumerable:!0,configurable:!0}),e.prototype.getWeights=function(){return this.layer.getWeights()},e.prototype.setWeights=function(t){this.layer.setWeights(t)},e.prototype.getConfig=function(){var e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},n=t.prototype.getConfig.call(this);return Object.assign(e,n),e},e.fromConfig=function(t,e,n){void 0===n&&(n={});var r=Kt(e.layer,n);delete e.layer;var a={layer:r};return Object.assign(a,e),new t(a)},e}(ne),da=function(t){function e(e){var n=t.call(this,e)||this;return n.supportsMasking=!0,n}return fa(e,t),e.prototype.build=function(e){if((e=E(e)).length<3)throw new u("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(e));this.inputSpec=[{shape:e}];var n=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(n),this.layer.built=!0),t.prototype.build.call(this,e)},e.prototype.computeOutputShape=function(t){var e=[(t=E(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){return na(function(t,r){return[n.layer.call(t,e),[]]},t=S(t),[],!1,null,null,!1,t.shape[1])[1]})},e.className="TimeDistributed",e}(ha);a.serialization.SerializationMap.register(da);var ma=["sum","mul","concat","ave"];var ga=function(t){function e(e){var n=t.call(this,e)||this;n.forwardLayer=e.layer;var r,a=e.layer.getConfig();if(a.goBackwards=!0!==a.goBackwards,n.backwardLayer=Kt({className:e.layer.getClassName(),config:a}),n.forwardLayer.name="forward_"+n.forwardLayer.name,n.backwardLayer.name="backward_"+n.backwardLayer.name,r=e.mergeMode,k(ma,"BidirectionalMergeMode",r),n.mergeMode=e.mergeMode,e.weights)throw new l("weights support is not implemented for Bidirectional layer yet.");return n._stateful=e.layer.stateful,n.returnSequences=e.layer.returnSequences,n.returnState=e.layer.returnState,n.supportsMasking=!0,n._trainable=!0,n.inputSpec=e.layer.inputSpec,n}return fa(e,t),Object.defineProperty(e.prototype,"trainable",{get:function(){return this._trainable},set:function(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)},enumerable:!0,configurable:!0}),e.prototype.getWeights=function(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())},e.prototype.setWeights=function(t){var e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))},e.prototype.computeOutputShape=function(t){var e,n,r,a=this.forwardLayer.computeOutputShape(t);return Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),a=a,this.returnState?(r=a.slice(1),e=a[0]):e=a[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):m(n)},e.prototype.apply=function(e,n){var r=null;if(null!=n&&(r=n.initialState),Array.isArray(e)&&(r=e.slice(1),e=e[0]),null==r||0===r.length)return t.prototype.apply.call(this,e,n);throw new l("The support for initial states is not implemented for Bidirectional layers yet.")},e.prototype.call=function(t,e){var n=this;return Object(a.tidy)(function(){if(null!=e.mask)throw new l("The support for masking is not implemented for Bidirectional layers yet.");if(null!=e.initialState)throw new l("The support for initial states is not implemented for Bidirectional layers yet.");var r,i,o=n.forwardLayer.call(t,e),s=n.backwardLayer.call(t,e);return n.returnState&&(Array.isArray(o)&&(r=o.slice(1).concat(s.slice(1))),o=o[0],s=s[0]),n.returnSequences&&(s=a.reverse(s,1)),"concat"===n.mergeMode?i=gt([o,s]):"sum"===n.mergeMode?i=a.add(o,s):"ave"===n.mergeMode?i=wt(at(.5),a.add(o,s)):"mul"===n.mergeMode?i=a.mul(o,s):null==n.mergeMode&&(i=[o,s]),n.returnState?null==n.mergeMode?i.concat(r):[i].concat(r):i})},e.prototype.resetStates=function(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()},e.prototype.build=function(t){var e=this;kt(this.forwardLayer.name,function(){e.forwardLayer.build(t)}),kt(this.backwardLayer.name,function(){e.backwardLayer.build(t)}),this.built=!0},Object.defineProperty(e.prototype,"trainableWeights",{get:function(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nonTrainableWeights",{get:function(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)},enumerable:!0,configurable:!0}),e.className="Bidirectional",e}(ha);a.serialization.SerializationMap.register(ga);var ya=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),va=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},ba=function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},wa=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};function xa(t){return ba(this,void 0,void 0,function(){var e;return wa(this,function(n){if("string"==typeof t){if(0===(e=a.io.getLoadHandlers(t)).length)return[2,function(t){return ba(this,void 0,void 0,function(){var e;return wa(this,function(n){switch(n.label){case 0:return[4,fetch(t)];case 1:return[4,n.sent().json()];case 2:if(null==(e=n.sent()).modelTopology)throw new u('Missing field "modelTopology" from model JSON at path'+t);if(null==e.weightsManifest)throw new u('Missing field "weightsManifest" from model JSON at path'+t);return e.pathPrefix=t.substring(0,t.lastIndexOf("/")),[2,function(t,e){return ba(this,void 0,void 0,function(){var n,r,i,o,s,u,l,c,p,f;return wa(this,function(h){switch(h.label){case 0:return null!=(n=t.modelTopology).model_config&&(n=n.model_config),r=Yt(n),i=Kt(r,e),null==t.weightsManifest?[3,2]:[4,a.io.loadWeights(t.weightsManifest,t.pathPrefix,i.weights.map(function(t){return t.originalName}))];case 1:for(o=h.sent(),s={},u=0,l=i.weights;u<l.length;u++)c=l[u],s[c.originalName]=o[c.originalName];p=null,f=!0,i.loadWeights(s,p,f),h.label=2;case 2:return[2,i]}})})}(e)]}})})}(t)];if(e.length>1)throw new u("Found more than one ("+e.length+") load handlers for URL '"+t+"'");t=e[0]}return[2,function(t,e){return ba(this,void 0,void 0,function(){var n,r,i,o;return wa(this,function(s){switch(s.label){case 0:if(null==t.load)throw new u("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return[4,t.load()];case 1:if(n=s.sent(),r=Kt(Yt(n.modelTopology),e),null!=n.weightData){if(null==n.weightSpecs)throw new u("Model artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");i=!1,o=!0,r.loadWeights(a.io.decodeWeights(n.weightData,n.weightSpecs),i,o)}return[2,r]}})})}(t)]})})}var Oa=function(t){function e(e){var n=t.call(this,{inputs:[],outputs:[]})||this;if(e=e||{},n.trainable=!0,n._updatable=!0,n.built=!1,n.name=null!=e.name?e.name:Rt("sequential_"),null!=e.layers)for(var r=0,a=e.layers;r<a.length;r++){var i=a[r];n.add(i)}return n}return ya(e,t),n=e,e.prototype.add=function(t){if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new u("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");var e=ae({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(1!==t.inboundNodes.length)throw new u("A layer added to a Sequential model must not already be connected somewhere else. Model received layer "+t.name+" which has "+t.inboundNodes.length+" pre-existing inbound connections.");if(1!==t.inboundNodes[0].outputTensors.length)throw new u("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,r){if((null==n||null!=r&&r>0)&&(n=e.sourceLayer,r=e.nodeIndex),0===n.inboundNodes.length)return[e];var a=n.inboundNodes[r];if(0===a.inboundLayers.length)return a.inputTensors;for(var i=[],o=0;o<a.inboundLayers.length;o++)for(var s=0,u=t(a.inputTensors[o],a.inboundLayers[o],a.nodeIndices[o]);s<u.length;s++){var l=u[s];-1===i.indexOf(l)&&i.push(l)}return i}(this.outputs[0]),new te({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:f(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(function(t){return t.shape}),outputShapes:this.outputs[0].shape})}else{var n=t.apply(this.outputs[0]);if(Array.isArray(n))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.outputs=[n],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1},e.prototype.pop=function(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{var t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}},e.prototype.call=function(t,e){return null==this.model&&this.build(),this.model.call(t,e)},e.prototype.build=function(t){if(0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new on({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.model.updatable=this.updatable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0},e.prototype.setWeights=function(t){null==this.model&&this.build(),this.model.setWeights(t)},Object.defineProperty(e.prototype,"updatable",{get:function(){return this._updatable},set:function(t){this.built&&(this.model.updatable=t),this._updatable=t},enumerable:!0,configurable:!0}),e.prototype.evaluate=function(t,e,n){if(void 0===n&&(n={}),!this.built)throw new s("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)},e.prototype.predict=function(t,e){return void 0===e&&(e={}),null==this.model&&this.build(),this.model.predict(t,e)},e.prototype.predictOnBatch=function(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)},e.prototype.compile=function(t){this.build(),this.model.compile(t),this.optimizer=this.model.optimizer,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames},e.prototype.fit=function(t,e,n){return void 0===n&&(n={}),ba(this,void 0,void 0,function(){return wa(this,function(r){if(!this.built)throw new s("The model needs to be compiled before being used.");return[2,this.model.fit(t,e,n)]})})},e.fromConfig=function(t,e){var r=new t({});if(!(r instanceof n))throw new u("Sequential.fromConfig called on non-Sequential input: "+r);if(!(e instanceof Array))throw new u("Sequential.fromConfig called without an array of configs");if(null==e[0].className||"Merge"===e[0].className)throw new u("Legacy serialization format not supported yet.");for(var a=0,i=e;a<i.length;a++){var o=Kt(i[a]);r.add(o)}return r},e.prototype.getConfig=function(){for(var t=[],e=0,n=this.layers;e<n.length;e++){var r=n[e];t.push({className:r.getClassName(),config:r.getConfig()})}return t},e.className="Sequential",va([Object(a.doc)({heading:"Models",subheading:"Classes"})],e.prototype,"add",null),va([Object(a.doc)({heading:"Models",subheading:"Classes",configParamIndices:[2]})],e.prototype,"evaluate",null),va([Object(a.doc)({heading:"Models",subheading:"Classes",configParamIndices:[1]})],e.prototype,"predict",null),va([Object(a.doc)({heading:"Models",subheading:"Classes",configParamIndices:[2]})],e.prototype,"fit",null),e=n=va([Object(a.doc)({heading:"Models",subheading:"Classes"})],e);var n}(on);a.serialization.SerializationMap.register(Oa);var Na=function(t,e,n,r){var a,i=arguments.length,o=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(a=t[s])&&(o=(i<3?a(o):i>3?a(e,n,o):a(e,n))||o);return i>3&&o&&Object.defineProperty(e,n,o),o},Sa=function(){function t(){}return t.model=function(t){return new on(t)},t.sequential=function(t){return new Oa(t)},t.loadModel=function(t){return xa(t)},t.input=function(t){return ae(t)},Na([Object(a.doc)({heading:"Models",subheading:"Creation",configParamIndices:[0]})],t,"model",null),Na([Object(a.doc)({heading:"Models",subheading:"Creation",configParamIndices:[0]})],t,"sequential",null),Na([Object(a.doc)({heading:"Models",subheading:"Loading",useDocsFrom:"loadModelInternal"})],t,"loadModel",null),Na([Object(a.doc)({heading:"Models",subheading:"Inputs",useDocsFrom:"Input",configParamIndices:[0]})],t,"input",null),t}(),Ea=function(){function t(){}return t.inputLayer=function(t){return new re(t)},t.elu=function(t){return new Kn(t)},t.leakyReLU=function(t){return new Hn(t)},t.softmax=function(t){return new Yn(t)},t.thresholdedReLU=function(t){return new Xn(t)},t.conv1d=function(t){return new mr(t)},t.conv2d=function(t){return new fr(t)},t.conv2dTranspose=function(t){return new hr(t)},t.separableConv2d=function(t){return new dr(t)},t.cropping2D=function(t){return new gr(t)},t.depthwiseConv2d=function(t){return new vr(t)},t.activation=function(t){return new Nr(t)},t.dense=function(t){return new xr(t)},t.dropout=function(t){return new wr(t)},t.flatten=function(t){return new Or(t)},t.repeatVector=function(t){return new Sr(t)},t.reshape=function(t){return new Er(t)},t.embedding=function(t){return new Ir(t)},t.add=function(t){return new Pr(t)},t.average=function(t){return new Cr(t)},t.concatenate=function(t){return new Mr(t)},t.maximum=function(t){return new Dr(t)},t.minimum=function(t){return new _r(t)},t.multiply=function(t){return new Rr(t)},t.batchNormalization=function(t){return new jr(t)},t.zeroPadding2d=function(t){return new Fr(t)},t.averagePooling1d=function(t){return new qr(t)},t.avgPool1d=function(e){return t.averagePooling1d(e)},t.avgPooling1d=function(e){return t.averagePooling1d(e)},t.averagePooling2d=function(t){return new Kr(t)},t.avgPool2d=function(e){return t.averagePooling2d(e)},t.avgPooling2d=function(e){return t.averagePooling2d(e)},t.globalAveragePooling1d=function(t){return new Yr(t)},t.globalAveragePooling2d=function(t){return new Zr(t)},t.globalMaxPooling1d=function(t){return new Jr(t)},t.globalMaxPooling2d=function(t){return new $r(t)},t.maxPooling1d=function(t){return new Wr(t)},t.maxPooling2d=function(t){return new Hr(t)},t.gru=function(t){return new ua(t)},t.gruCell=function(t){return new sa(t)},t.lstm=function(t){return new ca(t)},t.lstmCell=function(t){return new la(t)},t.simpleRNN=function(t){return new oa(t)},t.simpleRNNCell=function(t){return new ia(t)},t.rnn=function(t){return new ra(t)},t.stackedRNNCells=function(t){return new pa(t)},t.bidirectional=function(t){return new ga(t)},t.timeDistributed=function(t){return new da(t)},t.Layer=ne,t.RNN=ra,t.RNNCell=aa,t.input=Sa.input,Na([Object(a.doc)({heading:"Layers",subheading:"Inputs",namespace:"layers",useDocsFrom:"InputLayer",configParamIndices:[0]})],t,"inputLayer",null),Na([Object(a.doc)({heading:"Layers",subheading:"Advanced Activation",namespace:"layers",useDocsFrom:"ELU",configParamIndices:[0]})],t,"elu",null),Na([Object(a.doc)({heading:"Layers",subheading:"Advanced Activation",namespace:"layers",useDocsFrom:"LeakyReLU",configParamIndices:[0]})],t,"leakyReLU",null),Na([Object(a.doc)({heading:"Layers",subheading:"Advanced Activation",namespace:"layers",useDocsFrom:"Softmax",configParamIndices:[0]})],t,"softmax",null),Na([Object(a.doc)({heading:"Layers",subheading:"Advanced Activation",namespace:"layers",useDocsFrom:"ThresholdedReLU",configParamIndices:[0]})],t,"thresholdedReLU",null),Na([Object(a.doc)({heading:"Layers",subheading:"Convolutional",namespace:"layers",useDocsFrom:"Conv1D",configParamIndices:[0]})],t,"conv1d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Convolutional",namespace:"layers",useDocsFrom:"Conv2D",configParamIndices:[0]})],t,"conv2d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Convolutional",namespace:"layers",useDocsFrom:"Conv2DTranspose",configParamIndices:[0]})],t,"conv2dTranspose",null),Na([Object(a.doc)({heading:"Layers",subheading:"Convolutional",namespace:"layers",useDocsFrom:"SeparableConv2D",configParamIndices:[0]})],t,"separableConv2d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Convolutional",namespace:"layers",useDocsFrom:"Cropping2D",configParamIndices:[0]})],t,"cropping2D",null),Na([Object(a.doc)({heading:"Layers",subheading:"Convolutional",namespace:"layers",useDocsFrom:"DepthwiseConv2D",configParamIndices:[0]})],t,"depthwiseConv2d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Basic",namespace:"layers",useDocsFrom:"Activation",configParamIndices:[0]})],t,"activation",null),Na([Object(a.doc)({heading:"Layers",subheading:"Basic",namespace:"layers",useDocsFrom:"Dense",configParamIndices:[0]})],t,"dense",null),Na([Object(a.doc)({heading:"Layers",subheading:"Basic",namespace:"layers",useDocsFrom:"Dropout",configParamIndices:[0]})],t,"dropout",null),Na([Object(a.doc)({heading:"Layers",subheading:"Basic",namespace:"layers",useDocsFrom:"Flatten",configParamIndices:[0]})],t,"flatten",null),Na([Object(a.doc)({heading:"Layers",subheading:"Basic",namespace:"layers",useDocsFrom:"RepeatVector",configParamIndices:[0]})],t,"repeatVector",null),Na([Object(a.doc)({heading:"Layers",subheading:"Basic",namespace:"layers",useDocsFrom:"Reshape",configParamIndices:[0]})],t,"reshape",null),Na([Object(a.doc)({heading:"Layers",subheading:"Basic",namespace:"layers",useDocsFrom:"Embedding",configParamIndices:[0]})],t,"embedding",null),Na([Object(a.doc)({heading:"Layers",subheading:"Merge",namespace:"layers",useDocsFrom:"Add",configParamIndices:[0]})],t,"add",null),Na([Object(a.doc)({heading:"Layers",subheading:"Merge",namespace:"layers",useDocsFrom:"Average",configParamIndices:[0]})],t,"average",null),Na([Object(a.doc)({heading:"Layers",subheading:"Merge",namespace:"layers",useDocsFrom:"Concatenate",configParamIndices:[0]})],t,"concatenate",null),Na([Object(a.doc)({heading:"Layers",subheading:"Merge",namespace:"layers",useDocsFrom:"Maximum",configParamIndices:[0]})],t,"maximum",null),Na([Object(a.doc)({heading:"Layers",subheading:"Merge",namespace:"layers",useDocsFrom:"Minimum",configParamIndices:[0]})],t,"minimum",null),Na([Object(a.doc)({heading:"Layers",subheading:"Merge",namespace:"layers",useDocsFrom:"Multiply",configParamIndices:[0]})],t,"multiply",null),Na([Object(a.doc)({heading:"Layers",subheading:"Normalization",namespace:"layers",useDocsFrom:"BatchNormalization",configParamIndices:[0]})],t,"batchNormalization",null),Na([Object(a.doc)({heading:"Layers",subheading:"Padding",namespace:"layers",useDocsFrom:"ZeroPadding2D",configParamIndices:[0]})],t,"zeroPadding2d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Pooling",namespace:"layers",useDocsFrom:"AveragePooling1D",configParamIndices:[0]})],t,"averagePooling1d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Pooling",namespace:"layers",useDocsFrom:"AveragePooling2D",configParamIndices:[0]})],t,"averagePooling2d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Pooling",namespace:"layers",useDocsFrom:"GlobalAveragePooling1D",configParamIndices:[0]})],t,"globalAveragePooling1d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Pooling",namespace:"layers",useDocsFrom:"GlobalAveragePooling2D",configParamIndices:[0]})],t,"globalAveragePooling2d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Pooling",namespace:"layers",useDocsFrom:"GlobalMaxPooling1D",configParamIndices:[0]})],t,"globalMaxPooling1d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Pooling",namespace:"layers",useDocsFrom:"GlobalMaxPooling2D",configParamIndices:[0]})],t,"globalMaxPooling2d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Pooling",namespace:"layers",useDocsFrom:"MaxPooling1D",configParamIndices:[0]})],t,"maxPooling1d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Pooling",namespace:"layers",useDocsFrom:"MaxPooling2D",configParamIndices:[0]})],t,"maxPooling2d",null),Na([Object(a.doc)({heading:"Layers",subheading:"Recurrent",namespace:"layers",useDocsFrom:"GRU",configParamIndices:[0]})],t,"gru",null),Na([Object(a.doc)({heading:"Layers",subheading:"Recurrent",namespace:"layers",useDocsFrom:"GRUCell",configParamIndices:[0]})],t,"gruCell",null),Na([Object(a.doc)({heading:"Layers",subheading:"Recurrent",namespace:"layers",useDocsFrom:"LSTM",configParamIndices:[0]})],t,"lstm",null),Na([Object(a.doc)({heading:"Layers",subheading:"Recurrent",namespace:"layers",useDocsFrom:"LSTMCell",configParamIndices:[0]})],t,"lstmCell",null),Na([Object(a.doc)({heading:"Layers",subheading:"Recurrent",namespace:"layers",useDocsFrom:"SimpleRNN",configParamIndices:[0]})],t,"simpleRNN",null),Na([Object(a.doc)({heading:"Layers",subheading:"Recurrent",namespace:"layers",useDocsFrom:"SimpleRNNCell",configParamIndices:[0]})],t,"simpleRNNCell",null),Na([Object(a.doc)({heading:"Layers",subheading:"Recurrent",namespace:"layers",useDocsFrom:"RNN",configParamIndices:[0]})],t,"rnn",null),Na([Object(a.doc)({heading:"Layers",subheading:"Recurrent",namespace:"layers",useDocsFrom:"RNN",configParamIndices:[0]})],t,"stackedRNNCells",null),Na([Object(a.doc)({heading:"Layers",subheading:"Wrapper",namespace:"layers",useDocsFrom:"Bidirectional",configParamIndices:[0]})],t,"bidirectional",null),Na([Object(a.doc)({heading:"Layers",subheading:"Wrapper",namespace:"layers",useDocsFrom:"TimeDistributed",configParamIndices:[0]})],t,"timeDistributed",null),t}(),Aa=function(){function t(){}return t.maxNorm=function(t){return new Ft(t)},t.unitNorm=function(t){return new Vt(t)},t.nonNeg=function(){return new Bt},t.minMaxNorm=function(t){return new Ut(t)},Na([Object(a.doc)({heading:"Constraints",namespace:"constraints",useDocsFrom:"MaxNorm",configParamIndices:[0]})],t,"maxNorm",null),Na([Object(a.doc)({heading:"Constraints",namespace:"constraints",useDocsFrom:"UnitNorm",configParamIndices:[0]})],t,"unitNorm",null),Na([Object(a.doc)({heading:"Constraints",namespace:"constraints",useDocsFrom:"NonNeg"})],t,"nonNeg",null),Na([Object(a.doc)({heading:"Constraints",namespace:"constraints",useDocsFrom:"MinMaxNormConfig",configParamIndices:[0]})],t,"minMaxNorm",null),t}(),Ia=function(){function t(){}return t.zeros=function(){return new fn},t.ones=function(){return new hn},t.constant=function(t){return new dn(t)},t.randomUniform=function(t){return new mn(t)},t.randomNormal=function(t){return new gn(t)},t.truncatedNormal=function(t){return new yn(t)},t.identity=function(t){return new vn(t)},t.varianceScaling=function(t){return new bn(t)},t.glorotUniform=function(t){return new wn(t)},t.glorotNormal=function(t){return new xn(t)},t.heNormal=function(t){return new On(t)},t.leCunNormal=function(t){return new Nn(t)},t.orthogonal=function(t){return new Sn(t)},Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"Zeros"})],t,"zeros",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"Ones"})],t,"ones",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"Constant",configParamIndices:[0]})],t,"constant",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"RandomUniform",configParamIndices:[0]})],t,"randomUniform",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"RandomNormal",configParamIndices:[0]})],t,"randomNormal",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"TruncatedNormal",configParamIndices:[0]})],t,"truncatedNormal",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"Identity",configParamIndices:[0]})],t,"identity",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"VarianceScaling",configParamIndices:[0]})],t,"varianceScaling",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"GlorotUniform",configParamIndices:[0]})],t,"glorotUniform",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"GlorotNormal",configParamIndices:[0]})],t,"glorotNormal",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"HeNormal",configParamIndices:[0]})],t,"heNormal",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"LeCunNormal",configParamIndices:[0]})],t,"leCunNormal",null),Na([Object(a.doc)({heading:"Initializers",namespace:"initializers",useDocsFrom:"Orthogonal",configParamIndices:[0]})],t,"orthogonal",null),t}(),Ta=function(){function t(){}return t.binaryAccuracy=function(t,e){return Re(t,e)},t.binaryCrossentropy=function(t,e){return De(t,e)},t.categoricalAccuracy=function(t,e){return Ce(t,e)},t.categoricalCrossentropy=function(t,e){return Se(t,e)},t.cosineProximity=function(t,e){return ke(t,e)},t.prototype.meanAbsoluteError=function(t,e){return ye(t,e)},t.prototype.meanAbsolutePercentageError=function(t,e){return ve(t,e)},t.prototype.MAPE=function(t,e){return ve(t,e)},t.prototype.mape=function(t,e){return ve(t,e)},t.meanSquaredError=function(t,e){return ge(t,e)},t.MSE=function(t,e){return ge(t,e)},t.mse=function(t,e){return ge(t,e)},Na([Object(a.doc)({heading:"Metrics",namespace:"metrics",useDocsFrom:"meanAbsoluteError"})],t.prototype,"meanAbsoluteError",null),Na([Object(a.doc)({heading:"Metrics",namespace:"metrics",useDocsFrom:"meanAbsolutePercentageError"})],t.prototype,"meanAbsolutePercentageError",null),Na([Object(a.doc)({heading:"Metrics",namespace:"metrics",useDocsFrom:"binaryAccuracy"})],t,"binaryAccuracy",null),Na([Object(a.doc)({heading:"Metrics",namespace:"metrics",useDocsFrom:"binaryCrossentropy"})],t,"binaryCrossentropy",null),Na([Object(a.doc)({heading:"Metrics",namespace:"metrics",useDocsFrom:"categoricalAccuracy"})],t,"categoricalAccuracy",null),Na([Object(a.doc)({heading:"Metrics",namespace:"metrics",useDocsFrom:"categoricalCrossentropy"})],t,"categoricalCrossentropy",null),Na([Object(a.doc)({heading:"Metrics",namespace:"metrics",useDocsFrom:"cosineProximity"})],t,"cosineProximity",null),Na([Object(a.doc)({heading:"Metrics",namespace:"metrics",useDocsFrom:"meanSquaredError"})],t,"meanSquaredError",null),t}(),ka=function(){function t(){}return t.l1l2=function(t){return new $n(t)},t.l1=function(t){return function(t){return new $n({l1:null!=t?t.l1:null,l2:0})}(t)},t.l2=function(t){return function(t){return new $n({l2:null!=t?t.l2:null,l1:0})}(t)},Na([Object(a.doc)({heading:"Regularizers",namespace:"regularizers",useDocsFrom:"L1L2"})],t,"l1l2",null),Na([Object(a.doc)({heading:"Regularizers",namespace:"regularizers",useDocsFrom:"L1L2"})],t,"l1",null),Na([Object(a.doc)({heading:"Regularizers",namespace:"regularizers",useDocsFrom:"L1L2"})],t,"l2",null),t}(),Pa=Sa.model,Ra=Sa.sequential,Ca=Sa.loadModel,Da=Sa.input,_a=Ea,Ma=Aa,za=Ia,ja=Ta,La=ka;n.d(e,"version",function(){return Fa}),n.d(e,"AdadeltaOptimizer",function(){return a.AdadeltaOptimizer}),n.d(e,"AdagradOptimizer",function(){return a.AdagradOptimizer}),n.d(e,"AdamOptimizer",function(){return a.AdamOptimizer}),n.d(e,"AdamaxOptimizer",function(){return a.AdamaxOptimizer}),n.d(e,"MomentumOptimizer",function(){return a.MomentumOptimizer}),n.d(e,"Optimizer",function(){return a.Optimizer}),n.d(e,"RMSPropOptimizer",function(){return a.RMSPropOptimizer}),n.d(e,"SGDOptimizer",function(){return a.SGDOptimizer}),n.d(e,"Tensor",function(){return a.Tensor}),n.d(e,"TensorBuffer",function(){return a.TensorBuffer}),n.d(e,"variable",function(){return a.variable}),n.d(e,"Variable",function(){return a.Variable}),n.d(e,"Rank",function(){return a.Rank}),n.d(e,"Reduction",function(){return a.Reduction}),n.d(e,"ENV",function(){return a.ENV}),n.d(e,"Environment",function(){return a.Environment}),n.d(e,"setBackend",function(){return a.setBackend}),n.d(e,"getBackend",function(){return a.getBackend}),n.d(e,"disposeVariables",function(){return a.disposeVariables}),n.d(e,"memory",function(){return a.memory}),n.d(e,"version_core",function(){return a.version_core}),n.d(e,"doc",function(){return a.doc}),n.d(e,"nextFrame",function(){return a.nextFrame}),n.d(e,"environment",function(){return a.environment}),n.d(e,"io",function(){return a.io}),n.d(e,"serialization",function(){return a.serialization}),n.d(e,"test_util",function(){return a.test_util}),n.d(e,"util",function(){return a.util}),n.d(e,"webgl",function(){return a.webgl}),n.d(e,"batchNormalization",function(){return a.batchNormalization}),n.d(e,"batchNormalization2d",function(){return a.batchNormalization2d}),n.d(e,"batchNormalization3d",function(){return a.batchNormalization3d}),n.d(e,"batchNormalization4d",function(){return a.batchNormalization4d}),n.d(e,"concat",function(){return a.concat}),n.d(e,"concat1d",function(){return a.concat1d}),n.d(e,"concat2d",function(){return a.concat2d}),n.d(e,"concat3d",function(){return a.concat3d}),n.d(e,"concat4d",function(){return a.concat4d}),n.d(e,"conv1d",function(){return a.conv1d}),n.d(e,"conv2d",function(){return a.conv2d}),n.d(e,"conv2dTranspose",function(){return a.conv2dTranspose}),n.d(e,"depthwiseConv2d",function(){return a.depthwiseConv2d}),n.d(e,"separableConv2d",function(){return a.separableConv2d}),n.d(e,"matMul",function(){return a.matMul}),n.d(e,"matrixTimesVector",function(){return a.matrixTimesVector}),n.d(e,"outerProduct",function(){return a.outerProduct}),n.d(e,"vectorTimesMatrix",function(){return a.vectorTimesMatrix}),n.d(e,"avgPool",function(){return a.avgPool}),n.d(e,"maxPool",function(){return a.maxPool}),n.d(e,"transpose",function(){return a.transpose}),n.d(e,"reverse",function(){return a.reverse}),n.d(e,"reverse1d",function(){return a.reverse1d}),n.d(e,"reverse2d",function(){return a.reverse2d}),n.d(e,"reverse3d",function(){return a.reverse3d}),n.d(e,"reverse4d",function(){return a.reverse4d}),n.d(e,"slice",function(){return a.slice}),n.d(e,"slice1d",function(){return a.slice1d}),n.d(e,"slice2d",function(){return a.slice2d}),n.d(e,"slice3d",function(){return a.slice3d}),n.d(e,"slice4d",function(){return a.slice4d}),n.d(e,"stridedSlice",function(){return a.stridedSlice}),n.d(e,"argMax",function(){return a.argMax}),n.d(e,"argMin",function(){return a.argMin}),n.d(e,"logSumExp",function(){return a.logSumExp}),n.d(e,"max",function(){return a.max}),n.d(e,"mean",function(){return a.mean}),n.d(e,"min",function(){return a.min}),n.d(e,"moments",function(){return a.moments}),n.d(e,"sum",function(){return a.sum}),n.d(e,"unsortedSegmentSum",function(){return a.unsortedSegmentSum}),n.d(e,"equal",function(){return a.equal}),n.d(e,"equalStrict",function(){return a.equalStrict}),n.d(e,"greater",function(){return a.greater}),n.d(e,"greaterStrict",function(){return a.greaterStrict}),n.d(e,"greaterEqual",function(){return a.greaterEqual}),n.d(e,"greaterEqualStrict",function(){return a.greaterEqualStrict}),n.d(e,"less",function(){return a.less}),n.d(e,"lessStrict",function(){return a.lessStrict}),n.d(e,"lessEqual",function(){return a.lessEqual}),n.d(e,"lessEqualStrict",function(){return a.lessEqualStrict}),n.d(e,"notEqual",function(){return a.notEqual}),n.d(e,"notEqualStrict",function(){return a.notEqualStrict}),n.d(e,"logicalNot",function(){return a.logicalNot}),n.d(e,"logicalAnd",function(){return a.logicalAnd}),n.d(e,"logicalOr",function(){return a.logicalOr}),n.d(e,"logicalXor",function(){return a.logicalXor}),n.d(e,"where",function(){return a.where}),n.d(e,"abs",function(){return a.abs}),n.d(e,"acos",function(){return a.acos}),n.d(e,"acosh",function(){return a.acosh}),n.d(e,"asin",function(){return a.asin}),n.d(e,"asinh",function(){return a.asinh}),n.d(e,"atan",function(){return a.atan}),n.d(e,"atanh",function(){return a.atanh}),n.d(e,"ceil",function(){return a.ceil}),n.d(e,"clipByValue",function(){return a.clipByValue}),n.d(e,"cos",function(){return a.cos}),n.d(e,"cosh",function(){return a.cosh}),n.d(e,"elu",function(){return a.elu}),n.d(e,"exp",function(){return a.exp}),n.d(e,"expm1",function(){return a.expm1}),n.d(e,"floor",function(){return a.floor}),n.d(e,"sign",function(){return a.sign}),n.d(e,"leakyRelu",function(){return a.leakyRelu}),n.d(e,"log",function(){return a.log}),n.d(e,"log1p",function(){return a.log1p}),n.d(e,"logSigmoid",function(){return a.logSigmoid}),n.d(e,"neg",function(){return a.neg}),n.d(e,"prelu",function(){return a.prelu}),n.d(e,"relu",function(){return a.relu}),n.d(e,"reciprocal",function(){return a.reciprocal}),n.d(e,"round",function(){return a.round}),n.d(e,"selu",function(){return a.selu}),n.d(e,"sigmoid",function(){return a.sigmoid}),n.d(e,"sin",function(){return a.sin}),n.d(e,"sinh",function(){return a.sinh}),n.d(e,"softplus",function(){return a.softplus}),n.d(e,"sqrt",function(){return a.sqrt}),n.d(e,"rsqrt",function(){return a.rsqrt}),n.d(e,"square",function(){return a.square}),n.d(e,"step",function(){return a.step}),n.d(e,"tan",function(){return a.tan}),n.d(e,"tanh",function(){return a.tanh}),n.d(e,"erf",function(){return a.erf}),n.d(e,"add",function(){return a.add}),n.d(e,"addStrict",function(){return a.addStrict}),n.d(e,"atan2",function(){return a.atan2}),n.d(e,"div",function(){return a.div}),n.d(e,"divStrict",function(){return a.divStrict}),n.d(e,"maximum",function(){return a.maximum}),n.d(e,"maximumStrict",function(){return a.maximumStrict}),n.d(e,"minimum",function(){return a.minimum}),n.d(e,"minimumStrict",function(){return a.minimumStrict}),n.d(e,"mod",function(){return a.mod}),n.d(e,"modStrict",function(){return a.modStrict}),n.d(e,"mul",function(){return a.mul}),n.d(e,"mulStrict",function(){return a.mulStrict}),n.d(e,"pow",function(){return a.pow}),n.d(e,"powStrict",function(){return a.powStrict}),n.d(e,"sub",function(){return a.sub}),n.d(e,"subStrict",function(){return a.subStrict}),n.d(e,"squaredDifference",function(){return a.squaredDifference}),n.d(e,"squaredDifferenceStrict",function(){return a.squaredDifferenceStrict}),n.d(e,"norm",function(){return a.norm}),n.d(e,"cast",function(){return a.cast}),n.d(e,"clone",function(){return a.clone}),n.d(e,"fromPixels",function(){return a.fromPixels}),n.d(e,"toPixels",function(){return a.toPixels}),n.d(e,"ones",function(){return a.ones}),n.d(e,"onesLike",function(){return a.onesLike}),n.d(e,"zeros",function(){return a.zeros}),n.d(e,"zerosLike",function(){return a.zerosLike}),n.d(e,"eye",function(){return a.eye}),n.d(e,"rand",function(){return a.rand}),n.d(e,"randomNormal",function(){return a.randomNormal}),n.d(e,"truncatedNormal",function(){return a.truncatedNormal}),n.d(e,"randomUniform",function(){return a.randomUniform}),n.d(e,"multinomial",function(){return a.multinomial}),n.d(e,"reshape",function(){return a.reshape}),n.d(e,"squeeze",function(){return a.squeeze}),n.d(e,"tile",function(){return a.tile}),n.d(e,"gather",function(){return a.gather}),n.d(e,"oneHot",function(){return a.oneHot}),n.d(e,"linspace",function(){return a.linspace}),n.d(e,"range",function(){return a.range}),n.d(e,"buffer",function(){return a.buffer}),n.d(e,"fill",function(){return a.fill}),n.d(e,"tensor",function(){return a.tensor}),n.d(e,"scalar",function(){return a.scalar}),n.d(e,"tensor1d",function(){return a.tensor1d}),n.d(e,"tensor2d",function(){return a.tensor2d}),n.d(e,"tensor3d",function(){return a.tensor3d}),n.d(e,"tensor4d",function(){return a.tensor4d}),n.d(e,"print",function(){return a.print}),n.d(e,"expandDims",function(){return a.expandDims}),n.d(e,"stack",function(){return a.stack}),n.d(e,"unstack",function(){return a.unstack}),n.d(e,"split",function(){return a.split}),n.d(e,"cumsum",function(){return a.cumsum}),n.d(e,"pad",function(){return a.pad}),n.d(e,"pad1d",function(){return a.pad1d}),n.d(e,"pad2d",function(){return a.pad2d}),n.d(e,"pad3d",function(){return a.pad3d}),n.d(e,"pad4d",function(){return a.pad4d}),n.d(e,"movingAverage",function(){return a.movingAverage}),n.d(e,"basicLSTMCell",function(){return a.basicLSTMCell}),n.d(e,"multiRNNCell",function(){return a.multiRNNCell}),n.d(e,"softmax",function(){return a.softmax}),n.d(e,"localResponseNormalization",function(){return a.localResponseNormalization}),n.d(e,"linalg",function(){return a.linalg}),n.d(e,"operation",function(){return a.operation}),n.d(e,"losses",function(){return a.losses}),n.d(e,"image",function(){return a.image}),n.d(e,"train",function(){return a.train}),n.d(e,"tidy",function(){return a.tidy}),n.d(e,"keep",function(){return a.keep}),n.d(e,"dispose",function(){return a.dispose}),n.d(e,"time",function(){return a.time}),n.d(e,"grad",function(){return a.grad}),n.d(e,"valueAndGrad",function(){return a.valueAndGrad}),n.d(e,"grads",function(){return a.grads}),n.d(e,"valueAndGrads",function(){return a.valueAndGrads}),n.d(e,"variableGrads",function(){return a.variableGrads}),n.d(e,"customGrad",function(){return a.customGrad}),n.d(e,"Callback",function(){return ce}),n.d(e,"CallbackList",function(){return pe}),n.d(e,"CustomCallback",function(){return me}),n.d(e,"Model",function(){return on}),n.d(e,"RNN",function(){return ra}),n.d(e,"Sequential",function(){return Oa}),n.d(e,"SymbolicTensor",function(){return J}),n.d(e,"version_layers",function(){return"0.6.1"}),n.d(e,"model",function(){return Pa}),n.d(e,"sequential",function(){return Ra}),n.d(e,"loadModel",function(){return Ca}),n.d(e,"input",function(){return Da}),n.d(e,"layers",function(){return _a}),n.d(e,"constraints",function(){return Ma}),n.d(e,"initializers",function(){return za}),n.d(e,"metrics",function(){return ja}),n.d(e,"regularizers",function(){return La});var Fa={"tfjs-core":a.version_core,"tfjs-layers":"0.6.1",tfjs:"0.11.1"}},function(t,e,n){"use strict";function r(t){if(this.size=0|t,this.size<=1||0!=(this.size&this.size-1))throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var e=new Array(2*this.size),n=0;n<e.length;n+=2){const t=Math.PI*n/this.size;e[n]=Math.cos(t),e[n+1]=-Math.sin(t)}this.table=e;for(var r=0,a=1;this.size>a;a<<=1)r++;this._width=r%2==0?r-1:r,this._bitrev=new Array(1<<this._width);for(var i=0;i<this._bitrev.length;i++){this._bitrev[i]=0;for(var o=0;o<this._width;o+=2){var s=this._width-o-2;this._bitrev[i]|=(i>>>o&3)<<s}}this._out=null,this._data=null,this._inv=0}t.exports=r,r.prototype.fromComplexArray=function(t,e){for(var n=e||new Array(t.length>>>1),r=0;r<t.length;r+=2)n[r>>>1]=t[r];return n},r.prototype.createComplexArray=function(){const t=new Array(this._csize);for(var e=0;e<t.length;e++)t[e]=0;return t},r.prototype.toComplexArray=function(t,e){for(var n=e||this.createComplexArray(),r=0;r<n.length;r+=2)n[r]=t[r>>>1],n[r+1]=0;return n},r.prototype.completeSpectrum=function(t){for(var e=this._csize,n=e>>>1,r=2;r<n;r+=2)t[e-r]=t[r],t[e-r+1]=-t[r+1]},r.prototype.transform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._transform4(),this._out=null,this._data=null},r.prototype.realTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._realTransform4(),this._out=null,this._data=null},r.prototype.inverseTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=1,this._transform4();for(var n=0;n<t.length;n++)t[n]/=this.size;this._out=null,this._data=null},r.prototype._transform4=function(){var t,e,n=this._out,r=this._csize,a=1<<this._width,i=r/a<<1,o=this._bitrev;if(4===i)for(t=0,e=0;t<r;t+=i,e++){const n=o[e];this._singleTransform2(t,n,a)}else for(t=0,e=0;t<r;t+=i,e++){const n=o[e];this._singleTransform4(t,n,a)}var s=this._inv?-1:1,u=this.table;for(a>>=2;a>=2;a>>=2){var l=(i=r/a<<1)>>>2;for(t=0;t<r;t+=i)for(var c=t+l,p=t,f=0;p<c;p+=2,f+=a){const t=p,e=t+l,r=e+l,a=r+l,i=n[t],o=n[t+1],c=n[e],h=n[e+1],d=n[r],m=n[r+1],g=n[a],y=n[a+1],v=i,b=o,w=u[f],x=s*u[f+1],O=c*w-h*x,N=c*x+h*w,S=u[2*f],E=s*u[2*f+1],A=d*S-m*E,I=d*E+m*S,T=u[3*f],k=s*u[3*f+1],P=g*T-y*k,R=g*k+y*T,C=v+A,D=b+I,_=v-A,M=b-I,z=O+P,j=N+R,L=s*(O-P),F=s*(N-R),V=C+z,B=D+j,U=C-z,W=D-j,q=_+F,G=M-L,H=_-F,K=M+L;n[t]=V,n[t+1]=B,n[e]=q,n[e+1]=G,n[r]=U,n[r+1]=W,n[a]=H,n[a+1]=K}}},r.prototype._singleTransform2=function(t,e,n){const r=this._out,a=this._data,i=a[e],o=a[e+1],s=a[e+n],u=a[e+n+1],l=i+s,c=o+u,p=i-s,f=o-u;r[t]=l,r[t+1]=c,r[t+2]=p,r[t+3]=f},r.prototype._singleTransform4=function(t,e,n){const r=this._out,a=this._data,i=this._inv?-1:1,o=2*n,s=3*n,u=a[e],l=a[e+1],c=a[e+n],p=a[e+n+1],f=a[e+o],h=a[e+o+1],d=a[e+s],m=a[e+s+1],g=u+f,y=l+h,v=u-f,b=l-h,w=c+d,x=p+m,O=i*(c-d),N=i*(p-m),S=g+w,E=y+x,A=v+N,I=b-O,T=g-w,k=y-x,P=v-N,R=b+O;r[t]=S,r[t+1]=E,r[t+2]=A,r[t+3]=I,r[t+4]=T,r[t+5]=k,r[t+6]=P,r[t+7]=R},r.prototype._realTransform4=function(){var t,e,n=this._out,r=this._csize,a=1<<this._width,i=r/a<<1,o=this._bitrev;if(4===i)for(t=0,e=0;t<r;t+=i,e++){const n=o[e];this._singleRealTransform2(t,n>>>1,a>>>1)}else for(t=0,e=0;t<r;t+=i,e++){const n=o[e];this._singleRealTransform4(t,n>>>1,a>>>1)}var s=this._inv?-1:1,u=this.table;for(a>>=2;a>=2;a>>=2){var l=(i=r/a<<1)>>>1,c=l>>>1,p=c>>>1;for(t=0;t<r;t+=i)for(var f=0,h=0;f<=p;f+=2,h+=a){var d=t+f,m=d+c,g=m+c,y=g+c,v=n[d],b=n[d+1],w=n[m],x=n[m+1],O=n[g],N=n[g+1],S=n[y],E=n[y+1],A=v,I=b,T=u[h],k=s*u[h+1],P=w*T-x*k,R=w*k+x*T,C=u[2*h],D=s*u[2*h+1],_=O*C-N*D,M=O*D+N*C,z=u[3*h],j=s*u[3*h+1],L=S*z-E*j,F=S*j+E*z,V=A+_,B=I+M,U=A-_,W=I-M,q=P+L,G=R+F,H=s*(P-L),K=s*(R-F),X=V+q,Y=B+G,J=U+K,Q=W-H;if(n[d]=X,n[d+1]=Y,n[m]=J,n[m+1]=Q,0!==f){if(f!==p){var Z=U+-s*K,$=-W+-s*H,tt=V+-s*q,et=-B- -s*G,nt=t+c-f,rt=t+l-f;n[nt]=Z,n[nt+1]=$,n[rt]=tt,n[rt+1]=et}}else{var at=V-q,it=B-G;n[g]=at,n[g+1]=it}}}},r.prototype._singleRealTransform2=function(t,e,n){const r=this._out,a=this._data,i=a[e],o=a[e+n],s=i+o,u=i-o;r[t]=s,r[t+1]=0,r[t+2]=u,r[t+3]=0},r.prototype._singleRealTransform4=function(t,e,n){const r=this._out,a=this._data,i=this._inv?-1:1,o=2*n,s=3*n,u=a[e],l=a[e+n],c=a[e+o],p=a[e+s],f=u+c,h=u-c,d=l+p,m=i*(l-p),g=f+d,y=h,v=-m,b=f-d,w=h,x=m;r[t]=g,r[t+1]=0,r[t+2]=y,r[t+3]=v,r[t+4]=b,r[t+5]=0,r[t+6]=w,r[t+7]=x}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(36);function a(t,e){return[t.map(t=>I(w(t),e)),t[0].length-1]}function i(t,e){const n=e.nFft||2048,r=e.winLength||n,a=e.hopLength||Math.floor(r/4);let i=m(r);i=l(i,n);const o=f(t=p(t,Math.floor(n/2)),n,a),s=[],c=o.length,h=n+2;for(let t=0;t<c;t++){const e=new Float32Array(h);s[t]=e}for(let t=0;t<c;t++){const e=d(u(o[t],i));s[t].set(e.slice(0,h))}return s}function o(t,e){const n=[];for(let r=0;r<t.length;r++)n[r]=s(t[r],e);return n}function s(t,e){if(t.length!=e[0].length)throw new Error("Each entry in filterbank should have dimensions "+`matching FFT. |mags| = ${t.length}, `+`|filterbank[0]| = ${e[0].length}.`);let n=new Float32Array(e.length);for(let r=0;r<e.length;r++){const a=u(t,e[r]);n[r]=y(a)}return n}function u(t,e){if(t.length!=e.length)return void console.error(`Buffer length ${t.length} != window length ${e.length}.`);let n=new Float32Array(t.length);for(let r=0;r<t.length;r++)n[r]=e[r]*t[r];return n}function l(t,e){if(t.length>e)throw new Error("Data is longer than length.");const n=Math.floor((e-t.length)/2);return c(t,[n,e-t.length-n])}function c(t,e){let n,r;"object"==typeof e?[n,r]=e:n=r=e;const a=new Float32Array(t.length+n+r);return a.set(t,n),a}function p(t,e){const n=c(t,e);for(let t=0;t<e;t++)n[t]=n[2*e-t],n[n.length-t-1]=n[n.length-2*e+t-1];return n}function f(t,e,n){const r=Math.floor((t.length-e)/n)+1;let a=v(r).map(t=>new Float32Array(e));for(let i=0;i<r;i++){const r=i*n,o=t.slice(r,r+e);a[i].set(o),o.length}return a}function h(t){const e=t.fMin||0,n=t.fMax||t.sampleRate/2,r=t.nMels||128,a=t.nFft||2048,i=N(t.sampleRate,a),o=S(r+2,e,n),s=E(o),u=A(o,i),l=u[0].length,c=[];for(let t=0;t<r;t++){c[t]=new Float32Array(l);for(let e=0;e<u[t].length;e++){const n=-u[t][e]/s[t],r=u[t+2][e]/s[t+1],a=Math.max(0,Math.min(n,r));c[t][e]=a}}for(let t=0;t<c.length;t++){const e=2/(o[2+t]-o[t]);c[t]=c[t].map(t=>t*e)}return c}function d(t){const e=new r(t.length),n=e.createComplexArray(),a=e.toComplexArray(t);return e.transform(n,a),n}function m(t){let e=new Float32Array(t);for(let n=0;n<t;n++)e[n]=.5*(1-Math.cos(2*Math.PI*n/(t-1)));return e}e.magSpectrogram=a,e.stft=i,e.spectrogram=function(t,e){e.power||(e.power=1);const n=i(t,e),[r,o]=a(n,e.power);return r},e.melSpectrogram=function(t,e){e.power||(e.power=2);const n=i(t,e),[r,s]=a(n,e.power);return e.nFft=s,o(r,h(e))},e.applyWholeFilterbank=o,e.applyFilterbank=s,e.applyWindow=u,e.padCenterToLength=l,e.padConstant=c,e.padReflect=p,e.frame=f,e.createMelFilterbank=h,e.fft=d,e.hannWindow=m,e.array=function(t){const e=new Float32Array(t.length);return e.set(t),e};const g=-10;function y(t){return t.reduce(function(t,e){return t+e})}function v(t){let e=[];for(let n=0;n<t;n++)e.push(n);return e}function b(t,e,n){const r=(e-t)/(n-1);let a=new Float32Array(n);for(let e=0;e<n;e++)a[e]=t+r*e;return a}function w(t){let e=new Float32Array(t.length/2);for(let n=0;n<t.length/2;n++)e[n]=Math.sqrt(t[2*n]*t[2*n]+t[2*n+1]*t[2*n+1]);return e}function x(t){return 1125*Math.log(1+t/700)}function O(t){return 700*(Math.exp(t/1125)-1)}function N(t,e){return b(0,t/2,Math.floor(1+e/2))}function S(t,e,n){return b(x(e),x(n),t).map(t=>O(t))}function E(t){const e=new Float32Array(t.length-1);for(let n=0;n<t.length;n++)e[n]=t[n+1]-t[n];return e}function A(t,e){const n=[];for(let r=0;r<t.length;r++)n[r]=new Float32Array(e.length);for(let r=0;r<t.length;r++)for(let a=0;a<e.length;a++)n[r][a]=t[r]-e[a];return n}function I(t,e){return t.map(t=>Math.pow(t,e))}function T(t){return t.reduce((t,e)=>Math.max(t,e))}e.logGtZero=function(t){const e=Math.exp(g);return Math.log(t+e)},e.sum=y,e.range=v,e.linearSpace=b,e.mag=w,e.powerToDb=function(t,e=1e-10,n=1,r=80){const a=t.length,i=t[0].length,o=[];for(let t=0;t<a;t++)o[t]=new Float32Array(i);for(let r=0;r<a;r++)for(let a=0;a<i;a++){const i=t[r][a];let s=10*Math.log10(Math.max(e,i));s-=10*Math.log10(Math.max(e,n)),o[r][a]=s}if(r){if(r<0)throw new Error("topDb must be non-negative.");for(let t=0;t<a;t++){const e=T(o[t]);for(let n=0;n<i;n++)o[t][n]=Math.max(o[t][n],e-r)}}return o},e.hzToMel=x,e.melToHz=O,e.flatten2D=function(t){const e=t[0].length*t.length,n=new Float32Array(e),r=t[0].length,a=t.length;for(let e=0;e<a;e++)for(let i=0;i<r;i++)n[i*a+e]=t[e][i];return n},e.calculateFftFreqs=N,e.calculateMelFreqs=S,e.internalDiff=E,e.outerSubtract=A,e.pow=I,e.max=T},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.displayPrediction=function(t,e){let n,r,a=document.getElementById("results-table-body"),i=document.createElement("tbody");i.setAttribute("id","results-table-body");for(let a=0;a<t.length;a+=1)(r=(n=i.insertRow(-1)).insertCell(0)).innerHTML=t[a].toString(),(r=n.insertCell(1)).innerHTML=e[a].toFixed(3).toString(),console.log("");a.parentNode.replaceChild(i,a)}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0});const a=44100;let i=null,o=null;class s{static loadExampleBuffer(){return s.loadBuffer("assets/spoken_command_example.wav")}static loadSineBuffer(){return s.loadBuffer("assets/sine_100ms_example.wav")}static loadBuffer(t){return o||(o=new AudioContext),new Promise((e,n)=>{const r=new XMLHttpRequest;r.open("GET",t),r.onload=(()=>{o.decodeAudioData(r.response,t=>{e(t)})}),r.responseType="arraybuffer",r.onerror=(t=>n(t)),r.send()})}static loadBufferOffline(t){return r(this,void 0,void 0,function*(){const e=new OfflineAudioContext(1,16e3,16e3);return fetch(t).then(t=>t.arrayBuffer()).then(t=>e.decodeAudioData(t))})}static fft(t){const e=null.forward(t);return null.dispose(),e}static stft(t,e=2048,n=e){const r=Math.floor((t.length-e)/n)+1;let a=function(t){let e=[];for(let n=0;n<t;n++)e.push(n);return e}(r).map(t=>new Float32Array(e));for(let i=0;i<r;i++){const r=i*n,o=t.slice(r,r+e);if(o.length!=e)continue;const u=s.hannWindow(o.length),l=s.applyWindow(o,u),c=s.fft(l);a[i].set(c.slice(0,e))}return a}static melSpectrogram(t,e=20,n=300,r=8e3,o=a){this.lazyCreateMelFilterbank(t[0].length,e,n,r,o);const u=[];for(let e=0;e<t.length;e++)u[e]=s.applyFilterbank(t[e],i);return u}static lazyCreateMelFilterbank(t,e=20,n=300,r=8e3,o=a){i&&i.length==t||(i=this.createMelFilterbank(t,e,n,r,o))}static fftMags(t){let e=new Float32Array(t.length/2);for(let n=0;n<t.length/2;n++)e[n]=Math.hypot(t[2*n],t[2*n+1]);return e}static fftEnergies(t){let e=new Float32Array(t.length/2);for(let n=0;n<t.length/2;n++)e[n]=t[2*n]*t[2*n]+t[2*n+1]*t[2*n+1];return e}static hannWindow(t){let e=new Float32Array(t);for(let n=0;n<t;n++)e[n]=.5*(1-Math.cos(2*Math.PI*n/(t-1)));return e}static applyWindow(t,e){if(t.length!=e.length)return void console.error(`Buffer length ${t.length} != window length\n        ${e.length}.`);let n=new Float32Array(t.length);for(let r=0;r<t.length;r++)n[r]=e[r]*t[r];return n}static pointWiseMultiply(t,e,n){if(t.length==e.length&&e.length==n.length){for(let r=0;r<t.length;r++)t[r]=e[r]*n[r];return t}console.error(`Output length ${t.length} != array1 length\n        ${e.length} != array2 length ${n.length}.`)}static createMelFilterbank(t,e=20,n=300,r=8e3,i=a){const o=function(t,e,n){const r=(e-t)/(n+1);let a=[];for(let e=0;e<n;e++)a[e]=t+r*e;return a}(this.hzToMel(n),this.hzToMel(r),e+2).map(t=>this.melToHz(t)).map(e=>this.freqToBin(e,t)),s=o.length-2,u=[];for(let e=0;e<s;e++)u[e]=this.triangleWindow(t,o[e],o[e+1],o[e+2]);return u}static applyFilterbank(t,e){if(t.length!=e[0].length)return void console.error(`Each entry in filterbank should have dimensions matching\n        FFT. |FFT| = ${t.length}, |filterbank[0]| = ${e[0].length}.`);let n=new Float32Array(e.length);for(let r=0;r<e.length;r++){const a=s.applyWindow(t,e[r]);n[r]=l(a.reduce(function(t,e){return t+e}))}return n}static hzToMel(t){return 1125*Math.log(1+t/700)}static melToHz(t){return 700*(Math.exp(t/1125)-1)}static freqToBin(t,e,n=a){return Math.floor((e+1)*t/(n/2))}static triangleWindow(t,e,n,r){const a=new Float32Array(t),i=1/(n-e);for(let t=e;t<n;t++)a[t]=(t-e)*i;const o=1/(r-n);for(let t=n;t<r;t++)a[t]=1-(t-n)*o;return a}static normalizeSpecInPlace(t,e=0,n=1){let r=1/0,a=-1/0;const i=t.length,o=t[0].length;for(let e=0;e<i;e++)for(let n=0;n<o;n++){const i=t[e][n];i<r&&(r=i),i>a&&(a=i)}for(let s=0;s<i;s++)for(let i=0;i<o;i++){const o=(t[s][i]-r)/(a-r);t[s][i]=e+o*(n-e)}}static playbackArrayBuffer(t,e){o||(o=new AudioContext),e||(e=o.sampleRate);const n=o.createBuffer(1,t.length,e);n.getChannelData(0).set(t);const r=o.createBufferSource();r.buffer=n,r.connect(o.destination),r.start()}}e.default=s;const u=-10;function l(t){const e=Math.exp(u);return Math.log(t+e)}e.resample=function(t,e){const n=t.sampleRate,r=t.length*e/n,a=new OfflineAudioContext(1,r,e);return new Promise((e,n)=>{const r=a.createBufferSource();r.buffer=t,a.oncomplete=function(t){const n=t.renderedBuffer;n.length,e(n)},r.connect(a.destination),r.start(),a.startRendering()})},e.samplesToLength=function(t,e){if(t.length>e)t=t.slice(0,e);else if(t.length<e){let n=new Float32Array(e);n.set(t),n.set(new Float32Array(e-t.length).fill(0),t.length),t=n}return t}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){e.read=function(t,e,n,r,a){var i,o,s=8*a-r-1,u=(1<<s)-1,l=u>>1,c=-7,p=n?a-1:0,f=n?-1:1,h=t[e+p];for(p+=f,i=h&(1<<-c)-1,h>>=-c,c+=s;c>0;i=256*i+t[e+p],p+=f,c-=8);for(o=i&(1<<-c)-1,i>>=-c,c+=r;c>0;o=256*o+t[e+p],p+=f,c-=8);if(0===i)i=1-l;else{if(i===u)return o?NaN:1/0*(h?-1:1);o+=Math.pow(2,r),i-=l}return(h?-1:1)*o*Math.pow(2,i-r)},e.write=function(t,e,n,r,a,i){var o,s,u,l=8*i-a-1,c=(1<<l)-1,p=c>>1,f=23===a?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,d=r?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,o=c):(o=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-o))<1&&(o--,u*=2),(e+=o+p>=1?f/u:f*Math.pow(2,1-p))*u>=2&&(o++,u/=2),o+p>=c?(s=0,o=c):o+p>=1?(s=(e*u-1)*Math.pow(2,a),o+=p):(s=e*Math.pow(2,p-1)*Math.pow(2,a),o=0));a>=8;t[n+h]=255&s,h+=d,s/=256,a-=8);for(o=o<<a|s,l+=a;l>0;t[n+h]=255&o,h+=d,o/=256,l-=8);t[n+h-d]|=128*m}},function(t,e,n){"use strict";e.byteLength=function(t){var e=l(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=l(t),r=n[0],o=n[1],s=new i(function(t,e,n){return 3*(e+n)/4-n}(0,r,o)),u=0,c=o>0?r-4:r,p=0;p<c;p+=4)e=a[t.charCodeAt(p)]<<18|a[t.charCodeAt(p+1)]<<12|a[t.charCodeAt(p+2)]<<6|a[t.charCodeAt(p+3)],s[u++]=e>>16&255,s[u++]=e>>8&255,s[u++]=255&e;2===o&&(e=a[t.charCodeAt(p)]<<2|a[t.charCodeAt(p+1)]>>4,s[u++]=255&e);1===o&&(e=a[t.charCodeAt(p)]<<10|a[t.charCodeAt(p+1)]<<4|a[t.charCodeAt(p+2)]>>2,s[u++]=e>>8&255,s[u++]=255&e);return s},e.fromByteArray=function(t){for(var e,n=t.length,a=n%3,i=[],o=0,s=n-a;o<s;o+=16383)i.push(c(t,o,o+16383>s?s:o+16383));1===a?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===a&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],a=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=o.length;s<u;++s)r[s]=o[s],a[o.charCodeAt(s)]=s;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t,e,n){for(var a,i,o=[],s=e;s<n;s+=3)a=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),o.push(r[(i=a)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return o.join("")}a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(42),a=n(41),i=n(40);function o(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return p(this,t)}return l(this,t,e,n)}function l(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),a=(t=s(t,r)).write(e,n);a!==r&&(t=t.slice(0,a));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|h(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?s(t,0):f(t,e);if("Buffer"===e.type&&i(e.data))return f(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function p(t,e){if(c(e),t=s(t,e<0?0:0|h(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function f(t,e){var n=e.length<0?0:0|h(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function h(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return V(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return B(t).length;default:if(r)return V(t).length;e=(""+e).toLowerCase(),r=!0}}function m(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function g(t,e,n,r,a){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=a?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(a)return-1;n=t.length-1}else if(n<0){if(!a)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,a);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?a?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,a);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,a){var i,o=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;o=2,s/=2,u/=2,n/=2}function l(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(a){var c=-1;for(i=n;i<s;i++)if(l(t,i)===l(e,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===u)return c*o}else-1!==c&&(i-=i-c),c=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var p=!0,f=0;f<u;f++)if(l(t,i+f)!==l(e,f)){p=!1;break}if(p)return i}return-1}function v(t,e,n,r){n=Number(n)||0;var a=t.length-n;r?(r=Number(r))>a&&(r=a):r=a;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var o=0;o<r;++o){var s=parseInt(e.substr(2*o,2),16);if(isNaN(s))return o;t[n+o]=s}return o}function b(t,e,n,r){return U(V(e,t.length-n),t,n,r)}function w(t,e,n,r){return U(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function x(t,e,n,r){return w(t,e,n,r)}function O(t,e,n,r){return U(B(e),t,n,r)}function N(t,e,n,r){return U(function(t,e){for(var n,r,a,i=[],o=0;o<t.length&&!((e-=2)<0);++o)n=t.charCodeAt(o),r=n>>8,a=n%256,i.push(a),i.push(r);return i}(e,t.length-n),t,n,r)}function S(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function E(t,e,n){n=Math.min(t.length,n);for(var r=[],a=e;a<n;){var i,o,s,u,l=t[a],c=null,p=l>239?4:l>223?3:l>191?2:1;if(a+p<=n)switch(p){case 1:l<128&&(c=l);break;case 2:128==(192&(i=t[a+1]))&&(u=(31&l)<<6|63&i)>127&&(c=u);break;case 3:i=t[a+1],o=t[a+2],128==(192&i)&&128==(192&o)&&(u=(15&l)<<12|(63&i)<<6|63&o)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:i=t[a+1],o=t[a+2],s=t[a+3],128==(192&i)&&128==(192&o)&&128==(192&s)&&(u=(15&l)<<18|(63&i)<<12|(63&o)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,p=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),a+=p}return function(t){var e=t.length;if(e<=A)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=A));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return l(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return p(null,t)},u.allocUnsafeSlow=function(t){return p(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,a=0,i=Math.min(n,r);a<i;++a)if(t[a]!==e[a]){n=t[a],r=e[a];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),a=0;for(n=0;n<t.length;++n){var o=t[n];if(!u.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,a),a+=o.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?E(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return k(this,e,n);case"utf8":case"utf-8":return E(this,e,n);case"ascii":return I(this,e,n);case"latin1":case"binary":return T(this,e,n);case"base64":return S(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,a){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===a&&(a=this.length),e<0||n>t.length||r<0||a>this.length)throw new RangeError("out of range index");if(r>=a&&e>=n)return 0;if(r>=a)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,a>>>=0,this===t)return 0;for(var i=a-r,o=n-e,s=Math.min(i,o),l=this.slice(r,a),c=t.slice(e,n),p=0;p<s;++p)if(l[p]!==c[p]){i=l[p],o=c[p];break}return i<o?-1:o<i?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return g(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return g(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var a=this.length-e;if((void 0===n||n>a)&&(n=a),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return x(this,t,e,n);case"base64":return O(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var A=4096;function I(t,e,n){var r="";n=Math.min(t.length,n);for(var a=e;a<n;++a)r+=String.fromCharCode(127&t[a]);return r}function T(t,e,n){var r="";n=Math.min(t.length,n);for(var a=e;a<n;++a)r+=String.fromCharCode(t[a]);return r}function k(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var a="",i=e;i<n;++i)a+=F(t[i]);return a}function P(t,e,n){for(var r=t.slice(e,n),a="",i=0;i<r.length;i+=2)a+=String.fromCharCode(r[i]+256*r[i+1]);return a}function R(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function C(t,e,n,r,a,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>a||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function D(t,e,n,r){e<0&&(e=65535+e+1);for(var a=0,i=Math.min(t.length-n,2);a<i;++a)t[n+a]=(e&255<<8*(r?a:1-a))>>>8*(r?a:1-a)}function _(t,e,n,r){e<0&&(e=4294967295+e+1);for(var a=0,i=Math.min(t.length-n,4);a<i;++a)t[n+a]=e>>>8*(r?a:3-a)&255}function M(t,e,n,r,a,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function z(t,e,n,r,i){return i||M(t,0,n,4),a.write(t,e,n,r,23,4),n+4}function j(t,e,n,r,i){return i||M(t,0,n,8),a.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var a=e-t;n=new u(a,void 0);for(var i=0;i<a;++i)n[i]=this[i+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||R(t,e,this.length);for(var r=this[t],a=1,i=0;++i<e&&(a*=256);)r+=this[t+i]*a;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||R(t,e,this.length);for(var r=this[t+--e],a=1;e>0&&(a*=256);)r+=this[t+--e]*a;return r},u.prototype.readUInt8=function(t,e){return e||R(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||R(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||R(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||R(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||R(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||R(t,e,this.length);for(var r=this[t],a=1,i=0;++i<e&&(a*=256);)r+=this[t+i]*a;return r>=(a*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||R(t,e,this.length);for(var r=e,a=1,i=this[t+--r];r>0&&(a*=256);)i+=this[t+--r]*a;return i>=(a*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||R(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||R(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||R(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||R(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||R(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||R(t,4,this.length),a.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||R(t,4,this.length),a.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||R(t,8,this.length),a.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||R(t,8,this.length),a.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||C(this,t,e,n,Math.pow(2,8*n)-1,0);var a=1,i=0;for(this[e]=255&t;++i<n&&(a*=256);)this[e+i]=t/a&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||C(this,t,e,n,Math.pow(2,8*n)-1,0);var a=n-1,i=1;for(this[e+a]=255&t;--a>=0&&(i*=256);)this[e+a]=t/i&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):_(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):_(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var a=Math.pow(2,8*n-1);C(this,t,e,n,a-1,-a)}var i=0,o=1,s=0;for(this[e]=255&t;++i<n&&(o*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/o>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var a=Math.pow(2,8*n-1);C(this,t,e,n,a-1,-a)}var i=n-1,o=1,s=0;for(this[e+i]=255&t;--i>=0&&(o*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/o>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):_(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||C(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):_(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return z(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return z(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return j(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return j(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var a,i=r-n;if(this===t&&n<e&&e<r)for(a=i-1;a>=0;--a)t[a+e]=this[a+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(a=0;a<i;++a)t[a+e]=this[a+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var a=t.charCodeAt(0);a<256&&(t=a)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var o=u.isBuffer(t)?t:V(new u(t,r).toString()),s=o.length;for(i=0;i<n-e;++i)this[i+e]=o[i%s]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function F(t){return t<16?"0"+t.toString(16):t.toString(16)}function V(t,e){var n;e=e||1/0;for(var r=t.length,a=null,i=[],o=0;o<r;++o){if((n=t.charCodeAt(o))>55295&&n<57344){if(!a){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(o+1===r){(e-=3)>-1&&i.push(239,191,189);continue}a=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),a=n;continue}n=65536+(a-55296<<10|n-56320)}else a&&(e-=3)>-1&&i.push(239,191,189);if(a=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function B(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function U(t,e,n,r){for(var a=0;a<r&&!(a+n>=e.length||a>=t.length);++a)e[a+n]=t[a];return a}}).call(this,n(24))},function(t,e,n){"use strict";(function(e){const n={pcm8:(t,e,n,r,a)=>{let i=new Uint8Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e){let r=i[o++]-128;n[e][t]=r<0?r/128:r/127}},pcm16:(t,e,n,r,a)=>{let i=new Int16Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e){let r=i[o++];n[e][t]=r<0?r/32768:r/32767}},pcm24:(t,e,n,r,a)=>{let i=new Uint8Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e){let r=i[o++]+(i[o++]<<8)+(i[o++]<<16),a=r>8388608?r-16777216:r;n[e][t]=a<0?a/8388608:a/8388607}},pcm32:(t,e,n,r,a)=>{let i=new Int32Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e){let r=i[o++];n[e][t]=r<0?r/2147483648:r/2147483647}},pcm32f:(t,e,n,r,a)=>{let i=new Float32Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e)n[e][t]=i[o++]},pcm64f:(t,e,n,r,a)=>{let i=new Float64Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e)n[e][t]=i[o++]}},r={pcm8:(t,e,n,r,a)=>{let i=new Uint8Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e){let r=Math.max(-1,Math.min(n[e][t],1));r=255*(.5*r+.5)|0,i[o++]=r}},pcm16:(t,e,n,r,a)=>{let i=new Int16Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e){let r=Math.max(-1,Math.min(n[e][t],1));r=0|(r<0?32768*r:32767*r),i[o++]=r}},pcm24:(t,e,n,r,a)=>{let i=new Uint8Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e){let r=Math.max(-1,Math.min(n[e][t],1));r=0|(r<0?16777216+8388608*r:8388607*r),i[o++]=r>>0&255,i[o++]=r>>8&255,i[o++]=r>>16&255}},pcm32:(t,e,n,r,a)=>{let i=new Int32Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e){let r=Math.max(-1,Math.min(n[e][t],1));r=0|(r<0?2147483648*r:2147483647*r),i[o++]=r}},pcm32f:(t,e,n,r,a)=>{let i=new Float32Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e){let r=Math.max(-1,Math.min(n[e][t],1));i[o++]=r}},pcm64f:(t,e,n,r,a)=>{let i=new Float64Array(t,e),o=0;for(let t=0;t<a;++t)for(let e=0;e<r;++e){let r=Math.max(-1,Math.min(n[e][t],1));i[o++]=r}}};function a(t,e,n){let r="pcm"+e+(n?"f":""),a=t[r];if(!a)throw new TypeError("Unsupported data format: "+r);return a}t.exports={decode:function(t){let e=0,r=0;t.buffer?(e=t.byteOffset,r=t.length,t=t.buffer):(e=0,r=t.byteLength);let i,o=new DataView(t);function s(){let t=o.getUint8(e);return e++,t}function u(){let t=o.getUint16(e,!0);return e+=2,t}function l(){let t=o.getUint32(e,!0);return e+=4,t}function c(t){let e="";for(let n=0;n<t;++n)e+=String.fromCharCode(s());return e}if("RIFF"!==c(4))throw new TypeError("Invalid WAV file");if(l(),"WAVE"!==c(4))throw new TypeError("Invalid WAV file");for(;e<r;){let r=c(4),o=l(),s=e+o;switch(r){case"fmt ":let s=u();if(1!==s&&3!==s)throw new TypeError("Unsupported format in WAV file: "+s.toString(16));i={format:"lpcm",floatingPoint:3===s,channels:u(),sampleRate:l(),byteRate:l(),blockSize:u(),bitDepth:u()};break;case"data":if(!i)throw new TypeError('Missing "fmt " chunk.');let c=Math.floor(o/i.blockSize),p=i.channels,f=i.sampleRate,h=[];for(let t=0;t<p;++t)h[t]=new Float32Array(c);return a(n,i.bitDepth,i.floatingPoint)(t,e,h,p,c),{sampleRate:f,channelData:h}}e=s}},encode:function(t,n){let i=n.sampleRate||16e3,o=!(!n.float&&!n.floatingPoint),s=o?32:0|n.bitDepth||16,u=t.length,l=t[0].length,c=new ArrayBuffer(44+l*u*(s>>3)),p=new DataView(c),f=0;function h(t){p.setUint16(f,t,!0),f+=2}function d(t){p.setUint32(f,t,!0),f+=4}function m(t){for(var e=0;e<t.length;++e)n=t.charCodeAt(e),p.setUint8(f++,n);var n}return m("RIFF"),d(c.byteLength-8),m("WAVE"),m("fmt "),d(16),h(o?3:1),h(u),d(i),d(i*u*(s>>3)),h(u*(s>>3)),h(s),m("data"),d(c.byteLength-44),a(r,s,o)(c,f,t,u,l),e(c)}}}).call(this,n(43).Buffer)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(35),a=n(44),i=n(39),o=n(38),s=n(37),u=["silence","unknown","yes","no","up","down","left","right","on","off","stop","go"],l=16e3;e.forwardPassWav=function(t,e){const n=a.decode(t),c=i.samplesToLength(n.channelData[0],l),p=s.melSpectrogram(c,{sampleRate:16e3,hopLength:192,winLength:512,nFft:512,nMels:128,power:2,fMin:30}),f=p[0].length,h=p.length;let d=[];for(let t=0;t<f;t++)d.push(new Array(h));for(let t=0;t<f;t++)for(let e=0;e<h;e++)d[t][e]=p[e][t];const m=r.tensor(d);console.log(m),e.then(function(t){let e=new Date,n=t.execute({fingerprint_input:m});n=(n=n).dataSync();let r=new Date;console.log(`Time to predict: ${r-e}ms`),o.displayPrediction(u,n)})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.version="0.3.1"},function(t,e,n){"use strict";var r=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,n,s){return e=e||"&",n=n||"=",null===t&&(t=void 0),"object"==typeof t?i(o(t),function(o){var s=encodeURIComponent(r(o))+n;return a(t[o])?i(t[o],function(t){return s+encodeURIComponent(r(t))}).join(e):s+encodeURIComponent(r(t[o]))}).join(e):s?encodeURIComponent(r(s))+n+encodeURIComponent(r(t)):""};var a=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function i(t,e){if(t.map)return t.map(e);for(var n=[],r=0;r<t.length;r++)n.push(e(t[r],r));return n}var o=Object.keys||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e}},function(t,e,n){"use strict";function r(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,n,i){e=e||"&",n=n||"=";var o={};if("string"!=typeof t||0===t.length)return o;var s=/\+/g;t=t.split(e);var u=1e3;i&&"number"==typeof i.maxKeys&&(u=i.maxKeys);var l=t.length;u>0&&l>u&&(l=u);for(var c=0;c<l;++c){var p,f,h,d,m=t[c].replace(s,"%20"),g=m.indexOf(n);g>=0?(p=m.substr(0,g),f=m.substr(g+1)):(p=m,f=""),h=decodeURIComponent(p),d=decodeURIComponent(f),r(o,h)?a(o[h])?o[h].push(d):o[h]=[o[h],d]:o[h]=d}return o};var a=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,n){"use strict";e.decode=e.parse=n(48),e.encode=e.stringify=n(47)},function(t,e,n){"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},function(t,e,n){(function(t,r){var a;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(i){"object"==typeof e&&e&&e.nodeType,"object"==typeof t&&t&&t.nodeType;var o="object"==typeof r&&r;o.global!==o&&o.window!==o&&o.self;var s,u=2147483647,l=36,c=1,p=26,f=38,h=700,d=72,m=128,g="-",y=/^xn--/,v=/[^\x20-\x7E]/,b=/[\x2E\u3002\uFF0E\uFF61]/g,w={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},x=l-c,O=Math.floor,N=String.fromCharCode;function S(t){throw new RangeError(w[t])}function E(t,e){for(var n=t.length,r=[];n--;)r[n]=e(t[n]);return r}function A(t,e){var n=t.split("@"),r="";return n.length>1&&(r=n[0]+"@",t=n[1]),r+E((t=t.replace(b,".")).split("."),e).join(".")}function I(t){for(var e,n,r=[],a=0,i=t.length;a<i;)(e=t.charCodeAt(a++))>=55296&&e<=56319&&a<i?56320==(64512&(n=t.charCodeAt(a++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),a--):r.push(e);return r}function T(t){return E(t,function(t){var e="";return t>65535&&(e+=N((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=N(t)}).join("")}function k(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function P(t,e,n){var r=0;for(t=n?O(t/h):t>>1,t+=O(t/e);t>x*p>>1;r+=l)t=O(t/x);return O(r+(x+1)*t/(t+f))}function R(t){var e,n,r,a,i,o,s,f,h,y,v,b=[],w=t.length,x=0,N=m,E=d;for((n=t.lastIndexOf(g))<0&&(n=0),r=0;r<n;++r)t.charCodeAt(r)>=128&&S("not-basic"),b.push(t.charCodeAt(r));for(a=n>0?n+1:0;a<w;){for(i=x,o=1,s=l;a>=w&&S("invalid-input"),((f=(v=t.charCodeAt(a++))-48<10?v-22:v-65<26?v-65:v-97<26?v-97:l)>=l||f>O((u-x)/o))&&S("overflow"),x+=f*o,!(f<(h=s<=E?c:s>=E+p?p:s-E));s+=l)o>O(u/(y=l-h))&&S("overflow"),o*=y;E=P(x-i,e=b.length+1,0==i),O(x/e)>u-N&&S("overflow"),N+=O(x/e),x%=e,b.splice(x++,0,N)}return T(b)}function C(t){var e,n,r,a,i,o,s,f,h,y,v,b,w,x,E,A=[];for(b=(t=I(t)).length,e=m,n=0,i=d,o=0;o<b;++o)(v=t[o])<128&&A.push(N(v));for(r=a=A.length,a&&A.push(g);r<b;){for(s=u,o=0;o<b;++o)(v=t[o])>=e&&v<s&&(s=v);for(s-e>O((u-n)/(w=r+1))&&S("overflow"),n+=(s-e)*w,e=s,o=0;o<b;++o)if((v=t[o])<e&&++n>u&&S("overflow"),v==e){for(f=n,h=l;!(f<(y=h<=i?c:h>=i+p?p:h-i));h+=l)E=f-y,x=l-y,A.push(N(k(y+E%x,0))),f=O(E/x);A.push(N(k(f,0))),i=P(n,w,r==a),n=0,++r}++n,++e}return A.join("")}s={version:"1.4.1",ucs2:{decode:I,encode:T},decode:R,encode:C,toASCII:function(t){return A(t,function(t){return v.test(t)?"xn--"+C(t):t})},toUnicode:function(t){return A(t,function(t){return y.test(t)?R(t.slice(4).toLowerCase()):t})}},void 0===(a=function(){return s}.call(e,n,e,t))||(t.exports=a)}()}).call(this,n(20)(t),n(24))},function(t,e,n){"use strict";var r=n(51),a=n(50);function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=b,e.resolve=function(t,e){return b(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?b(t,!1,!0).resolveObject(e):e},e.format=function(t){a.isString(t)&&(t=b(t));return t instanceof i?t.format():i.prototype.format.call(t)},e.Url=i;var o=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(l),p=["%","/","?",";","#"].concat(c),f=["/","?","#"],h=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},v=n(49);function b(t,e,n){if(t&&a.isObject(t)&&t instanceof i)return t;var r=new i;return r.parse(t,e,n),r}i.prototype.parse=function(t,e,n){if(!a.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var i=t.indexOf("?"),s=-1!==i&&i<t.indexOf("#")?"?":"#",l=t.split(s);l[0]=l[0].replace(/\\/g,"/");var b=t=l.join(s);if(b=b.trim(),!n&&1===t.split("#").length){var w=u.exec(b);if(w)return this.path=b,this.href=b,this.pathname=w[1],w[2]?(this.search=w[2],this.query=e?v.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var x=o.exec(b);if(x){var O=(x=x[0]).toLowerCase();this.protocol=O,b=b.substr(x.length)}if(n||x||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var N="//"===b.substr(0,2);!N||x&&g[x]||(b=b.substr(2),this.slashes=!0)}if(!g[x]&&(N||x&&!y[x])){for(var S,E,A=-1,I=0;I<f.length;I++){-1!==(T=b.indexOf(f[I]))&&(-1===A||T<A)&&(A=T)}-1!==(E=-1===A?b.lastIndexOf("@"):b.lastIndexOf("@",A))&&(S=b.slice(0,E),b=b.slice(E+1),this.auth=decodeURIComponent(S)),A=-1;for(I=0;I<p.length;I++){var T;-1!==(T=b.indexOf(p[I]))&&(-1===A||T<A)&&(A=T)}-1===A&&(A=b.length),this.host=b.slice(0,A),b=b.slice(A),this.parseHost(),this.hostname=this.hostname||"";var k="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!k)for(var P=this.hostname.split(/\./),R=(I=0,P.length);I<R;I++){var C=P[I];if(C&&!C.match(h)){for(var D="",_=0,M=C.length;_<M;_++)C.charCodeAt(_)>127?D+="x":D+=C[_];if(!D.match(h)){var z=P.slice(0,I),j=P.slice(I+1),L=C.match(d);L&&(z.push(L[1]),j.unshift(L[2])),j.length&&(b="/"+j.join(".")+b),this.hostname=z.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),k||(this.hostname=r.toASCII(this.hostname));var F=this.port?":"+this.port:"",V=this.hostname||"";this.host=V+F,this.href+=this.host,k&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!m[O])for(I=0,R=c.length;I<R;I++){var B=c[I];if(-1!==b.indexOf(B)){var U=encodeURIComponent(B);U===B&&(U=escape(B)),b=b.split(B).join(U)}}var W=b.indexOf("#");-1!==W&&(this.hash=b.substr(W),b=b.slice(0,W));var q=b.indexOf("?");if(-1!==q?(this.search=b.substr(q),this.query=b.substr(q+1),e&&(this.query=v.parse(this.query)),b=b.slice(0,q)):e&&(this.search="",this.query={}),b&&(this.pathname=b),y[O]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){F=this.pathname||"";var G=this.search||"";this.path=F+G}return this.href=this.format(),this},i.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",n=this.pathname||"",r=this.hash||"",i=!1,o="";this.host?i=t+this.host:this.hostname&&(i=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&a.isObject(this.query)&&Object.keys(this.query).length&&(o=v.stringify(this.query));var s=this.search||o&&"?"+o||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||y[e])&&!1!==i?(i="//"+(i||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):i||(i=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),e+i+(n=n.replace(/[?#]/g,function(t){return encodeURIComponent(t)}))+(s=s.replace("#","%23"))+r},i.prototype.resolve=function(t){return this.resolveObject(b(t,!1,!0)).format()},i.prototype.resolveObject=function(t){if(a.isString(t)){var e=new i;e.parse(t,!1,!0),t=e}for(var n=new i,r=Object.keys(this),o=0;o<r.length;o++){var s=r[o];n[s]=this[s]}if(n.hash=t.hash,""===t.href)return n.href=n.format(),n;if(t.slashes&&!t.protocol){for(var u=Object.keys(t),l=0;l<u.length;l++){var c=u[l];"protocol"!==c&&(n[c]=t[c])}return y[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(t.protocol&&t.protocol!==n.protocol){if(!y[t.protocol]){for(var p=Object.keys(t),f=0;f<p.length;f++){var h=p[f];n[h]=t[h]}return n.href=n.format(),n}if(n.protocol=t.protocol,t.host||g[t.protocol])n.pathname=t.pathname;else{for(var d=(t.pathname||"").split("/");d.length&&!(t.host=d.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),n.pathname=d.join("/")}if(n.search=t.search,n.query=t.query,n.host=t.host||"",n.auth=t.auth,n.hostname=t.hostname||t.host,n.port=t.port,n.pathname||n.search){var m=n.pathname||"",v=n.search||"";n.path=m+v}return n.slashes=n.slashes||t.slashes,n.href=n.format(),n}var b=n.pathname&&"/"===n.pathname.charAt(0),w=t.host||t.pathname&&"/"===t.pathname.charAt(0),x=w||b||n.host&&t.pathname,O=x,N=n.pathname&&n.pathname.split("/")||[],S=(d=t.pathname&&t.pathname.split("/")||[],n.protocol&&!y[n.protocol]);if(S&&(n.hostname="",n.port=null,n.host&&(""===N[0]?N[0]=n.host:N.unshift(n.host)),n.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===d[0]?d[0]=t.host:d.unshift(t.host)),t.host=null),x=x&&(""===d[0]||""===N[0])),w)n.host=t.host||""===t.host?t.host:n.host,n.hostname=t.hostname||""===t.hostname?t.hostname:n.hostname,n.search=t.search,n.query=t.query,N=d;else if(d.length)N||(N=[]),N.pop(),N=N.concat(d),n.search=t.search,n.query=t.query;else if(!a.isNullOrUndefined(t.search)){if(S)n.hostname=n.host=N.shift(),(k=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=k.shift(),n.host=n.hostname=k.shift());return n.search=t.search,n.query=t.query,a.isNull(n.pathname)&&a.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n}if(!N.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var E=N.slice(-1)[0],A=(n.host||t.host||N.length>1)&&("."===E||".."===E)||""===E,I=0,T=N.length;T>=0;T--)"."===(E=N[T])?N.splice(T,1):".."===E?(N.splice(T,1),I++):I&&(N.splice(T,1),I--);if(!x&&!O)for(;I--;I)N.unshift("..");!x||""===N[0]||N[0]&&"/"===N[0].charAt(0)||N.unshift(""),A&&"/"!==N.join("/").substr(-1)&&N.push("");var k,P=""===N[0]||N[0]&&"/"===N[0].charAt(0);S&&(n.hostname=n.host=P?"":N.length?N.shift():"",(k=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=k.shift(),n.host=n.hostname=k.shift()));return(x=x||n.host&&N.length)&&!P&&N.unshift(""),N.length?n.pathname=N.join("/"):(n.pathname=null,n.path=null),a.isNull(n.pathname)&&a.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=t.auth||n.auth,n.slashes=n.slashes||t.slashes,n.href=n.format(),n},i.prototype.parseHost=function(){var t=this.host,e=s.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},a=this&&this.__generator||function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o};Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),s=n(30),u=n(31),l=n(32),c=n(52),p=function(){function t(t,e,n){this.modelUrl=t,this.weightManifestUrl=e,this.requestOption=n,this.version="n/a",this.pathPrefix=this.getPathPrefix()}return Object.defineProperty(t.prototype,"modelVersion",{get:function(){return this.version},enumerable:!0,configurable:!0}),t.prototype.getPathPrefix=function(){var t=c.parse(this.weightManifestUrl),e=t.pathname.split("/");return e.splice(-1),t.pathname=e.join("/"),c.format(t)+"/"},t.prototype.loadRemoteProtoFile=function(){return r(this,void 0,void 0,function(){var t,e,n,r,i;return a(this,function(a){switch(a.label){case 0:return a.trys.push([0,3,,4]),[4,fetch(this.modelUrl,this.requestOption)];case 1:return t=a.sent(),n=(e=s.tensorflow.GraphDef).decode,r=Uint8Array.bind,[4,t.arrayBuffer()];case 2:return[2,n.apply(e,[new(r.apply(Uint8Array,[void 0,a.sent()]))])];case 3:throw i=a.sent(),new Error(this.modelUrl+" not found. "+i);case 4:return[2]}})})},t.prototype.loadWeightManifest=function(){return r(this,void 0,void 0,function(){var t,e,n;return a(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),[4,fetch(this.weightManifestUrl,this.requestOption)];case 1:return t=r.sent(),e=this,[4,t.clone().json()];case 2:return e.weightManifest=r.sent(),[3,4];case 3:throw n=r.sent(),new Error(this.weightManifestUrl+" not found. "+n);case 4:return[2]}})})},t.prototype.load=function(){return r(this,void 0,void 0,function(){var t,e,n,r,s;return a(this,function(a){switch(a.label){case 0:return t=this.loadRemoteProtoFile(),e=this.loadWeightManifest(),[4,Promise.all([t,e])];case 1:return n=i.apply(void 0,[a.sent(),1]),r=n[0],this.version=r.versions.producer+"."+r.versions.minConsumer,[4,o.io.loadWeights(this.weightManifest,this.pathPrefix,void 0,this.requestOption)];case 2:return s=a.sent(),this.executor=new l.GraphExecutor(u.OperationMapper.Instance.transformGraph(r)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),[2,!0]}})})},t.prototype.execute=function(t,e){if(this.executor.isControlFlowModel)throw new Error("The model contains control flow ops, please use executeAsync method");var n=this.executor.execute(this.convertTensorMapToTensorsMap(t),e),r=Object.keys(n);return 1===r.length?n[r[0]]:n},t.prototype.executeAsync=function(t,e){return r(this,void 0,void 0,function(){var n,r;return a(this,function(a){switch(a.label){case 0:if(!this.executor.isControlFlowModel)throw new Error("The model does not contain control flow ops, please use execute method for better performance.");return[4,this.executor.executeAsync(this.convertTensorMapToTensorsMap(t),e)];case 1:return n=a.sent(),[2,1===(r=Object.keys(n)).length?n[r[0]]:n]}})})},t.prototype.convertTensorMapToTensorsMap=function(t){return Object.keys(t).reduce(function(e,n){return e[n]=[t[n]],e},{})},t.prototype.dispose=function(){this.executor.dispose()},t}();e.FrozenModel=p,e.loadFrozenModel=function(t,e,n){return r(this,void 0,void 0,function(){var r;return a(this,function(a){switch(a.label){case 0:return[4,(r=new p(t,e,n)).load()];case 1:return a.sent(),[2,r]}})})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"cast":return[r.cast(a.getParamValue("x",t,e,n),a.getParamValue("dtype",t,e,n))];case"expandDims":var i=t.params.axis.value;return[r.expandDims(a.getParamValue("x",t,e,n),i)];case"squeeze":i=t.params.axis.value;return[r.squeeze(a.getParamValue("x",t,e,n),i)];case"reshape":return[r.reshape(a.getParamValue("x",t,e,n),a.getParamValue("shape",t,e,n))];case"pad":return[r.pad(a.getParamValue("x",t,e,n),a.split(a.getParamValue("padding",t,e,n),2),a.getParamValue("constantValue",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="transformation"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"concat":var i=a.getParamValue("axis",t,e,n),o=a.getParamValue("tensors",t,e,n);return[r.concat(o,i)];case"gather":i=a.getParamValue("axis",t,e,n);var s=a.getParamValue("x",t,e,n),u=a.getParamValue("indices",t,e,n);return[r.gather(s,u,i)];case"reverse":i=a.getParamValue("axis",t,e,n),s=a.getParamValue("x",t,e,n);return[r.reverse(s,i)];case"slice":var l=a.getParamValue("begin",t,e,n),c=a.getParamValue("size",t,e,n);return[r.slice(a.getParamValue("x",t,e,n),l,c)];case"stack":i=a.getParamValue("axis",t,e,n);return[r.stack(a.getParamValue("tensors",t,e,n),i)];case"tile":var p=a.getParamValue("reps",t,e,n);return[r.tile(a.getParamValue("x",t,e,n),p)];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="slice_join"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"max":var i=a.getParamValue("axis",t,e,n),o=a.getParamValue("keepDims",t,e,n);return[r.max(a.getParamValue("x",t,e,n),i,o)];case"mean":i=a.getParamValue("axis",t,e,n),o=a.getParamValue("keepDims",t,e,n);return[r.mean(a.getParamValue("x",t,e,n),i,o)];case"min":i=a.getParamValue("axis",t,e,n),o=a.getParamValue("keepDims",t,e,n);return[r.min(a.getParamValue("x",t,e,n),i,o)];case"sum":i=a.getParamValue("axis",t,e,n),o=a.getParamValue("keepDims",t,e,n);return[r.sum(a.getParamValue("x",t,e,n),i,o)];case"argMax":i=a.getParamValue("axis",t,e,n);return[r.argMax(a.getParamValue("x",t,e,n),i)];case"argMin":i=a.getParamValue("axis",t,e,n);return[r.argMin(a.getParamValue("x",t,e,n),i)];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="reduction"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"batchNormalization":return[r.batchNormalization(a.getParamValue("x",t,e,n),a.getParamValue("mean",t,e,n),a.getParamValue("variance",t,e,n),a.getParamValue("epsilon",t,e,n),a.getParamValue("scale",t,e,n),a.getParamValue("offset",t,e,n))];case"localResponseNormalization":return[r.localResponseNormalization(a.getParamValue("x",t,e,n),a.getParamValue("radius",t,e,n),a.getParamValue("bias",t,e,n),a.getParamValue("alpha",t,e,n),a.getParamValue("beta",t,e,n))];case"softmax":return[r.softmax(a.getParamValue("x",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="normalization"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"matMul":return[r.matMul(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n),a.getParamValue("transposeA",t,e,n),a.getParamValue("transposeB",t,e,n))];case"transpose":return[r.transpose(a.getParamValue("x",t,e,n),a.getParamValue("perm",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="matrices"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"equal":return[r.equal(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"greater":return[r.greater(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"greaterEqual":return[r.greaterEqual(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"less":return[r.less(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"lessEqual":return[r.lessEqual(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"logicalAnd":return[r.logicalAnd(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"logicalNot":return[r.logicalNot(a.getParamValue("a",t,e,n))];case"logicalOr":return[r.logicalOr(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"where":return[r.where(a.getParamValue("condition",t,e,n),a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="logical"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"resizeBilinear":var i=a.getParamValue("images",t,e,n),o=a.getParamValue("size",t,e,n),s=a.getParamValue("alignCorners",t,e,n);return[r.image.resizeBilinear(i,[o[0],o[1]],s)];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="image"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"const":return e[t.name];case"placeholder":var i=a.getParamValue("default",t,e,n);return[a.getTensor(t.name,e,n)||i];case"identity":case"stopGradient":return[a.getParamValue("x",t,e,n)];case"shape":return[r.tensor1d(a.getParamValue("x",t,e,n).shape,"int32")];case"noop":return[];case"print":var o=a.getParamValue("x",t,e,n),s=a.getParamValue("data",t,e,n),u=a.getParamValue("message",t,e,n),l=a.getParamValue("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(u);for(var c=0;c<s.length;c++)console.log(Array.prototype.slice.call(s[0].dataSync()).slice(0,l));return[o];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="graph"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"fill":var i=a.getParamValue("shape",t,e,n),o=a.getParamValue("value",t,e,n);return[r.fill(i,o)];case"linspace":var s=a.getParamValue("start",t,e,n),u=a.getParamValue("stop",t,e,n),l=a.getParamValue("num",t,e,n);return[r.linspace(s,u,l)];case"oneHot":var c=a.getParamValue("indices",t,e,n),p=a.getParamValue("depth",t,e,n),f=a.getParamValue("onValue",t,e,n),h=a.getParamValue("offValue",t,e,n);return[r.oneHot(c,p,f,h)];case"ones":return[r.ones(a.getParamValue("shape",t,e,n),a.getParamValue("dtype",t,e,n))];case"onesLike":return[r.onesLike(a.getParamValue("x",t,e,n))];case"randomUniform":return[r.randomUniform(a.getParamValue("shape",t,e,n),a.getParamValue("minval",t,e,n),a.getParamValue("maxval",t,e,n),a.getParamValue("dtype",t,e,n))];case"range":s=a.getParamValue("start",t,e,n);var d=a.getParamValue("stop",t,e,n),m=a.getParamValue("step",t,e,n);return[r.range(s,d,m,a.getParamValue("dtype",t,e,n))];case"truncatedNormal":i=a.getParamValue("shape",t,e,n);var g=a.getParamValue("mean",t,e,n),y=a.getParamValue("stdDev",t,e,n),v=a.getParamValue("seed",t,e,n);return[r.truncatedNormal(i,g,y,a.getParamValue("dtype",t,e,n),v)];case"zeros":return[r.zeros(a.getParamValue("shape",t,e,n),a.getParamValue("dtype",t,e,n))];case"zerosLike":return[r.zerosLike(a.getParamValue("x",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="creation"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"conv1d":var i=a.getParamValue("stride",t,e,n),o=a.getParamValue("pad",t,e,n),s=a.getParamValue("dataFormat",t,e,n).toUpperCase(),u=a.getParamValue("dilation",t,e,n);return[r.conv1d(a.getParamValue("x",t,e,n),a.getParamValue("filter",t,e,n),i,o,s,u)];case"conv2d":i=a.getParamValue("strides",t,e,n),o=a.getParamValue("pad",t,e,n),s=a.getParamValue("dataFormat",t,e,n).toUpperCase();var l=a.getParamValue("dilations",t,e,n);return[r.conv2d(a.getParamValue("x",t,e,n),a.getParamValue("filter",t,e,n),[i[1],i[2]],o,s,[l[0],l[1]])];case"conv2dTranspose":var c=a.getParamValue("outputShape",t,e,n);i=a.getParamValue("strides",t,e,n),o=a.getParamValue("pad",t,e,n);return[r.conv2dTranspose(a.getParamValue("x",t,e,n),a.getParamValue("filter",t,e,n),c,[i[1],i[2]],o)];case"depthwiseConv2d":i=a.getParamValue("strides",t,e,n),o=a.getParamValue("pad",t,e,n),l=a.getParamValue("dilations",t,e,n),s=a.getParamValue("dataFormat",t,e,n).toUpperCase();return[r.depthwiseConv2d(a.getParamValue("input",t,e,n),a.getParamValue("filter",t,e,n),[i[1],i[2]],o,s,[l[0],l[1]])];case"avgPool":i=a.getParamValue("strides",t,e,n),o=a.getParamValue("pad",t,e,n);var p=a.getParamValue("kernelSize",t,e,n);return[r.avgPool(a.getParamValue("x",t,e,n),[p[1],p[2]],[i[1],i[2]],o)];case"maxPool":i=a.getParamValue("strides",t,e,n),o=a.getParamValue("pad",t,e,n),p=a.getParamValue("kernelSize",t,e,n);return[r.maxPool(a.getParamValue("x",t,e,n),[p[1],p[2]],[i[1],i[2]],o)];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="convolution"},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?a(t.value):new n(function(e){e(t.value)}).then(o,s)}u((r=r.apply(t,e||[])).next())})},a=this&&this.__generator||function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[0,a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this;Object.defineProperty(e,"__esModule",{value:!0});var o=n(12);e.executeOp=function(t,e,n){return r(i,void 0,void 0,function(){var r,i,s,u,l,c,p;return a(this,function(a){switch(a.label){case 0:switch(t.op){case"loopCond":return[3,1];case"switch":return[3,2];case"merge":return[3,4];case"enter":return[3,5];case"exit":return[3,6];case"nextIteration":return[3,7]}return[3,8];case 1:return[2,[o.getParamValue("pred",t,e,n)]];case 2:return r=o.getParamValue("pred",t,e,n),i=o.getParamValue("data",t,e,n),[4,r.data()];case 3:return[2,a.sent()[0]?[void 0,i]:[i,void 0]];case 4:return[2,(s=t.inputNames.find(function(t){return void 0!==o.getTensor(t,e,n)}))?[o.getTensor(s,e,n)]:void 0];case 5:return u=o.getParamValue("frameName",t,e,n),l=o.getParamValue("tensor",t,e,n),n.enterFrame(u),[2,[l]];case 6:return c=o.getParamValue("tensor",t,e,n),n.exitFrame(),[2,[c]];case 7:return p=o.getParamValue("tensor",t,e,n),n.nextIteration(),[2,[p]];case 8:throw TypeError("Node type "+t.op+" is not implemented")}})})},e.CATEGORY="control"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"abs":return[r.abs(a.getParamValue("x",t,e,n))];case"acos":return[r.acos(a.getParamValue("x",t,e,n))];case"asin":return[r.asin(a.getParamValue("x",t,e,n))];case"atan":return[r.atan(a.getParamValue("x",t,e,n))];case"ceil":return[r.ceil(a.getParamValue("x",t,e,n))];case"cos":return[r.cos(a.getParamValue("x",t,e,n))];case"cosh":return[r.cosh(a.getParamValue("x",t,e,n))];case"elu":return[r.elu(a.getParamValue("x",t,e,n))];case"exp":return[r.exp(a.getParamValue("x",t,e,n))];case"floor":return[r.floor(a.getParamValue("x",t,e,n))];case"log":return[r.log(a.getParamValue("x",t,e,n))];case"neg":return[r.neg(a.getParamValue("x",t,e,n))];case"relu":return[r.relu(a.getParamValue("x",t,e,n))];case"selu":return[r.selu(a.getParamValue("x",t,e,n))];case"sigmoid":return[r.sigmoid(a.getParamValue("x",t,e,n))];case"sin":return[r.sin(a.getParamValue("x",t,e,n))];case"sinh":return[r.sinh(a.getParamValue("x",t,e,n))];case"sqrt":return[r.sqrt(a.getParamValue("x",t,e,n))];case"square":return[r.square(a.getParamValue("x",t,e,n))];case"tanh":return[r.tanh(a.getParamValue("x",t,e,n))];case"tan":return[r.tan(a.getParamValue("x",t,e,n))];case"clipByValue":return[r.clipByValue(a.getParamValue("x",t,e,n),a.getParamValue("clipValueMin",t,e,n),a.getParamValue("clipValueMax",t,e,n))];case"rsqrt":return[r.div(r.scalar(1,"float32"),r.sqrt(a.getTensor(t.inputNames[0],e,n)))];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="basic_math"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=n(12);e.executeOp=function(t,e,n){switch(t.op){case"add":return[r.add(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"mul":return[r.mul(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"div":return[r.div(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"sub":return[r.sub(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"minimum":return[r.minimum(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"maximum":return[r.maximum(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"pow":return[r.pow(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];case"squaredDifference":return[r.squaredDifference(a.getParamValue("a",t,e,n),a.getParamValue("b",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}},e.CATEGORY="arithmetic"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(66),a=n(65),i=n(64),o=n(63),s=n(62),u=n(61),l=n(60),c=n(59),p=n(58),f=n(57),h=n(56),d=n(55),m=n(54);e.executeOp=function(t,e,n){switch(t.category){case"arithmetic":return r.executeOp(t,e,n);case"basic_math":return a.executeOp(t,e,n);case"control":return i.executeOp(t,e,n);case"convolution":return o.executeOp(t,e,n);case"creation":return s.executeOp(t,e,n);case"image":return l.executeOp(t,e,n);case"graph":return u.executeOp(t,e,n);case"logical":return c.executeOp(t,e,n);case"matrices":return p.executeOp(t,e,n);case"normalization":return f.executeOp(t,e,n);case"reduction":return h.executeOp(t,e,n);case"slice_join":return d.executeOp(t,e,n);case"transformation":return m.executeOp(t,e,n);default:throw TypeError("Node type "+t.op+" is not implemented")}}},function(t){t.exports=[{tfOpName:"Cast",dlOpName:"cast",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"SrcT",dlParamName:"sdtype",type:"dtype",notSupported:!0},{tfParamName:"DstT",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",dlOpName:"expandDims",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,tfParamNameDeprecated:"dim",dlParamName:"axis",type:"number"}]},{tfOpName:"Pad",dlOpName:"pad",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"padding",type:"number[]"},{tfParamName:"constant_value",dlParamName:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",dlOpName:"pad",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"padding",type:"number[]"},{tfInputIndex:2,dlParamName:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",dlOpName:"reshape",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"shape",type:"number[]"}]},{tfOpName:"Squeeze",dlOpName:"squeeze",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"axis",tfParamNameDeprecated:"squeeze_dims",dlParamName:"axis",type:"number[]"}]}]},function(t){t.exports=[{tfOpName:"ConcatV2",dlOpName:"concat",category:"slice_join",params:[{tfInputIndex:0,tfInputParamLength:1,dlParamName:"tensors",type:"tensors"},{tfInputIndex:-1,dlParamName:"axis",type:"number"}]},{tfOpName:"Concat",dlOpName:"concat",category:"slice_join",params:[{tfInputIndex:1,tfInputParamLength:1,dlParamName:"tensors",type:"tensors"},{tfInputIndex:0,dlParamName:"axis",type:"number"}]},{tfOpName:"GatherV2",dlOpName:"gather",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"indices",type:"tensor"},{tfParamName:"axis",dlParamName:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",dlOpName:"gather",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"indices",type:"tensor"},{tfParamName:"axis",dlParamName:"axis",type:"number",defaultValue:0},{tfParamName:"validate_indices",dlParamName:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",dlOpName:"reverse",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number"}]},{tfOpName:"ReverseV2",dlOpName:"reverse",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number"}]},{tfOpName:"Slice",dlOpName:"slice",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"begin",type:"number[]"},{tfInputIndex:2,dlParamName:"size",type:"number[]"}]},{tfOpName:"Pack",dlOpName:"stack",category:"slice_join",params:[{tfInputIndex:0,tfInputParamLength:0,dlParamName:"tensors",type:"tensors"},{tfParamName:"axis",dlParamName:"axis",type:"number",defaultValue:0}]},{tfOpName:"Tile",dlOpName:"tile",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"reps",type:"number[]"}]}]},function(t){t.exports=[{tfOpName:"Max",dlOpName:"max",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"Mean",dlOpName:"mean",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"Min",dlOpName:"min",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"Sum",dlOpName:"sum",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",dlOpName:"argMax",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number"}]},{tfOpName:"ArgMin",dlOpName:"argMin",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number"}]}]},function(t){t.exports=[{tfOpName:"FusedBatchNorm",dlOpName:"batchNormalization",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"scale",type:"tensor"},{tfInputIndex:2,dlParamName:"offset",type:"tensor"},{tfInputIndex:3,dlParamName:"mean",type:"tensor"},{tfInputIndex:4,dlParamName:"variance",type:"tensor"},{tfParamName:"epsilon",dlParamName:"epsilon",type:"number",defaultValue:.001},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",dlOpName:"batchNormalization",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"scale",type:"tensor"},{tfInputIndex:2,dlParamName:"offset",type:"tensor"},{tfInputIndex:3,dlParamName:"mean",type:"tensor"},{tfInputIndex:4,dlParamName:"variance",type:"tensor"},{tfParamName:"epsilon",dlParamName:"epsilon",type:"number",defaultValue:.001},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",dlOpName:"localResponseNormalization",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"depth_radius",dlParamName:"radius",type:"number",defaultValue:5},{tfParamName:"bias",dlParamName:"bias",type:"number",defaultValue:1},{tfParamName:"alpha",dlParamName:"alpha",type:"number",defaultValue:1},{tfParamName:"beta",dlParamName:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",dlOpName:"softmax",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]}]},function(t){t.exports=[{tfOpName:"MatMul",dlOpName:"matMul",category:"matrices",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"transpose_a",dlParamName:"transposeA",type:"bool",defaultValue:!1},{tfParamName:"transpose_b",dlParamName:"transposeB",type:"bool",defaultValue:!1},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",dlOpName:"transpose",category:"matrices",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"perm",dlParamName:"perm",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},function(t){t.exports=[{tfOpName:"Equal",dlOpName:"equal",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",dlOpName:"greater",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",dlOpName:"greaterEqual",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",dlOpName:"less",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",dlOpName:"lessEqual",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",dlOpName:"logicalAnd",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",dlOpName:"logicalNot",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",dlOpName:"logicalOr",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",dlOpName:"where",category:"logical",params:[{tfInputIndex:0,dlParamName:"condition",type:"tensor"},{tfInputIndex:1,dlParamName:"a",type:"tensor"},{tfInputIndex:2,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},function(t){t.exports=[{tfOpName:"ResizeBilinear",dlOpName:"resizeBilinear",category:"image",params:[{tfInputIndex:0,dlParamName:"images",type:"tensor"},{tfInputIndex:1,dlParamName:"size",type:"number[]"},{tfParamName:"align_corners",dlParamName:"alignCorners",type:"bool"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},function(t){t.exports=[{tfOpName:"PlaceholderWithDefault",dlOpName:"placeholder",category:"graph",params:[{tfInputIndex:0,dlParamName:"default",type:"tensor"}]},{tfOpName:"Placeholder",dlOpName:"placeholder",category:"graph"},{tfOpName:"Const",dlOpName:"const",category:"graph"},{tfOpName:"Identity",dlOpName:"identity",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"Shape",dlOpName:"shape",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"Print",dlOpName:"print",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,tfInputParamLength:1,dlParamName:"data",type:"tensors"},{tfParamName:"message",dlParamName:"message",type:"string"},{tfParamName:"first_n",dlParamName:"firstN",type:"number",notSupprted:!0},{tfParamName:"summarize",dlParamName:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",dlOpName:"noop",category:"graph",params:[]},{tfOpName:"StopGradient",dlOpName:"stopGradient",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]}]},function(t){t.exports=[{tfOpName:"Fill",dlOpName:"fill",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfInputIndex:1,dlParamName:"value",type:"number"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LinSpace",dlOpName:"linspace",category:"creation",params:[{tfInputIndex:0,dlParamName:"start",type:"number"},{tfInputIndex:1,dlParamName:"stop",type:"number"},{tfInputIndex:2,dlParamName:"num",type:"number"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",dlOpName:"oneHot",category:"creation",params:[{tfInputIndex:0,dlParamName:"indices",type:"tensor"},{tfInputIndex:1,dlParamName:"depth",type:"number"},{tfInputIndex:2,dlParamName:"onValue",type:"number",defaultValue:1},{tfInputIndex:3,dlParamName:"offValue",type:"number",defaultValue:0},{tfParamName:"axis",dlParamName:"axis",type:"number",notSupported:!0},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",dlOpName:"ones",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",dlOpName:"onesLike",category:"creation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",dlOpName:"randomUniform",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"minval",dlParamName:"minval",type:"number",defaultValue:0},{tfParamName:"maxval",dlParamName:"maxval",type:"number",defaultValue:1},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"},{tfParamName:"seed",dlParamName:"seed",type:"number",defaultValue:0},{tfParamName:"seed2",dlParamName:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfParamName:"T",dlParamName:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",dlOpName:"range",category:"creation",params:[{tfInputIndex:0,dlParamName:"start",type:"number"},{tfInputIndex:1,dlParamName:"stop",type:"number"},{tfInputIndex:2,dlParamName:"step",type:"number",defaultValue:0},{tfParamName:"Tidx",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"truncatedNormal",dlOpName:"truncatedNormal",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"means",dlParamName:"mean",type:"number",defaultValue:0},{tfParamName:"stddev",dlParamName:"stdDev",type:"number",defaultValue:1},{tfParamName:"seed",dlParamName:"seed",type:"number"},{tfParamName:"seed2",dlParamName:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"},{tfParamName:"T",dlParamName:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",dlOpName:"zeros",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",dlOpName:"zerosLike",category:"creation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]}]},function(t){t.exports=[{tfOpName:"AvgPool",dlOpName:"avgPool",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0},{tfParamName:"ksize",dlParamName:"kernelSize",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",dlOpName:"maxPool",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0},{tfParamName:"ksize",dlParamName:"kernelSize",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",dlOpName:"conv1d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"stride",dlParamName:"stride",type:"number"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NWC"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{tfParamName:"dilation",dlParamName:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",dlOpName:"conv2d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"useCudnnOnGpu",dlParamName:"useCudnnOnGpu",type:"bool"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NHWC"},{tfParamName:"dilations",dlParamName:"dilations",type:"number[]"}]},{tfOpName:"Conv2DBackpropInput",dlOpName:"conv2dTranspose",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfInputIndex:2,dlParamName:"outputShape",type:"number[]"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",dlOpName:"depthwiseConv2d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"input",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NHWC"},{tfParamName:"dilations",dlParamName:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",dlOpName:"depthwiseConv2d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"input",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NHWC"},{tfParamName:"dilations",dlParamName:"dilations",type:"number[]"}]}]},function(t){t.exports=[{tfOpName:"LoopCond",dlOpName:"loopCond",category:"control",params:[{tfInputIndex:0,dlParamName:"pred",type:"tensor"}]},{tfOpName:"Switch",dlOpName:"switch",category:"control",params:[{tfInputIndex:0,dlParamName:"data",type:"tensor"},{tfInputIndex:1,dlParamName:"pred",type:"tensor"}]},{tfOpName:"Merge",dlOpName:"merge",category:"control",params:[{tfInputIndex:0,tfInputParamLength:0,dlParamName:"tensors",type:"tensors"}]},{tfOpName:"Enter",dlOpName:"enter",category:"control",params:[{tfInputIndex:0,dlParamName:"tensor",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{tfParamName:"frame_name",dlParamName:"frameName",type:"string"},{tfParamName:"is_constant",dlParamName:"isConstant",type:"bool"}]},{tfOpName:"Exit",dlOpName:"exit",category:"control",params:[{tfInputIndex:0,dlParamName:"tensor",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",dlOpName:"nextIteration",category:"control",params:[{tfInputIndex:0,dlParamName:"tensor",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},function(t){t.exports=[{tfOpName:"Abs",dlOpName:"abs",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",dlOpName:"acos",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",dlOpName:"asin",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"atan",dlOpName:"atan",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",dlOpName:"ceil",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",dlOpName:"clipByValue",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"clip_value_min",dlParamName:"clipValueMin",type:"number"},{tfParamName:"clip_value_max",dlParamName:"clipValueMax",type:"number"}]},{tfOpName:"Cos",dlOpName:"cos",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",dlOpName:"cosh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",dlOpName:"elu",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",dlOpName:"exp",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",dlOpName:"floor",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",dlOpName:"log",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",dlOpName:"neg",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",dlOpName:"relu",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",dlOpName:"clipByValue",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{dlParamName:"clipValueMin",type:"number",defaultValue:0},{dlParamName:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",dlOpName:"selu",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",dlOpName:"sigmoid",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",dlOpName:"sin",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",dlOpName:"sinh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",dlOpName:"sqrt",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",dlOpName:"rsqrt",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",dlOpName:"square",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",dlOpName:"tan",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",dlOpName:"tanh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},function(t){t.exports=[{tfOpName:"Add",dlOpName:"add",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BiasAdd",dlOpName:"add",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",dlOpName:"sub",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",dlOpName:"div",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",dlOpName:"div",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",dlOpName:"mul",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",dlOpName:"maximum",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"}]},{tfOpName:"Minimum",dlOpName:"minimum",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"}]},{tfOpName:"Pow",dlOpName:"pow",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",dlOpName:"squaredDifference",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"}]}]},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";t.exports=a;var r=n(19);function a(t,e,n){if("function"!=typeof t)throw TypeError("rpcImpl must be a function");r.EventEmitter.call(this),this.rpcImpl=t,this.requestDelimited=Boolean(e),this.responseDelimited=Boolean(n)}(a.prototype=Object.create(r.EventEmitter.prototype)).constructor=a,a.prototype.rpcCall=function t(e,n,a,i,o){if(!i)throw TypeError("request must be specified");var s=this;if(!o)return r.asPromise(t,s,e,n,a,i);if(s.rpcImpl)try{return s.rpcImpl(e,n[s.requestDelimited?"encodeDelimited":"encode"](i).finish(),function(t,n){if(t)return s.emit("error",t,e),o(t);if(null!==n){if(!(n instanceof a))try{n=a[s.responseDelimited?"decodeDelimited":"decode"](n)}catch(t){return s.emit("error",t,e),o(t)}return s.emit("data",n,e),o(null,n)}s.end(!0)})}catch(t){return s.emit("error",t,e),void setTimeout(function(){o(t)},0)}else setTimeout(function(){o(Error("already ended"))},0)},a.prototype.end=function(t){return this.rpcImpl&&(t||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}},function(t,e,n){"use strict";e.Service=n(82)},function(t,e,n){"use strict";t.exports=i;var r=n(28);(i.prototype=Object.create(r.prototype)).constructor=i;var a=n(19);function i(t){r.call(this,t)}a.Buffer&&(i.prototype._slice=a.Buffer.prototype.slice),i.prototype.string=function(){var t=this.uint32();return this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len))}},function(t,e,n){"use strict";t.exports=o;var r=n(29);(o.prototype=Object.create(r.prototype)).constructor=o;var a=n(19),i=a.Buffer;function o(){r.call(this)}o.alloc=function(t){return(o.alloc=a._Buffer_allocUnsafe)(t)};var s=i&&i.prototype instanceof Uint8Array&&"set"===i.prototype.set.name?function(t,e,n){e.set(t,n)}:function(t,e,n){if(t.copy)t.copy(e,n,0,t.length);else for(var r=0;r<t.length;)e[n++]=t[r++]};function u(t,e,n){t.length<40?a.utf8.write(t,e,n):e.utf8Write(t,n)}o.prototype.bytes=function(t){a.isString(t)&&(t=a._Buffer_from(t,"base64"));var e=t.length>>>0;return this.uint32(e),e&&this._push(s,e,t),this},o.prototype.string=function(t){var e=i.byteLength(t);return this.uint32(e),e&&this._push(u,e,t),this}},function(t,e,n){"use strict";t.exports=a;var r=n(19);function a(t,e){this.lo=t>>>0,this.hi=e>>>0}var i=a.zero=new a(0,0);i.toNumber=function(){return 0},i.zzEncode=i.zzDecode=function(){return this},i.length=function(){return 1};var o=a.zeroHash="\0\0\0\0\0\0\0\0";a.fromNumber=function(t){if(0===t)return i;var e=t<0;e&&(t=-t);var n=t>>>0,r=(t-n)/4294967296>>>0;return e&&(r=~r>>>0,n=~n>>>0,++n>4294967295&&(n=0,++r>4294967295&&(r=0))),new a(n,r)},a.from=function(t){if("number"==typeof t)return a.fromNumber(t);if(r.isString(t)){if(!r.Long)return a.fromNumber(parseInt(t,10));t=r.Long.fromString(t)}return t.low||t.high?new a(t.low>>>0,t.high>>>0):i},a.prototype.toNumber=function(t){if(!t&&this.hi>>>31){var e=1+~this.lo>>>0,n=~this.hi>>>0;return e||(n=n+1>>>0),-(e+4294967296*n)}return this.lo+4294967296*this.hi},a.prototype.toLong=function(t){return r.Long?new r.Long(0|this.lo,0|this.hi,Boolean(t)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(t)}};var s=String.prototype.charCodeAt;a.fromHash=function(t){return t===o?i:new a((s.call(t,0)|s.call(t,1)<<8|s.call(t,2)<<16|s.call(t,3)<<24)>>>0,(s.call(t,4)|s.call(t,5)<<8|s.call(t,6)<<16|s.call(t,7)<<24)>>>0)},a.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},a.prototype.zzEncode=function(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this},a.prototype.zzDecode=function(){var t=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this},a.prototype.length=function(){var t=this.lo,e=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return 0===n?0===e?t<16384?t<128?1:2:t<2097152?3:4:e<16384?e<128?5:6:e<2097152?7:8:n<128?9:10}},function(t,e,n){"use strict";t.exports=function(t,e,n){var r=n||8192,a=r>>>1,i=null,o=r;return function(n){if(n<1||n>a)return t(n);o+n>r&&(i=t(r),o=0);var s=e.call(i,o,o+=n);return 7&o&&(o=1+(7|o)),s}}},function(t,e,n){"use strict";var r=e;r.length=function(t){for(var e=0,n=0,r=0;r<t.length;++r)(n=t.charCodeAt(r))<128?e+=1:n<2048?e+=2:55296==(64512&n)&&56320==(64512&t.charCodeAt(r+1))?(++r,e+=4):e+=3;return e},r.read=function(t,e,n){if(n-e<1)return"";for(var r,a=null,i=[],o=0;e<n;)(r=t[e++])<128?i[o++]=r:r>191&&r<224?i[o++]=(31&r)<<6|63&t[e++]:r>239&&r<365?(r=((7&r)<<18|(63&t[e++])<<12|(63&t[e++])<<6|63&t[e++])-65536,i[o++]=55296+(r>>10),i[o++]=56320+(1023&r)):i[o++]=(15&r)<<12|(63&t[e++])<<6|63&t[e++],o>8191&&((a||(a=[])).push(String.fromCharCode.apply(String,i)),o=0);return a?(o&&a.push(String.fromCharCode.apply(String,i.slice(0,o))),a.join("")):String.fromCharCode.apply(String,i.slice(0,o))},r.write=function(t,e,n){for(var r,a,i=n,o=0;o<t.length;++o)(r=t.charCodeAt(o))<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):55296==(64512&r)&&56320==(64512&(a=t.charCodeAt(o+1)))?(r=65536+((1023&r)<<10)+(1023&a),++o,e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128);return n-i}},function(module,exports,__webpack_require__){"use strict";function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(t){}return null}module.exports=inquire},function(t,e,n){"use strict";function r(t){return"undefined"!=typeof Float32Array?function(){var e=new Float32Array([-0]),n=new Uint8Array(e.buffer),r=128===n[3];function a(t,r,a){e[0]=t,r[a]=n[0],r[a+1]=n[1],r[a+2]=n[2],r[a+3]=n[3]}function i(t,r,a){e[0]=t,r[a]=n[3],r[a+1]=n[2],r[a+2]=n[1],r[a+3]=n[0]}function o(t,r){return n[0]=t[r],n[1]=t[r+1],n[2]=t[r+2],n[3]=t[r+3],e[0]}function s(t,r){return n[3]=t[r],n[2]=t[r+1],n[1]=t[r+2],n[0]=t[r+3],e[0]}t.writeFloatLE=r?a:i,t.writeFloatBE=r?i:a,t.readFloatLE=r?o:s,t.readFloatBE=r?s:o}():function(){function e(t,e,n,r){var a=e<0?1:0;if(a&&(e=-e),0===e)t(1/e>0?0:2147483648,n,r);else if(isNaN(e))t(2143289344,n,r);else if(e>3.4028234663852886e38)t((a<<31|2139095040)>>>0,n,r);else if(e<1.1754943508222875e-38)t((a<<31|Math.round(e/1.401298464324817e-45))>>>0,n,r);else{var i=Math.floor(Math.log(e)/Math.LN2);t((a<<31|i+127<<23|8388607&Math.round(e*Math.pow(2,-i)*8388608))>>>0,n,r)}}function n(t,e,n){var r=t(e,n),a=2*(r>>31)+1,i=r>>>23&255,o=8388607&r;return 255===i?o?NaN:a*(1/0):0===i?1.401298464324817e-45*a*o:a*Math.pow(2,i-150)*(o+8388608)}t.writeFloatLE=e.bind(null,a),t.writeFloatBE=e.bind(null,i),t.readFloatLE=n.bind(null,o),t.readFloatBE=n.bind(null,s)}(),"undefined"!=typeof Float64Array?function(){var e=new Float64Array([-0]),n=new Uint8Array(e.buffer),r=128===n[7];function a(t,r,a){e[0]=t,r[a]=n[0],r[a+1]=n[1],r[a+2]=n[2],r[a+3]=n[3],r[a+4]=n[4],r[a+5]=n[5],r[a+6]=n[6],r[a+7]=n[7]}function i(t,r,a){e[0]=t,r[a]=n[7],r[a+1]=n[6],r[a+2]=n[5],r[a+3]=n[4],r[a+4]=n[3],r[a+5]=n[2],r[a+6]=n[1],r[a+7]=n[0]}function o(t,r){return n[0]=t[r],n[1]=t[r+1],n[2]=t[r+2],n[3]=t[r+3],n[4]=t[r+4],n[5]=t[r+5],n[6]=t[r+6],n[7]=t[r+7],e[0]}function s(t,r){return n[7]=t[r],n[6]=t[r+1],n[5]=t[r+2],n[4]=t[r+3],n[3]=t[r+4],n[2]=t[r+5],n[1]=t[r+6],n[0]=t[r+7],e[0]}t.writeDoubleLE=r?a:i,t.writeDoubleBE=r?i:a,t.readDoubleLE=r?o:s,t.readDoubleBE=r?s:o}():function(){function e(t,e,n,r,a,i){var o=r<0?1:0;if(o&&(r=-r),0===r)t(0,a,i+e),t(1/r>0?0:2147483648,a,i+n);else if(isNaN(r))t(0,a,i+e),t(2146959360,a,i+n);else if(r>1.7976931348623157e308)t(0,a,i+e),t((o<<31|2146435072)>>>0,a,i+n);else{var s;if(r<2.2250738585072014e-308)t((s=r/5e-324)>>>0,a,i+e),t((o<<31|s/4294967296)>>>0,a,i+n);else{var u=Math.floor(Math.log(r)/Math.LN2);1024===u&&(u=1023),t(4503599627370496*(s=r*Math.pow(2,-u))>>>0,a,i+e),t((o<<31|u+1023<<20|1048576*s&1048575)>>>0,a,i+n)}}}function n(t,e,n,r,a){var i=t(r,a+e),o=t(r,a+n),s=2*(o>>31)+1,u=o>>>20&2047,l=4294967296*(1048575&o)+i;return 2047===u?l?NaN:s*(1/0):0===u?5e-324*s*l:s*Math.pow(2,u-1075)*(l+4503599627370496)}t.writeDoubleLE=e.bind(null,a,0,4),t.writeDoubleBE=e.bind(null,i,4,0),t.readDoubleLE=n.bind(null,o,0,4),t.readDoubleBE=n.bind(null,s,4,0)}(),t}function a(t,e,n){e[n]=255&t,e[n+1]=t>>>8&255,e[n+2]=t>>>16&255,e[n+3]=t>>>24}function i(t,e,n){e[n]=t>>>24,e[n+1]=t>>>16&255,e[n+2]=t>>>8&255,e[n+3]=255&t}function o(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0}function s(t,e){return(t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3])>>>0}t.exports=r(r)},function(t,e,n){"use strict";function r(){this._listeners={}}t.exports=r,r.prototype.on=function(t,e,n){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:e,ctx:n||this}),this},r.prototype.off=function(t,e){if(void 0===t)this._listeners={};else if(void 0===e)this._listeners[t]=[];else for(var n=this._listeners[t],r=0;r<n.length;)n[r].fn===e?n.splice(r,1):++r;return this},r.prototype.emit=function(t){var e=this._listeners[t];if(e){for(var n=[],r=1;r<arguments.length;)n.push(arguments[r++]);for(r=0;r<e.length;)e[r].fn.apply(e[r++].ctx,n)}return this}},function(t,e,n){"use strict";var r=e;r.length=function(t){var e=t.length;if(!e)return 0;for(var n=0;--e%4>1&&"="===t.charAt(e);)++n;return Math.ceil(3*t.length)/4-n};for(var a=new Array(64),i=new Array(123),o=0;o<64;)i[a[o]=o<26?o+65:o<52?o+71:o<62?o-4:o-59|43]=o++;r.encode=function(t,e,n){for(var r,i=null,o=[],s=0,u=0;e<n;){var l=t[e++];switch(u){case 0:o[s++]=a[l>>2],r=(3&l)<<4,u=1;break;case 1:o[s++]=a[r|l>>4],r=(15&l)<<2,u=2;break;case 2:o[s++]=a[r|l>>6],o[s++]=a[63&l],u=0}s>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,o)),s=0)}return u&&(o[s++]=a[r],o[s++]=61,1===u&&(o[s++]=61)),i?(s&&i.push(String.fromCharCode.apply(String,o.slice(0,s))),i.join("")):String.fromCharCode.apply(String,o.slice(0,s))};r.decode=function(t,e,n){for(var r,a=n,o=0,s=0;s<t.length;){var u=t.charCodeAt(s++);if(61===u&&o>1)break;if(void 0===(u=i[u]))throw Error("invalid encoding");switch(o){case 0:r=u,o=1;break;case 1:e[n++]=r<<2|(48&u)>>4,r=u,o=2;break;case 2:e[n++]=(15&r)<<4|(60&u)>>2,r=u,o=3;break;case 3:e[n++]=(3&r)<<6|u,o=0}}if(1===o)throw Error("invalid encoding");return n-a},r.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)}},function(t,e,n){"use strict";t.exports=function(t,e){var n=new Array(arguments.length-1),r=0,a=2,i=!0;for(;a<arguments.length;)n[r++]=arguments[a++];return new Promise(function(a,o){n[r]=function(t){if(i)if(i=!1,t)o(t);else{for(var e=new Array(arguments.length-1),n=0;n<e.length;)e[n++]=arguments[n];a.apply(null,e)}};try{t.apply(e||null,n)}catch(t){i&&(i=!1,o(t))}})}},function(t,e,n){"use strict";var r=e;function a(){r.Reader._configure(r.BufferReader),r.util._configure()}r.build="minimal",r.Writer=n(29),r.BufferWriter=n(85),r.Reader=n(28),r.BufferReader=n(84),r.util=n(19),r.rpc=n(83),r.roots=n(81),r.configure=a,r.Writer._configure(r.BufferWriter),a()},function(t,e,n){"use strict";t.exports=n(94)},function(t,e,n){"use strict";var r,a,i,o=n(95),s=o.Reader,u=o.util,l=o.roots.default||(o.roots.default={});l.tensorflow=((i={}).Any=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.typeUrl="",t.prototype.value=u.newBuffer([]),t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.Any;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.typeUrl=t.string();break;case 2:r.value=t.bytes();break;default:t.skipType(7&a)}}return r},t}(),i.DataType=(r={},(a=Object.create(r))[r[0]="DT_INVALID"]=0,a[r[1]="DT_FLOAT"]=1,a[r[2]="DT_DOUBLE"]=2,a[r[3]="DT_INT32"]=3,a[r[4]="DT_UINT8"]=4,a[r[5]="DT_INT16"]=5,a[r[6]="DT_INT8"]=6,a[r[7]="DT_STRING"]=7,a[r[8]="DT_COMPLEX64"]=8,a[r[9]="DT_INT64"]=9,a[r[10]="DT_BOOL"]=10,a[r[11]="DT_QINT8"]=11,a[r[12]="DT_QUINT8"]=12,a[r[13]="DT_QINT32"]=13,a[r[14]="DT_BFLOAT16"]=14,a[r[101]="DT_FLOAT_REF"]=101,a[r[102]="DT_DOUBLE_REF"]=102,a[r[103]="DT_INT32_REF"]=103,a[r[104]="DT_UINT8_REF"]=104,a[r[105]="DT_INT16_REF"]=105,a[r[106]="DT_INT8_REF"]=106,a[r[107]="DT_STRING_REF"]=107,a[r[108]="DT_COMPLEX64_REF"]=108,a[r[109]="DT_INT64_REF"]=109,a[r[110]="DT_BOOL_REF"]=110,a[r[111]="DT_QINT8_REF"]=111,a[r[112]="DT_QUINT8_REF"]=112,a[r[113]="DT_QINT32_REF"]=113,a[r[114]="DT_BFLOAT16_REF"]=114,a),i.TensorShape=function(){function t(t){if(this.dim=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.dim=u.emptyArray,t.prototype.unknownRank=!1,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.TensorShape;t.pos<n;){var a=t.uint32();switch(a>>>3){case 2:r.dim&&r.dim.length||(r.dim=[]),r.dim.push(l.tensorflow.TensorShape.Dim.decode(t,t.uint32()));break;case 3:r.unknownRank=t.bool();break;default:t.skipType(7&a)}}return r},t.Dim=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.size=u.Long?u.Long.fromBits(0,0,!1):0,t.prototype.name="",t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.TensorShape.Dim;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.size=t.int64();break;case 2:r.name=t.string();break;default:t.skipType(7&a)}}return r},t}(),t}(),i.Tensor=function(){function t(t){if(this.floatVal=[],this.doubleVal=[],this.intVal=[],this.stringVal=[],this.scomplexVal=[],this.int64Val=[],this.boolVal=[],this.uint32Val=[],this.uint64Val=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.dtype=0,t.prototype.tensorShape=null,t.prototype.versionNumber=0,t.prototype.tensorContent=u.newBuffer([]),t.prototype.floatVal=u.emptyArray,t.prototype.doubleVal=u.emptyArray,t.prototype.intVal=u.emptyArray,t.prototype.stringVal=u.emptyArray,t.prototype.scomplexVal=u.emptyArray,t.prototype.int64Val=u.emptyArray,t.prototype.boolVal=u.emptyArray,t.prototype.uint32Val=u.emptyArray,t.prototype.uint64Val=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.Tensor;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.dtype=t.int32();break;case 2:r.tensorShape=l.tensorflow.TensorShape.decode(t,t.uint32());break;case 3:r.versionNumber=t.int32();break;case 4:r.tensorContent=t.bytes();break;case 5:if(r.floatVal&&r.floatVal.length||(r.floatVal=[]),2==(7&a))for(var i=t.uint32()+t.pos;t.pos<i;)r.floatVal.push(t.float());else r.floatVal.push(t.float());break;case 6:if(r.doubleVal&&r.doubleVal.length||(r.doubleVal=[]),2==(7&a))for(i=t.uint32()+t.pos;t.pos<i;)r.doubleVal.push(t.double());else r.doubleVal.push(t.double());break;case 7:if(r.intVal&&r.intVal.length||(r.intVal=[]),2==(7&a))for(i=t.uint32()+t.pos;t.pos<i;)r.intVal.push(t.int32());else r.intVal.push(t.int32());break;case 8:r.stringVal&&r.stringVal.length||(r.stringVal=[]),r.stringVal.push(t.bytes());break;case 9:if(r.scomplexVal&&r.scomplexVal.length||(r.scomplexVal=[]),2==(7&a))for(i=t.uint32()+t.pos;t.pos<i;)r.scomplexVal.push(t.float());else r.scomplexVal.push(t.float());break;case 10:if(r.int64Val&&r.int64Val.length||(r.int64Val=[]),2==(7&a))for(i=t.uint32()+t.pos;t.pos<i;)r.int64Val.push(t.int64());else r.int64Val.push(t.int64());break;case 11:if(r.boolVal&&r.boolVal.length||(r.boolVal=[]),2==(7&a))for(i=t.uint32()+t.pos;t.pos<i;)r.boolVal.push(t.bool());else r.boolVal.push(t.bool());break;case 16:if(r.uint32Val&&r.uint32Val.length||(r.uint32Val=[]),2==(7&a))for(i=t.uint32()+t.pos;t.pos<i;)r.uint32Val.push(t.uint32());else r.uint32Val.push(t.uint32());break;case 17:if(r.uint64Val&&r.uint64Val.length||(r.uint64Val=[]),2==(7&a))for(i=t.uint32()+t.pos;t.pos<i;)r.uint64Val.push(t.uint64());else r.uint64Val.push(t.uint64());break;default:t.skipType(7&a)}}return r},t}(),i.AttrValue=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e;return t.prototype.list=null,t.prototype.s=u.newBuffer([]),t.prototype.i=u.Long?u.Long.fromBits(0,0,!1):0,t.prototype.f=0,t.prototype.b=!1,t.prototype.type=0,t.prototype.shape=null,t.prototype.tensor=null,t.prototype.placeholder="",t.prototype.func=null,Object.defineProperty(t.prototype,"value",{get:u.oneOfGetter(e=["list","s","i","f","b","type","shape","tensor","placeholder","func"]),set:u.oneOfSetter(e)}),t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.AttrValue;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.list=l.tensorflow.AttrValue.ListValue.decode(t,t.uint32());break;case 2:r.s=t.bytes();break;case 3:r.i=t.int64();break;case 4:r.f=t.float();break;case 5:r.b=t.bool();break;case 6:r.type=t.int32();break;case 7:r.shape=l.tensorflow.TensorShape.decode(t,t.uint32());break;case 8:r.tensor=l.tensorflow.Tensor.decode(t,t.uint32());break;case 9:r.placeholder=t.string();break;case 10:r.func=l.tensorflow.NameAttrList.decode(t,t.uint32());break;default:t.skipType(7&a)}}return r},t.ListValue=function(){function t(t){if(this.s=[],this.i=[],this.f=[],this.b=[],this.type=[],this.shape=[],this.tensor=[],this.func=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.s=u.emptyArray,t.prototype.i=u.emptyArray,t.prototype.f=u.emptyArray,t.prototype.b=u.emptyArray,t.prototype.type=u.emptyArray,t.prototype.shape=u.emptyArray,t.prototype.tensor=u.emptyArray,t.prototype.func=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.AttrValue.ListValue;t.pos<n;){var a=t.uint32();switch(a>>>3){case 2:r.s&&r.s.length||(r.s=[]),r.s.push(t.bytes());break;case 3:if(r.i&&r.i.length||(r.i=[]),2==(7&a))for(var i=t.uint32()+t.pos;t.pos<i;)r.i.push(t.int64());else r.i.push(t.int64());break;case 4:if(r.f&&r.f.length||(r.f=[]),2==(7&a))for(i=t.uint32()+t.pos;t.pos<i;)r.f.push(t.float());else r.f.push(t.float());break;case 5:if(r.b&&r.b.length||(r.b=[]),2==(7&a))for(i=t.uint32()+t.pos;t.pos<i;)r.b.push(t.bool());else r.b.push(t.bool());break;case 6:if(r.type&&r.type.length||(r.type=[]),2==(7&a))for(i=t.uint32()+t.pos;t.pos<i;)r.type.push(t.int32());else r.type.push(t.int32());break;case 7:r.shape&&r.shape.length||(r.shape=[]),r.shape.push(l.tensorflow.TensorShape.decode(t,t.uint32()));break;case 8:r.tensor&&r.tensor.length||(r.tensor=[]),r.tensor.push(l.tensorflow.Tensor.decode(t,t.uint32()));break;case 9:r.func&&r.func.length||(r.func=[]),r.func.push(l.tensorflow.NameAttrList.decode(t,t.uint32()));break;default:t.skipType(7&a)}}return r},t}(),t}(),i.NameAttrList=function(){function t(t){if(this.attr={},t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.attr=u.emptyObject,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n,r=void 0===e?t.len:t.pos+e,a=new l.tensorflow.NameAttrList;t.pos<r;){var i=t.uint32();switch(i>>>3){case 1:a.name=t.string();break;case 2:t.skip().pos++,a.attr===u.emptyObject&&(a.attr={}),n=t.string(),t.pos++,a.attr[n]=l.tensorflow.AttrValue.decode(t,t.uint32());break;default:t.skipType(7&i)}}return a},t}(),i.NodeDef=function(){function t(t){if(this.input=[],this.attr={},t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.op="",t.prototype.input=u.emptyArray,t.prototype.device="",t.prototype.attr=u.emptyObject,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n,r=void 0===e?t.len:t.pos+e,a=new l.tensorflow.NodeDef;t.pos<r;){var i=t.uint32();switch(i>>>3){case 1:a.name=t.string();break;case 2:a.op=t.string();break;case 3:a.input&&a.input.length||(a.input=[]),a.input.push(t.string());break;case 4:a.device=t.string();break;case 5:t.skip().pos++,a.attr===u.emptyObject&&(a.attr={}),n=t.string(),t.pos++,a.attr[n]=l.tensorflow.AttrValue.decode(t,t.uint32());break;default:t.skipType(7&i)}}return a},t}(),i.VersionDef=function(){function t(t){if(this.badConsumers=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.producer=0,t.prototype.minConsumer=0,t.prototype.badConsumers=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.VersionDef;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.producer=t.int32();break;case 2:r.minConsumer=t.int32();break;case 3:if(r.badConsumers&&r.badConsumers.length||(r.badConsumers=[]),2==(7&a))for(var i=t.uint32()+t.pos;t.pos<i;)r.badConsumers.push(t.int32());else r.badConsumers.push(t.int32());break;default:t.skipType(7&a)}}return r},t}(),i.GraphDef=function(){function t(t){if(this.node=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.node=u.emptyArray,t.prototype.versions=null,t.prototype.library=null,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.GraphDef;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.node&&r.node.length||(r.node=[]),r.node.push(l.tensorflow.NodeDef.decode(t,t.uint32()));break;case 4:r.versions=l.tensorflow.VersionDef.decode(t,t.uint32());break;case 2:r.library=l.tensorflow.FunctionDefLibrary.decode(t,t.uint32());break;default:t.skipType(7&a)}}return r},t}(),i.CollectionDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e;return t.prototype.nodeList=null,t.prototype.bytesList=null,t.prototype.int64List=null,t.prototype.floatList=null,t.prototype.anyList=null,Object.defineProperty(t.prototype,"kind",{get:u.oneOfGetter(e=["nodeList","bytesList","int64List","floatList","anyList"]),set:u.oneOfSetter(e)}),t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.CollectionDef;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.nodeList=l.tensorflow.CollectionDef.NodeList.decode(t,t.uint32());break;case 2:r.bytesList=l.tensorflow.CollectionDef.BytesList.decode(t,t.uint32());break;case 3:r.int64List=l.tensorflow.CollectionDef.Int64List.decode(t,t.uint32());break;case 4:r.floatList=l.tensorflow.CollectionDef.FloatList.decode(t,t.uint32());break;case 5:r.anyList=l.tensorflow.CollectionDef.AnyList.decode(t,t.uint32());break;default:t.skipType(7&a)}}return r},t.NodeList=function(){function t(t){if(this.value=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.value=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.CollectionDef.NodeList;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.value&&r.value.length||(r.value=[]),r.value.push(t.string());break;default:t.skipType(7&a)}}return r},t}(),t.BytesList=function(){function t(t){if(this.value=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.value=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.CollectionDef.BytesList;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.value&&r.value.length||(r.value=[]),r.value.push(t.bytes());break;default:t.skipType(7&a)}}return r},t}(),t.Int64List=function(){function t(t){if(this.value=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.value=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.CollectionDef.Int64List;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:if(r.value&&r.value.length||(r.value=[]),2==(7&a))for(var i=t.uint32()+t.pos;t.pos<i;)r.value.push(t.int64());else r.value.push(t.int64());break;default:t.skipType(7&a)}}return r},t}(),t.FloatList=function(){function t(t){if(this.value=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.value=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.CollectionDef.FloatList;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:if(r.value&&r.value.length||(r.value=[]),2==(7&a))for(var i=t.uint32()+t.pos;t.pos<i;)r.value.push(t.float());else r.value.push(t.float());break;default:t.skipType(7&a)}}return r},t}(),t.AnyList=function(){function t(t){if(this.value=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.value=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.CollectionDef.AnyList;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.value&&r.value.length||(r.value=[]),r.value.push(l.tensorflow.Any.decode(t,t.uint32()));break;default:t.skipType(7&a)}}return r},t}(),t}(),i.SaverDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e,n;return t.prototype.filenameTensorName="",t.prototype.saveTensorName="",t.prototype.restoreOpName="",t.prototype.maxToKeep=0,t.prototype.sharded=!1,t.prototype.keepCheckpointEveryNHours=0,t.prototype.version=0,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.SaverDef;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.filenameTensorName=t.string();break;case 2:r.saveTensorName=t.string();break;case 3:r.restoreOpName=t.string();break;case 4:r.maxToKeep=t.int32();break;case 5:r.sharded=t.bool();break;case 6:r.keepCheckpointEveryNHours=t.float();break;case 7:r.version=t.int32();break;default:t.skipType(7&a)}}return r},t.CheckpointFormatVersion=(e={},(n=Object.create(e))[e[0]="LEGACY"]=0,n[e[1]="V1"]=1,n[e[2]="V2"]=2,n),t}(),i.TensorInfo=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e;return t.prototype.name="",t.prototype.cooSparse=null,t.prototype.dtype=0,t.prototype.tensorShape=null,Object.defineProperty(t.prototype,"encoding",{get:u.oneOfGetter(e=["name","cooSparse"]),set:u.oneOfSetter(e)}),t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.TensorInfo;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.name=t.string();break;case 4:r.cooSparse=l.tensorflow.TensorInfo.CooSparse.decode(t,t.uint32());break;case 2:r.dtype=t.int32();break;case 3:r.tensorShape=l.tensorflow.TensorShape.decode(t,t.uint32());break;default:t.skipType(7&a)}}return r},t.CooSparse=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.valuesTensorName="",t.prototype.indicesTensorName="",t.prototype.denseShapeTensorName="",t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.TensorInfo.CooSparse;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.valuesTensorName=t.string();break;case 2:r.indicesTensorName=t.string();break;case 3:r.denseShapeTensorName=t.string();break;default:t.skipType(7&a)}}return r},t}(),t}(),i.SignatureDef=function(){function t(t){if(this.inputs={},this.outputs={},t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.inputs=u.emptyObject,t.prototype.outputs=u.emptyObject,t.prototype.methodName="",t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n,r=void 0===e?t.len:t.pos+e,a=new l.tensorflow.SignatureDef;t.pos<r;){var i=t.uint32();switch(i>>>3){case 1:t.skip().pos++,a.inputs===u.emptyObject&&(a.inputs={}),n=t.string(),t.pos++,a.inputs[n]=l.tensorflow.TensorInfo.decode(t,t.uint32());break;case 2:t.skip().pos++,a.outputs===u.emptyObject&&(a.outputs={}),n=t.string(),t.pos++,a.outputs[n]=l.tensorflow.TensorInfo.decode(t,t.uint32());break;case 3:a.methodName=t.string();break;default:t.skipType(7&i)}}return a},t}(),i.AssetFileDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.tensorInfo=null,t.prototype.filename="",t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.AssetFileDef;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.tensorInfo=l.tensorflow.TensorInfo.decode(t,t.uint32());break;case 2:r.filename=t.string();break;default:t.skipType(7&a)}}return r},t}(),i.OpDef=function(){function t(t){if(this.inputArg=[],this.outputArg=[],this.attr=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.inputArg=u.emptyArray,t.prototype.outputArg=u.emptyArray,t.prototype.attr=u.emptyArray,t.prototype.deprecation=null,t.prototype.summary="",t.prototype.description="",t.prototype.isCommutative=!1,t.prototype.isAggregate=!1,t.prototype.isStateful=!1,t.prototype.allowsUninitializedInput=!1,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.OpDef;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.name=t.string();break;case 2:r.inputArg&&r.inputArg.length||(r.inputArg=[]),r.inputArg.push(l.tensorflow.OpDef.ArgDef.decode(t,t.uint32()));break;case 3:r.outputArg&&r.outputArg.length||(r.outputArg=[]),r.outputArg.push(l.tensorflow.OpDef.ArgDef.decode(t,t.uint32()));break;case 4:r.attr&&r.attr.length||(r.attr=[]),r.attr.push(l.tensorflow.OpDef.AttrDef.decode(t,t.uint32()));break;case 8:r.deprecation=l.tensorflow.OpDef.OpDeprecation.decode(t,t.uint32());break;case 5:r.summary=t.string();break;case 6:r.description=t.string();break;case 18:r.isCommutative=t.bool();break;case 16:r.isAggregate=t.bool();break;case 17:r.isStateful=t.bool();break;case 19:r.allowsUninitializedInput=t.bool();break;default:t.skipType(7&a)}}return r},t.ArgDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.description="",t.prototype.type=0,t.prototype.typeAttr="",t.prototype.numberAttr="",t.prototype.typeListAttr="",t.prototype.isRef=!1,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.OpDef.ArgDef;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.name=t.string();break;case 2:r.description=t.string();break;case 3:r.type=t.int32();break;case 4:r.typeAttr=t.string();break;case 5:r.numberAttr=t.string();break;case 6:r.typeListAttr=t.string();break;case 16:r.isRef=t.bool();break;default:t.skipType(7&a)}}return r},t}(),t.AttrDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.type="",t.prototype.defaultValue=null,t.prototype.description="",t.prototype.hasMinimum=!1,t.prototype.minimum=u.Long?u.Long.fromBits(0,0,!1):0,t.prototype.allowedValues=null,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.OpDef.AttrDef;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.name=t.string();break;case 2:r.type=t.string();break;case 3:r.defaultValue=l.tensorflow.AttrValue.decode(t,t.uint32());break;case 4:r.description=t.string();break;case 5:r.hasMinimum=t.bool();break;case 6:r.minimum=t.int64();break;case 7:r.allowedValues=l.tensorflow.AttrValue.decode(t,t.uint32());break;default:t.skipType(7&a)}}return r},t}(),t.OpDeprecation=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.version=0,t.prototype.explanation="",t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.OpDef.OpDeprecation;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.version=t.int32();break;case 2:r.explanation=t.string();break;default:t.skipType(7&a)}}return r},t}(),t}(),i.OpList=function(){function t(t){if(this.op=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.op=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.OpList;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.op&&r.op.length||(r.op=[]),r.op.push(l.tensorflow.OpDef.decode(t,t.uint32()));break;default:t.skipType(7&a)}}return r},t}(),i.MetaGraphDef=function(){function t(t){if(this.collectionDef={},this.signatureDef={},this.assetFileDef=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.metaInfoDef=null,t.prototype.graphDef=null,t.prototype.saverDef=null,t.prototype.collectionDef=u.emptyObject,t.prototype.signatureDef=u.emptyObject,t.prototype.assetFileDef=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n,r=void 0===e?t.len:t.pos+e,a=new l.tensorflow.MetaGraphDef;t.pos<r;){var i=t.uint32();switch(i>>>3){case 1:a.metaInfoDef=l.tensorflow.MetaGraphDef.MetaInfoDef.decode(t,t.uint32());break;case 2:a.graphDef=l.tensorflow.GraphDef.decode(t,t.uint32());break;case 3:a.saverDef=l.tensorflow.SaverDef.decode(t,t.uint32());break;case 4:t.skip().pos++,a.collectionDef===u.emptyObject&&(a.collectionDef={}),n=t.string(),t.pos++,a.collectionDef[n]=l.tensorflow.CollectionDef.decode(t,t.uint32());break;case 5:t.skip().pos++,a.signatureDef===u.emptyObject&&(a.signatureDef={}),n=t.string(),t.pos++,a.signatureDef[n]=l.tensorflow.SignatureDef.decode(t,t.uint32());break;case 6:a.assetFileDef&&a.assetFileDef.length||(a.assetFileDef=[]),a.assetFileDef.push(l.tensorflow.AssetFileDef.decode(t,t.uint32()));break;default:t.skipType(7&i)}}return a},t.MetaInfoDef=function(){function t(t){if(this.tags=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.metaGraphVersion="",t.prototype.strippedOpList=null,t.prototype.anyInfo=null,t.prototype.tags=u.emptyArray,t.prototype.tensorflowVersion="",t.prototype.tensorflowGitVersion="",t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.MetaGraphDef.MetaInfoDef;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.metaGraphVersion=t.string();break;case 2:r.strippedOpList=l.tensorflow.OpList.decode(t,t.uint32());break;case 3:r.anyInfo=l.tensorflow.Any.decode(t,t.uint32());break;case 4:r.tags&&r.tags.length||(r.tags=[]),r.tags.push(t.string());break;case 5:r.tensorflowVersion=t.string();break;case 6:r.tensorflowGitVersion=t.string();break;default:t.skipType(7&a)}}return r},t}(),t}(),i.SavedModel=function(){function t(t){if(this.metaGraphs=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.savedModelSchemaVersion=u.Long?u.Long.fromBits(0,0,!1):0,t.prototype.metaGraphs=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.SavedModel;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.savedModelSchemaVersion=t.int64();break;case 2:r.metaGraphs&&r.metaGraphs.length||(r.metaGraphs=[]),r.metaGraphs.push(l.tensorflow.MetaGraphDef.decode(t,t.uint32()));break;default:t.skipType(7&a)}}return r},t}(),i.FunctionDefLibrary=function(){function t(t){if(this.function=[],this.gradient=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.function=u.emptyArray,t.prototype.gradient=u.emptyArray,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.FunctionDefLibrary;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.function&&r.function.length||(r.function=[]),r.function.push(l.tensorflow.FunctionDef.decode(t,t.uint32()));break;case 2:r.gradient&&r.gradient.length||(r.gradient=[]),r.gradient.push(l.tensorflow.GradientDef.decode(t,t.uint32()));break;default:t.skipType(7&a)}}return r},t}(),i.FunctionDef=function(){function t(t){if(this.attr={},this.nodeDef=[],this.ret={},t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.signature=null,t.prototype.attr=u.emptyObject,t.prototype.nodeDef=u.emptyArray,t.prototype.ret=u.emptyObject,t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n,r=void 0===e?t.len:t.pos+e,a=new l.tensorflow.FunctionDef;t.pos<r;){var i=t.uint32();switch(i>>>3){case 1:a.signature=l.tensorflow.OpDef.decode(t,t.uint32());break;case 5:t.skip().pos++,a.attr===u.emptyObject&&(a.attr={}),n=t.string(),t.pos++,a.attr[n]=l.tensorflow.AttrValue.decode(t,t.uint32());break;case 3:a.nodeDef&&a.nodeDef.length||(a.nodeDef=[]),a.nodeDef.push(l.tensorflow.NodeDef.decode(t,t.uint32()));break;case 4:t.skip().pos++,a.ret===u.emptyObject&&(a.ret={}),n=t.string(),t.pos++,a.ret[n]=t.string();break;default:t.skipType(7&i)}}return a},t}(),i.GradientDef=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.functionName="",t.prototype.gradientFunc="",t.decode=function(t,e){t instanceof s||(t=s.create(t));for(var n=void 0===e?t.len:t.pos+e,r=new l.tensorflow.GradientDef;t.pos<n;){var a=t.uint32();switch(a>>>3){case 1:r.functionName=t.string();break;case 2:r.gradientFunc=t.string();break;default:t.skipType(7&a)}}return r},t}(),i),t.exports=l},function(t,e,n){"use strict";var r=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},a=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(r(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0});var i=n(30),o=n(12),s=n(80),u=n(79),l=n(78),c=n(77),p=n(76),f=n(75),h=n(74),d=n(73),m=n(72),g=n(71),y=n(70),v=n(69),b=n(68),w=["Switch","Merge","Enter","Exit","NextIteration"],x=function(){function t(){var t=a(s,u,l,c,p,d,h,f,m,g,y,v,b);this.opMappers=t.reduce(function(t,e){return t[e.tfOpName]=e,t},{})}return Object.defineProperty(t,"Instance",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),t.prototype.isControlFlow=function(t){return w.some(function(e){return e===t.op})},t.prototype.transformGraph=function(t){var e=this,n=!1,a=[],i=t.node.reduce(function(t,r){return t[r.name]=e.mapNode(r),e.isControlFlow(r)&&(n=!0),"Placeholder"===r.op&&a.push(t[r.name]),t},{}),s=[],u=[];return Object.keys(i).forEach(function(t){var e=i[t];e.inputNames.forEach(function(t){var n=r(o.getNodeNameAndIndex(t),1)[0];e.inputs.push(i[n]),i[n].children.push(e)}),0===e.inputs.length&&s.push(e)}),Object.keys(i).forEach(function(t){var e=i[t];0===e.children.length&&u.push(e)}),{nodes:i,inputs:s,outputs:u,placeholders:a,withControlFlow:n}},t.prototype.mapNode=function(t){var e=this,n=this.opMappers[t.op];if(void 0===n)throw new Error("Tensorflow Op is not supported: "+t.op);var r={name:t.name,op:n.dlOpName,category:n.category,inputNames:(t.input||[]).map(function(t){return t.startsWith("^")?t.substr(1):t}),inputs:[],children:[],params:{}};return n.params&&(r.params=n.params.reduce(function(n,r){var a=r.tfInputIndex,i=r.tfInputParamLength,o=r.type,s=void 0;if(void 0===a)switch(r.type){case"string":void 0===(s=e.getStringParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getStringParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"number":void 0===(s=e.getNumberParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getNumberParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"number[]":void 0===(s=e.getNumericArrayParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getNumericArrayParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"bool":void 0===(s=e.getBoolParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getBoolParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"shape":void 0===(s=e.getTensorShapeParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getTensorShapeParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"dtype":void 0===(s=e.getDtypeParam(t.attr,r.tfParamName,r.defaultValue))&&r.tfParamNameDeprecated&&(s=e.getDtypeParam(t.attr,r.tfParamNameDeprecated,r.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error("Unsupported param type: "+r.type+" for op: "+t.op)}return n[r.dlParamName]={value:s,inputIndex:a,type:o,inputParamLength:i},n},{})),r},t.prototype.getStringParam=function(t,e,n,r){void 0===r&&(r=!1);var a=t[e];if(void 0!==a){var i=String.fromCharCode.apply(null,a.s);return r?i:i.toLowerCase()}return n},t.prototype.getBoolParam=function(t,e,n){var r=t[e];return r?r.b:n},t.prototype.getNumberParam=function(t,e,n){var r=t[e];return r?void 0!==r.f?r.f:r.i:n},t.prototype.getDtypeParam=function(t,e,n){var r=t[e];if(r&&r.type)switch(r.type){case i.tensorflow.DataType.DT_FLOAT:return"float32";case i.tensorflow.DataType.DT_INT32:return"int32";case i.tensorflow.DataType.DT_BOOL:return"bool";default:return n}return n},t.prototype.getTensorShapeParam=function(t,e,n){var r=t[e];return r&&r.shape?r.shape.dim.map(function(t){return t.size}):n},t.prototype.getNumericArrayParam=function(t,e,n){var r=t[e];return r?r.list.f&&r.list.f.length?r.list.f:r.list.i:n},t}();e.OperationMapper=x},function(t,e){},function(t,e,n){var r;!function(a,i){var o,s=this,u=256,l=6,c="random",p=i.pow(u,l),f=i.pow(2,52),h=2*f,d=u-1;function m(t,e,n){var r=[],m=y(function t(e,n){var r,a=[],i=typeof e;if(n&&"object"==i)for(r in e)try{a.push(t(e[r],n-1))}catch(t){}return a.length?a:"string"==i?e:e+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,v(a)]:null==t?function(){try{var t;return o&&(t=o.randomBytes)?t=t(u):(t=new Uint8Array(u),(s.crypto||s.msCrypto).getRandomValues(t)),v(t)}catch(t){var e=s.navigator,n=e&&e.plugins;return[+new Date,s,n,s.screen,v(a)]}}():t,3),r),b=new function(t){var e,n=t.length,r=this,a=0,i=r.i=r.j=0,o=r.S=[];n||(t=[n++]);for(;a<u;)o[a]=a++;for(a=0;a<u;a++)o[a]=o[i=d&i+t[a%n]+(e=o[a])],o[i]=e;(r.g=function(t){for(var e,n=0,a=r.i,i=r.j,o=r.S;t--;)e=o[a=d&a+1],n=n*u+o[d&(o[a]=o[i=d&i+e])+(o[i]=e)];return r.i=a,r.j=i,n})(u)}(r),w=function(){for(var t=b.g(l),e=p,n=0;t<f;)t=(t+n)*u,e*=u,n=b.g(1);for(;t>=h;)t/=2,e/=2,n>>>=1;return(t+n)/e};return w.int32=function(){return 0|b.g(4)},w.quick=function(){return b.g(4)/4294967296},w.double=w,y(v(b.S),a),(e.pass||n||function(t,e,n,r){return r&&(r.S&&g(r,b),t.state=function(){return g(b,{})}),n?(i[c]=t,e):t})(w,m,"global"in e?e.global:this==i,e.state)}function g(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function y(t,e){for(var n,r=t+"",a=0;a<r.length;)e[d&a]=d&(n^=19*e[d&a])+r.charCodeAt(a++);return v(e)}function v(t){return String.fromCharCode.apply(0,t)}if(i["seed"+c]=m,y(i.random(),a),"object"==typeof t&&t.exports){t.exports=m;try{o=n(98)}catch(t){}}else void 0===(r=function(){return m}.call(e,n,e,t))||(t.exports=r)}([],Math)},function(t,e,n){(function(t){var r;!function(t,a,i){function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function s(t,e){var n=new function(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,a=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^a,e.a=a-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}(t),r=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=s:n(13)&&n(22)?void 0===(r=function(){return s}.call(e,n,e,a))||(a.exports=r):this.tychei=s}(0,"object"==typeof t&&t,n(13))}).call(this,n(20)(t))},function(t,e,n){(function(t){var r;!function(t,a,i){function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function s(t,e){null==t&&(t=+new Date);var n=new function(t){var e=this;e.next=function(){var t,n,r=e.w,a=e.X,i=e.i;return e.w=r=r+1640531527|0,n=a[i+34&127],t=a[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=a[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,a,i,o,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),a=0,i=-32;i<u;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(o=o+1640531527|0,a=0==(n=s[127&i]^=r+o)?a+1:0);for(a>=128&&(s[127&(e&&e.length||0)]=-1),a=127,i=512;i>0;--i)r=s[a+34&127],n=s[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[a]=r^n;t.w=o,t.X=s,t.i=a}(e,t)}(t),r=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,r&&(r.X&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=s:n(13)&&n(22)?void 0===(r=function(){return s}.call(e,n,e,a))||(a.exports=r):this.xor4096=s}(0,"object"==typeof t&&t,n(13))}).call(this,n(20)(t))},function(t,e,n){(function(t){var r;!function(t,a,i){function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function s(t,e){null==t&&(t=+new Date);var n=new function(t){var e=this;e.next=function(){var t,n,r=e.x,a=e.i;return t=r[a],n=(t^=t>>>7)^t<<24,n^=(t=r[a+1&7])^t>>>10,n^=(t=r[a+3&7])^t>>>3,n^=(t=r[a+4&7])^t<<7,t=r[a+7&7],n^=(t^=t<<13)^t<<9,r[a]=n,e.i=a+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}(t),r=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,r&&(r.x&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=s:n(13)&&n(22)?void 0===(r=function(){return s}.call(e,n,e,a))||(a.exports=r):this.xorshift7=s}(0,"object"==typeof t&&t,n(13))}).call(this,n(20)(t))},function(t,e,n){(function(t){var r;!function(t,a,i){function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function s(t,e){var n=new function(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}(t),r=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=s:n(13)&&n(22)?void 0===(r=function(){return s}.call(e,n,e,a))||(a.exports=r):this.xorwow=s}(0,"object"==typeof t&&t,n(13))}).call(this,n(20)(t))},function(t,e,n){(function(t){var r;!function(t,a,i){function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function s(t,e){var n=new function(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}(t),r=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=s:n(13)&&n(22)?void 0===(r=function(){return s}.call(e,n,e,a))||(a.exports=r):this.xor128=s}(0,"object"==typeof t&&t,n(13))}).call(this,n(20)(t))},function(t,e,n){(function(t){var r;!function(t,a,i){function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function s(t,e){var n=new function(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}(t),r=e&&e.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+1.1102230246251565e-16*(2097152*a()|0)},a.quick=a,r&&("object"==typeof r&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=s:n(13)&&n(22)?void 0===(r=function(){return s}.call(e,n,e,a))||(a.exports=r):this.alea=s}(0,"object"==typeof t&&t,n(13))}).call(this,n(20)(t))},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),r(n(32)),r(n(53)),r(n(27))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(106);e.FrozenModel=r.FrozenModel,e.loadFrozenModel=r.loadFrozenModel;var a=n(46);e.version_converter=a.version},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(107),a=n(45);document.getElementById("file-input");const i=r.loadFrozenModel("http://localhost:8000/models/model2/tensorflowjs_model.pb","http://localhost:8000/models/model2/weights_manifest.json");window.onload=(()=>{document.getElementById("file-input").addEventListener("change",t=>(function(t,e){var n=t.target.files[0];if(n){var r=new FileReader;r.onload=function(t){const n=t.target.result;a.forwardPassWav(n,e)},r.readAsArrayBuffer(n)}})(t,i),!1)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,